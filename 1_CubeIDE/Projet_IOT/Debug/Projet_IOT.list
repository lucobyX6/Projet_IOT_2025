
Projet_IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f010  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019bc  0800f1a0  0800f1a0  000101a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b5c  08010b5c  000120c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010b5c  08010b5c  00011b5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b64  08010b64  000120c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b64  08010b64  00011b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010b68  08010b68  00011b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000c4  20000000  08010b6c  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  200000c4  08010c30  000120c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  08010c30  000127e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000120c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d36  00000000  00000000  000120f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004dc5  00000000  00000000  00035e2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002008  00000000  00000000  0003abf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001901  00000000  00000000  0003cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000274b8  00000000  00000000  0003e4f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000267e2  00000000  00000000  000659b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7b20  00000000  00000000  0008c193  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00173cb3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009224  00000000  00000000  00173cf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a9  00000000  00000000  0017cf1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c4 	.word	0x200000c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f188 	.word	0x0800f188

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c8 	.word	0x200000c8
 80001cc:	0800f188 	.word	0x0800f188

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	@ 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9b5 	b.w	8000e38 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f84d 	bl	8000b7c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f840 	bl	8000b7c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f82f 	bl	8000b7c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f821 	bl	8000b7c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__aeabi_uldivmod>:
 8000b4c:	b953      	cbnz	r3, 8000b64 <__aeabi_uldivmod+0x18>
 8000b4e:	b94a      	cbnz	r2, 8000b64 <__aeabi_uldivmod+0x18>
 8000b50:	2900      	cmp	r1, #0
 8000b52:	bf08      	it	eq
 8000b54:	2800      	cmpeq	r0, #0
 8000b56:	bf1c      	itt	ne
 8000b58:	f04f 31ff 	movne.w	r1, #4294967295
 8000b5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b60:	f000 b96a 	b.w	8000e38 <__aeabi_idiv0>
 8000b64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b6c:	f000 f806 	bl	8000b7c <__udivmoddi4>
 8000b70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b78:	b004      	add	sp, #16
 8000b7a:	4770      	bx	lr

08000b7c <__udivmoddi4>:
 8000b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b80:	9d08      	ldr	r5, [sp, #32]
 8000b82:	460c      	mov	r4, r1
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d14e      	bne.n	8000c26 <__udivmoddi4+0xaa>
 8000b88:	4694      	mov	ip, r2
 8000b8a:	458c      	cmp	ip, r1
 8000b8c:	4686      	mov	lr, r0
 8000b8e:	fab2 f282 	clz	r2, r2
 8000b92:	d962      	bls.n	8000c5a <__udivmoddi4+0xde>
 8000b94:	b14a      	cbz	r2, 8000baa <__udivmoddi4+0x2e>
 8000b96:	f1c2 0320 	rsb	r3, r2, #32
 8000b9a:	4091      	lsls	r1, r2
 8000b9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ba0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ba4:	4319      	orrs	r1, r3
 8000ba6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000baa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bae:	fa1f f68c 	uxth.w	r6, ip
 8000bb2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bba:	fb07 1114 	mls	r1, r7, r4, r1
 8000bbe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bc2:	fb04 f106 	mul.w	r1, r4, r6
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	d90a      	bls.n	8000be0 <__udivmoddi4+0x64>
 8000bca:	eb1c 0303 	adds.w	r3, ip, r3
 8000bce:	f104 30ff 	add.w	r0, r4, #4294967295
 8000bd2:	f080 8112 	bcs.w	8000dfa <__udivmoddi4+0x27e>
 8000bd6:	4299      	cmp	r1, r3
 8000bd8:	f240 810f 	bls.w	8000dfa <__udivmoddi4+0x27e>
 8000bdc:	3c02      	subs	r4, #2
 8000bde:	4463      	add	r3, ip
 8000be0:	1a59      	subs	r1, r3, r1
 8000be2:	fa1f f38e 	uxth.w	r3, lr
 8000be6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bea:	fb07 1110 	mls	r1, r7, r0, r1
 8000bee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bf2:	fb00 f606 	mul.w	r6, r0, r6
 8000bf6:	429e      	cmp	r6, r3
 8000bf8:	d90a      	bls.n	8000c10 <__udivmoddi4+0x94>
 8000bfa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfe:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c02:	f080 80fc 	bcs.w	8000dfe <__udivmoddi4+0x282>
 8000c06:	429e      	cmp	r6, r3
 8000c08:	f240 80f9 	bls.w	8000dfe <__udivmoddi4+0x282>
 8000c0c:	4463      	add	r3, ip
 8000c0e:	3802      	subs	r0, #2
 8000c10:	1b9b      	subs	r3, r3, r6
 8000c12:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c16:	2100      	movs	r1, #0
 8000c18:	b11d      	cbz	r5, 8000c22 <__udivmoddi4+0xa6>
 8000c1a:	40d3      	lsrs	r3, r2
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d905      	bls.n	8000c36 <__udivmoddi4+0xba>
 8000c2a:	b10d      	cbz	r5, 8000c30 <__udivmoddi4+0xb4>
 8000c2c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c30:	2100      	movs	r1, #0
 8000c32:	4608      	mov	r0, r1
 8000c34:	e7f5      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c36:	fab3 f183 	clz	r1, r3
 8000c3a:	2900      	cmp	r1, #0
 8000c3c:	d146      	bne.n	8000ccc <__udivmoddi4+0x150>
 8000c3e:	42a3      	cmp	r3, r4
 8000c40:	d302      	bcc.n	8000c48 <__udivmoddi4+0xcc>
 8000c42:	4290      	cmp	r0, r2
 8000c44:	f0c0 80f0 	bcc.w	8000e28 <__udivmoddi4+0x2ac>
 8000c48:	1a86      	subs	r6, r0, r2
 8000c4a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c4e:	2001      	movs	r0, #1
 8000c50:	2d00      	cmp	r5, #0
 8000c52:	d0e6      	beq.n	8000c22 <__udivmoddi4+0xa6>
 8000c54:	e9c5 6300 	strd	r6, r3, [r5]
 8000c58:	e7e3      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000c5a:	2a00      	cmp	r2, #0
 8000c5c:	f040 8090 	bne.w	8000d80 <__udivmoddi4+0x204>
 8000c60:	eba1 040c 	sub.w	r4, r1, ip
 8000c64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c68:	fa1f f78c 	uxth.w	r7, ip
 8000c6c:	2101      	movs	r1, #1
 8000c6e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c72:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c76:	fb08 4416 	mls	r4, r8, r6, r4
 8000c7a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c7e:	fb07 f006 	mul.w	r0, r7, r6
 8000c82:	4298      	cmp	r0, r3
 8000c84:	d908      	bls.n	8000c98 <__udivmoddi4+0x11c>
 8000c86:	eb1c 0303 	adds.w	r3, ip, r3
 8000c8a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x11a>
 8000c90:	4298      	cmp	r0, r3
 8000c92:	f200 80cd 	bhi.w	8000e30 <__udivmoddi4+0x2b4>
 8000c96:	4626      	mov	r6, r4
 8000c98:	1a1c      	subs	r4, r3, r0
 8000c9a:	fa1f f38e 	uxth.w	r3, lr
 8000c9e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ca2:	fb08 4410 	mls	r4, r8, r0, r4
 8000ca6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000caa:	fb00 f707 	mul.w	r7, r0, r7
 8000cae:	429f      	cmp	r7, r3
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x148>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cba:	d202      	bcs.n	8000cc2 <__udivmoddi4+0x146>
 8000cbc:	429f      	cmp	r7, r3
 8000cbe:	f200 80b0 	bhi.w	8000e22 <__udivmoddi4+0x2a6>
 8000cc2:	4620      	mov	r0, r4
 8000cc4:	1bdb      	subs	r3, r3, r7
 8000cc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cca:	e7a5      	b.n	8000c18 <__udivmoddi4+0x9c>
 8000ccc:	f1c1 0620 	rsb	r6, r1, #32
 8000cd0:	408b      	lsls	r3, r1
 8000cd2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cd6:	431f      	orrs	r7, r3
 8000cd8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cdc:	fa04 f301 	lsl.w	r3, r4, r1
 8000ce0:	ea43 030c 	orr.w	r3, r3, ip
 8000ce4:	40f4      	lsrs	r4, r6
 8000ce6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cea:	0c38      	lsrs	r0, r7, #16
 8000cec:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cf0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cf4:	fa1f fc87 	uxth.w	ip, r7
 8000cf8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cfc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d00:	fb0e f90c 	mul.w	r9, lr, ip
 8000d04:	45a1      	cmp	r9, r4
 8000d06:	fa02 f201 	lsl.w	r2, r2, r1
 8000d0a:	d90a      	bls.n	8000d22 <__udivmoddi4+0x1a6>
 8000d0c:	193c      	adds	r4, r7, r4
 8000d0e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d12:	f080 8084 	bcs.w	8000e1e <__udivmoddi4+0x2a2>
 8000d16:	45a1      	cmp	r9, r4
 8000d18:	f240 8081 	bls.w	8000e1e <__udivmoddi4+0x2a2>
 8000d1c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d20:	443c      	add	r4, r7
 8000d22:	eba4 0409 	sub.w	r4, r4, r9
 8000d26:	fa1f f983 	uxth.w	r9, r3
 8000d2a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d2e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d32:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d36:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d3a:	45a4      	cmp	ip, r4
 8000d3c:	d907      	bls.n	8000d4e <__udivmoddi4+0x1d2>
 8000d3e:	193c      	adds	r4, r7, r4
 8000d40:	f103 30ff 	add.w	r0, r3, #4294967295
 8000d44:	d267      	bcs.n	8000e16 <__udivmoddi4+0x29a>
 8000d46:	45a4      	cmp	ip, r4
 8000d48:	d965      	bls.n	8000e16 <__udivmoddi4+0x29a>
 8000d4a:	3b02      	subs	r3, #2
 8000d4c:	443c      	add	r4, r7
 8000d4e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d52:	fba0 9302 	umull	r9, r3, r0, r2
 8000d56:	eba4 040c 	sub.w	r4, r4, ip
 8000d5a:	429c      	cmp	r4, r3
 8000d5c:	46ce      	mov	lr, r9
 8000d5e:	469c      	mov	ip, r3
 8000d60:	d351      	bcc.n	8000e06 <__udivmoddi4+0x28a>
 8000d62:	d04e      	beq.n	8000e02 <__udivmoddi4+0x286>
 8000d64:	b155      	cbz	r5, 8000d7c <__udivmoddi4+0x200>
 8000d66:	ebb8 030e 	subs.w	r3, r8, lr
 8000d6a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d6e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d72:	40cb      	lsrs	r3, r1
 8000d74:	431e      	orrs	r6, r3
 8000d76:	40cc      	lsrs	r4, r1
 8000d78:	e9c5 6400 	strd	r6, r4, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e750      	b.n	8000c22 <__udivmoddi4+0xa6>
 8000d80:	f1c2 0320 	rsb	r3, r2, #32
 8000d84:	fa20 f103 	lsr.w	r1, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d90:	4094      	lsls	r4, r2
 8000d92:	430c      	orrs	r4, r1
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d9c:	fa1f f78c 	uxth.w	r7, ip
 8000da0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da4:	fb08 3110 	mls	r1, r8, r0, r3
 8000da8:	0c23      	lsrs	r3, r4, #16
 8000daa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dae:	fb00 f107 	mul.w	r1, r0, r7
 8000db2:	4299      	cmp	r1, r3
 8000db4:	d908      	bls.n	8000dc8 <__udivmoddi4+0x24c>
 8000db6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dba:	f100 36ff 	add.w	r6, r0, #4294967295
 8000dbe:	d22c      	bcs.n	8000e1a <__udivmoddi4+0x29e>
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d92a      	bls.n	8000e1a <__udivmoddi4+0x29e>
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f1f8 	udiv	r1, r3, r8
 8000dd0:	fb08 3311 	mls	r3, r8, r1, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb01 f307 	mul.w	r3, r1, r7
 8000ddc:	42a3      	cmp	r3, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x276>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f101 36ff 	add.w	r6, r1, #4294967295
 8000de8:	d213      	bcs.n	8000e12 <__udivmoddi4+0x296>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d911      	bls.n	8000e12 <__udivmoddi4+0x296>
 8000dee:	3902      	subs	r1, #2
 8000df0:	4464      	add	r4, ip
 8000df2:	1ae4      	subs	r4, r4, r3
 8000df4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000df8:	e739      	b.n	8000c6e <__udivmoddi4+0xf2>
 8000dfa:	4604      	mov	r4, r0
 8000dfc:	e6f0      	b.n	8000be0 <__udivmoddi4+0x64>
 8000dfe:	4608      	mov	r0, r1
 8000e00:	e706      	b.n	8000c10 <__udivmoddi4+0x94>
 8000e02:	45c8      	cmp	r8, r9
 8000e04:	d2ae      	bcs.n	8000d64 <__udivmoddi4+0x1e8>
 8000e06:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e0a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e0e:	3801      	subs	r0, #1
 8000e10:	e7a8      	b.n	8000d64 <__udivmoddi4+0x1e8>
 8000e12:	4631      	mov	r1, r6
 8000e14:	e7ed      	b.n	8000df2 <__udivmoddi4+0x276>
 8000e16:	4603      	mov	r3, r0
 8000e18:	e799      	b.n	8000d4e <__udivmoddi4+0x1d2>
 8000e1a:	4630      	mov	r0, r6
 8000e1c:	e7d4      	b.n	8000dc8 <__udivmoddi4+0x24c>
 8000e1e:	46d6      	mov	lr, sl
 8000e20:	e77f      	b.n	8000d22 <__udivmoddi4+0x1a6>
 8000e22:	4463      	add	r3, ip
 8000e24:	3802      	subs	r0, #2
 8000e26:	e74d      	b.n	8000cc4 <__udivmoddi4+0x148>
 8000e28:	4606      	mov	r6, r0
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e70f      	b.n	8000c50 <__udivmoddi4+0xd4>
 8000e30:	3e02      	subs	r6, #2
 8000e32:	4463      	add	r3, ip
 8000e34:	e730      	b.n	8000c98 <__udivmoddi4+0x11c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop

08000e3c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e52:	4b29      	ldr	r3, [pc, #164]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e54:	4a29      	ldr	r2, [pc, #164]	@ (8000efc <MX_ADC1_Init+0xc0>)
 8000e56:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e58:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e64:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e70:	4b21      	ldr	r3, [pc, #132]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e72:	2204      	movs	r2, #4
 8000e74:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e76:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e7c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e90:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e96:	4b18      	ldr	r3, [pc, #96]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000eb2:	4811      	ldr	r0, [pc, #68]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000eb4:	f008 fb44 	bl	8009540 <HAL_ADC_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000ebe:	f004 fc12 	bl	80056e6 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f00 <MX_ADC1_Init+0xc4>)
 8000ec4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ec6:	2306      	movs	r3, #6
 8000ec8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ece:	237f      	movs	r3, #127	@ 0x7f
 8000ed0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_ADC1_Init+0xbc>)
 8000ee0:	f008 fe42 	bl	8009b68 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eea:	f004 fbfc 	bl	80056e6 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	200000e0 	.word	0x200000e0
 8000efc:	50040000 	.word	0x50040000
 8000f00:	3ef08000 	.word	0x3ef08000

08000f04 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b09e      	sub	sp, #120	@ 0x78
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	2254      	movs	r2, #84	@ 0x54
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f00d fabe 	bl	800e4a6 <memset>
  if(adcHandle->Instance==ADC1)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a21      	ldr	r2, [pc, #132]	@ (8000fb4 <HAL_ADC_MspInit+0xb0>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d13b      	bne.n	8000fac <HAL_ADC_MspInit+0xa8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000f34:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f38:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000f3a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8000f3e:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f40:	f107 0310 	add.w	r3, r7, #16
 8000f44:	4618      	mov	r0, r3
 8000f46:	f00b fa7b 	bl	800c440 <HAL_RCCEx_PeriphCLKConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f50:	f004 fbc9 	bl	80056e6 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <HAL_ADC_MspInit+0xb4>)
 8000f56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f58:	4a17      	ldr	r2, [pc, #92]	@ (8000fb8 <HAL_ADC_MspInit+0xb4>)
 8000f5a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f5e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <HAL_ADC_MspInit+0xb4>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f64:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <HAL_ADC_MspInit+0xb4>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f70:	4a11      	ldr	r2, [pc, #68]	@ (8000fb8 <HAL_ADC_MspInit+0xb4>)
 8000f72:	f043 0302 	orr.w	r3, r3, #2
 8000f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f78:	4b0f      	ldr	r3, [pc, #60]	@ (8000fb8 <HAL_ADC_MspInit+0xb4>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f7c:	f003 0302 	and.w	r3, r3, #2
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f84:	2301      	movs	r3, #1
 8000f86:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f88:	230b      	movs	r3, #11
 8000f8a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f90:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f94:	4619      	mov	r1, r3
 8000f96:	4809      	ldr	r0, [pc, #36]	@ (8000fbc <HAL_ADC_MspInit+0xb8>)
 8000f98:	f009 fb0c 	bl	800a5b4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	2012      	movs	r0, #18
 8000fa2:	f009 fad0 	bl	800a546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000fa6:	2012      	movs	r0, #18
 8000fa8:	f009 fae9 	bl	800a57e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fac:	bf00      	nop
 8000fae:	3778      	adds	r7, #120	@ 0x78
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	50040000 	.word	0x50040000
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000400 	.word	0x48000400

08000fc0 <aesroundkeys>:
u4_t AESAUX[16/sizeof(u4_t)];
u4_t AESKEY[11*16/sizeof(u4_t)];

// generate 1+10 roundkeys for encryption with 128-bit key
// read 128-bit key from AESKEY in MSBF, generate roundkey words in place
static void aesroundkeys () {
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
    int i;
    u4_t b;

    for( i=0; i<4; i++) {
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	e021      	b.n	8001010 <aesroundkeys+0x50>
        AESKEY[i] = swapmsbf(AESKEY[i]);
 8000fcc:	4a37      	ldr	r2, [pc, #220]	@ (80010ac <aesroundkeys+0xec>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd4:	061a      	lsls	r2, r3, #24
 8000fd6:	4935      	ldr	r1, [pc, #212]	@ (80010ac <aesroundkeys+0xec>)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fde:	021b      	lsls	r3, r3, #8
 8000fe0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8000fe4:	431a      	orrs	r2, r3
 8000fe6:	4931      	ldr	r1, [pc, #196]	@ (80010ac <aesroundkeys+0xec>)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000fee:	0a1b      	lsrs	r3, r3, #8
 8000ff0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8000ff4:	431a      	orrs	r2, r3
 8000ff6:	492d      	ldr	r1, [pc, #180]	@ (80010ac <aesroundkeys+0xec>)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ffe:	0e1b      	lsrs	r3, r3, #24
 8001000:	431a      	orrs	r2, r3
 8001002:	492a      	ldr	r1, [pc, #168]	@ (80010ac <aesroundkeys+0xec>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( i=0; i<4; i++) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3301      	adds	r3, #1
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b03      	cmp	r3, #3
 8001014:	ddda      	ble.n	8000fcc <aesroundkeys+0xc>
    }
    
    b = AESKEY[3];
 8001016:	4b25      	ldr	r3, [pc, #148]	@ (80010ac <aesroundkeys+0xec>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	603b      	str	r3, [r7, #0]
    for( ; i<44; i++ ) {
 800101c:	e03c      	b.n	8001098 <aesroundkeys+0xd8>
        if( i%4==0 ) {
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	2b00      	cmp	r3, #0
 8001026:	d127      	bne.n	8001078 <aesroundkeys+0xb8>
            // b = SubWord(RotWord(b)) xor Rcon[i/4]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	0c1b      	lsrs	r3, r3, #16
 800102c:	b2db      	uxtb	r3, r3
 800102e:	461a      	mov	r2, r3
 8001030:	4b1f      	ldr	r3, [pc, #124]	@ (80010b0 <aesroundkeys+0xf0>)
 8001032:	5c9b      	ldrb	r3, [r3, r2]
 8001034:	061a      	lsls	r2, r3, #24
                (AES_S[u1(b >>  8)] << 16) ^
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4619      	mov	r1, r3
 800103e:	4b1c      	ldr	r3, [pc, #112]	@ (80010b0 <aesroundkeys+0xf0>)
 8001040:	5c5b      	ldrb	r3, [r3, r1]
 8001042:	041b      	lsls	r3, r3, #16
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001044:	405a      	eors	r2, r3
                (AES_S[u1(b)      ] <<  8) ^
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4619      	mov	r1, r3
 800104c:	4b18      	ldr	r3, [pc, #96]	@ (80010b0 <aesroundkeys+0xf0>)
 800104e:	5c5b      	ldrb	r3, [r3, r1]
 8001050:	021b      	lsls	r3, r3, #8
                (AES_S[u1(b >>  8)] << 16) ^
 8001052:	4053      	eors	r3, r2
                (AES_S[   b >> 24 ]      ) ^
 8001054:	683a      	ldr	r2, [r7, #0]
 8001056:	0e12      	lsrs	r2, r2, #24
 8001058:	4915      	ldr	r1, [pc, #84]	@ (80010b0 <aesroundkeys+0xf0>)
 800105a:	5c8a      	ldrb	r2, [r1, r2]
                (AES_S[u1(b)      ] <<  8) ^
 800105c:	4053      	eors	r3, r2
 800105e:	461a      	mov	r2, r3
                 AES_RCON[(i-4)/4];
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3b04      	subs	r3, #4
 8001064:	2b00      	cmp	r3, #0
 8001066:	da00      	bge.n	800106a <aesroundkeys+0xaa>
 8001068:	3303      	adds	r3, #3
 800106a:	109b      	asrs	r3, r3, #2
 800106c:	4619      	mov	r1, r3
 800106e:	4b11      	ldr	r3, [pc, #68]	@ (80010b4 <aesroundkeys+0xf4>)
 8001070:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
            b = (AES_S[u1(b >> 16)] << 24) ^
 8001074:	4053      	eors	r3, r2
 8001076:	603b      	str	r3, [r7, #0]
        }
        AESKEY[i] = b ^= AESKEY[i-4];
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b04      	subs	r3, #4
 800107c:	4a0b      	ldr	r2, [pc, #44]	@ (80010ac <aesroundkeys+0xec>)
 800107e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001082:	683a      	ldr	r2, [r7, #0]
 8001084:	4053      	eors	r3, r2
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	4908      	ldr	r1, [pc, #32]	@ (80010ac <aesroundkeys+0xec>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for( ; i<44; i++ ) {
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	3301      	adds	r3, #1
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b2b      	cmp	r3, #43	@ 0x2b
 800109c:	ddbf      	ble.n	800101e <aesroundkeys+0x5e>
    }
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr
 80010ac:	20000154 	.word	0x20000154
 80010b0:	0800f8c4 	.word	0x0800f8c4
 80010b4:	0800f89c 	.word	0x0800f89c

080010b8 <os_aes>:

u4_t os_aes (u1_t mode, xref2u1_t buf, u2_t len) {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b08c      	sub	sp, #48	@ 0x30
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	6039      	str	r1, [r7, #0]
 80010c2:	71fb      	strb	r3, [r7, #7]
 80010c4:	4613      	mov	r3, r2
 80010c6:	80bb      	strh	r3, [r7, #4]
        
        aesroundkeys();
 80010c8:	f7ff ff7a 	bl	8000fc0 <aesroundkeys>

        if( mode & AES_MICNOAUX ) {
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	f003 0308 	and.w	r3, r3, #8
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d010      	beq.n	80010f8 <os_aes+0x40>
            AESAUX[0] = AESAUX[1] = AESAUX[2] = AESAUX[3] = 0;
 80010d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001240 <os_aes+0x188>)
 80010d8:	2200      	movs	r2, #0
 80010da:	60da      	str	r2, [r3, #12]
 80010dc:	4b58      	ldr	r3, [pc, #352]	@ (8001240 <os_aes+0x188>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	4a57      	ldr	r2, [pc, #348]	@ (8001240 <os_aes+0x188>)
 80010e2:	6093      	str	r3, [r2, #8]
 80010e4:	4b56      	ldr	r3, [pc, #344]	@ (8001240 <os_aes+0x188>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a55      	ldr	r2, [pc, #340]	@ (8001240 <os_aes+0x188>)
 80010ea:	6053      	str	r3, [r2, #4]
 80010ec:	4b54      	ldr	r3, [pc, #336]	@ (8001240 <os_aes+0x188>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	4a53      	ldr	r2, [pc, #332]	@ (8001240 <os_aes+0x188>)
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	f000 bc97 	b.w	8001a26 <os_aes+0x96e>
        } else {
            AESAUX[0] = swapmsbf(AESAUX[0]);
 80010f8:	4b51      	ldr	r3, [pc, #324]	@ (8001240 <os_aes+0x188>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	061a      	lsls	r2, r3, #24
 80010fe:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <os_aes+0x188>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001108:	431a      	orrs	r2, r3
 800110a:	4b4d      	ldr	r3, [pc, #308]	@ (8001240 <os_aes+0x188>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	0a1b      	lsrs	r3, r3, #8
 8001110:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001114:	431a      	orrs	r2, r3
 8001116:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <os_aes+0x188>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	0e1b      	lsrs	r3, r3, #24
 800111c:	4313      	orrs	r3, r2
 800111e:	4a48      	ldr	r2, [pc, #288]	@ (8001240 <os_aes+0x188>)
 8001120:	6013      	str	r3, [r2, #0]
            AESAUX[1] = swapmsbf(AESAUX[1]);
 8001122:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <os_aes+0x188>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	061a      	lsls	r2, r3, #24
 8001128:	4b45      	ldr	r3, [pc, #276]	@ (8001240 <os_aes+0x188>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	021b      	lsls	r3, r3, #8
 800112e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001132:	431a      	orrs	r2, r3
 8001134:	4b42      	ldr	r3, [pc, #264]	@ (8001240 <os_aes+0x188>)
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800113e:	431a      	orrs	r2, r3
 8001140:	4b3f      	ldr	r3, [pc, #252]	@ (8001240 <os_aes+0x188>)
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	0e1b      	lsrs	r3, r3, #24
 8001146:	4313      	orrs	r3, r2
 8001148:	4a3d      	ldr	r2, [pc, #244]	@ (8001240 <os_aes+0x188>)
 800114a:	6053      	str	r3, [r2, #4]
            AESAUX[2] = swapmsbf(AESAUX[2]);
 800114c:	4b3c      	ldr	r3, [pc, #240]	@ (8001240 <os_aes+0x188>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	061a      	lsls	r2, r3, #24
 8001152:	4b3b      	ldr	r3, [pc, #236]	@ (8001240 <os_aes+0x188>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800115c:	431a      	orrs	r2, r3
 800115e:	4b38      	ldr	r3, [pc, #224]	@ (8001240 <os_aes+0x188>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	0a1b      	lsrs	r3, r3, #8
 8001164:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001168:	431a      	orrs	r2, r3
 800116a:	4b35      	ldr	r3, [pc, #212]	@ (8001240 <os_aes+0x188>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	0e1b      	lsrs	r3, r3, #24
 8001170:	4313      	orrs	r3, r2
 8001172:	4a33      	ldr	r2, [pc, #204]	@ (8001240 <os_aes+0x188>)
 8001174:	6093      	str	r3, [r2, #8]
            AESAUX[3] = swapmsbf(AESAUX[3]);
 8001176:	4b32      	ldr	r3, [pc, #200]	@ (8001240 <os_aes+0x188>)
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	061a      	lsls	r2, r3, #24
 800117c:	4b30      	ldr	r3, [pc, #192]	@ (8001240 <os_aes+0x188>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8001186:	431a      	orrs	r2, r3
 8001188:	4b2d      	ldr	r3, [pc, #180]	@ (8001240 <os_aes+0x188>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8001192:	431a      	orrs	r2, r3
 8001194:	4b2a      	ldr	r3, [pc, #168]	@ (8001240 <os_aes+0x188>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	0e1b      	lsrs	r3, r3, #24
 800119a:	4313      	orrs	r3, r2
 800119c:	4a28      	ldr	r2, [pc, #160]	@ (8001240 <os_aes+0x188>)
 800119e:	60d3      	str	r3, [r2, #12]
        }

        while( (signed char)len > 0 ) {
 80011a0:	f000 bc41 	b.w	8001a26 <os_aes+0x96e>
            u4_t a0, a1, a2, a3;
            u4_t t0, t1, t2, t3;
            u4_t *ki, *ke;

            // load input block
            if( (mode & AES_CTR) || ((mode & AES_MIC) && (mode & AES_MICNOAUX)==0) ) { // load CTR block or first MIC block
 80011a4:	79fb      	ldrb	r3, [r7, #7]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d109      	bne.n	80011c2 <os_aes+0x10a>
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d011      	beq.n	80011dc <os_aes+0x124>
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	f003 0308 	and.w	r3, r3, #8
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <os_aes+0x124>
                a0 = AESAUX[0];
 80011c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001240 <os_aes+0x188>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                a1 = AESAUX[1];
 80011c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001240 <os_aes+0x188>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	62bb      	str	r3, [r7, #40]	@ 0x28
                a2 = AESAUX[2];
 80011ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001240 <os_aes+0x188>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
                a3 = AESAUX[3];
 80011d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <os_aes+0x188>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	623b      	str	r3, [r7, #32]
 80011da:	e062      	b.n	80012a2 <os_aes+0x1ea>
            }
            else if( (mode & AES_MIC) && len <= 16 ) { // last MIC block
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	f003 0302 	and.w	r3, r3, #2
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d016      	beq.n	8001214 <os_aes+0x15c>
 80011e6:	88bb      	ldrh	r3, [r7, #4]
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d813      	bhi.n	8001214 <os_aes+0x15c>
                a0 = a1 = a2 = a3 = 0; // load null block
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
 80011f0:	6a3b      	ldr	r3, [r7, #32]
 80011f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80011f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80011f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80011fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                mode |= ((len == 16) ? 1 : 2) << 4; // set MICSUB: CMAC subkey K1 or K2
 80011fc:	88bb      	ldrh	r3, [r7, #4]
 80011fe:	2b10      	cmp	r3, #16
 8001200:	d101      	bne.n	8001206 <os_aes+0x14e>
 8001202:	2210      	movs	r2, #16
 8001204:	e000      	b.n	8001208 <os_aes+0x150>
 8001206:	2220      	movs	r2, #32
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4313      	orrs	r3, r2
 800120e:	b25b      	sxtb	r3, r3
 8001210:	71fb      	strb	r3, [r7, #7]
 8001212:	e046      	b.n	80012a2 <os_aes+0x1ea>
            } else
        LOADDATA: { // load data block (partially)
 8001214:	bf00      	nop
                for(t0=0; t0<16; t0++) {
 8001216:	2300      	movs	r3, #0
 8001218:	61fb      	str	r3, [r7, #28]
 800121a:	e026      	b.n	800126a <os_aes+0x1b2>
                    t1 = (t1<<8) | ((t0<len) ? buf[t0] : (t0==len) ? 0x80 : 0x00);
 800121c:	69bb      	ldr	r3, [r7, #24]
 800121e:	021a      	lsls	r2, r3, #8
 8001220:	88bb      	ldrh	r3, [r7, #4]
 8001222:	69f9      	ldr	r1, [r7, #28]
 8001224:	4299      	cmp	r1, r3
 8001226:	d204      	bcs.n	8001232 <os_aes+0x17a>
 8001228:	6839      	ldr	r1, [r7, #0]
 800122a:	69fb      	ldr	r3, [r7, #28]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	e009      	b.n	8001246 <os_aes+0x18e>
 8001232:	88bb      	ldrh	r3, [r7, #4]
 8001234:	69f9      	ldr	r1, [r7, #28]
 8001236:	4299      	cmp	r1, r3
 8001238:	d104      	bne.n	8001244 <os_aes+0x18c>
 800123a:	2380      	movs	r3, #128	@ 0x80
 800123c:	e003      	b.n	8001246 <os_aes+0x18e>
 800123e:	bf00      	nop
 8001240:	20000144 	.word	0x20000144
 8001244:	2300      	movs	r3, #0
 8001246:	4313      	orrs	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
                    if((t0&3)==3) {
 800124a:	69fb      	ldr	r3, [r7, #28]
 800124c:	f003 0303 	and.w	r3, r3, #3
 8001250:	2b03      	cmp	r3, #3
 8001252:	d107      	bne.n	8001264 <os_aes+0x1ac>
                        a0 = a1;
 8001254:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = a2;
 8001258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800125a:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = a3;
 800125c:	6a3b      	ldr	r3, [r7, #32]
 800125e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = t1;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	623b      	str	r3, [r7, #32]
                for(t0=0; t0<16; t0++) {
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	3301      	adds	r3, #1
 8001268:	61fb      	str	r3, [r7, #28]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d9d5      	bls.n	800121c <os_aes+0x164>
                    }
                } 
                if( mode & AES_MIC ) {
 8001270:	79fb      	ldrb	r3, [r7, #7]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d013      	beq.n	80012a2 <os_aes+0x1ea>
                    a0 ^= AESAUX[0];
 800127a:	4ba0      	ldr	r3, [pc, #640]	@ (80014fc <os_aes+0x444>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001280:	4053      	eors	r3, r2
 8001282:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    a1 ^= AESAUX[1];
 8001284:	4b9d      	ldr	r3, [pc, #628]	@ (80014fc <os_aes+0x444>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800128a:	4053      	eors	r3, r2
 800128c:	62bb      	str	r3, [r7, #40]	@ 0x28
                    a2 ^= AESAUX[2];
 800128e:	4b9b      	ldr	r3, [pc, #620]	@ (80014fc <os_aes+0x444>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001294:	4053      	eors	r3, r2
 8001296:	627b      	str	r3, [r7, #36]	@ 0x24
                    a3 ^= AESAUX[3];
 8001298:	4b98      	ldr	r3, [pc, #608]	@ (80014fc <os_aes+0x444>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	6a3a      	ldr	r2, [r7, #32]
 800129e:	4053      	eors	r3, r2
 80012a0:	623b      	str	r3, [r7, #32]
                }
            }

            // perform AES encryption on block in a0-a3
            ki = AESKEY;
 80012a2:	4b97      	ldr	r3, [pc, #604]	@ (8001500 <os_aes+0x448>)
 80012a4:	617b      	str	r3, [r7, #20]
            ke = ki + 8*4;
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3380      	adds	r3, #128	@ 0x80
 80012aa:	613b      	str	r3, [r7, #16]
            a0 ^= ki[0];
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80012b2:	4053      	eors	r3, r2
 80012b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            a1 ^= ki[1];
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	3304      	adds	r3, #4
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80012be:	4053      	eors	r3, r2
 80012c0:	62bb      	str	r3, [r7, #40]	@ 0x28
            a2 ^= ki[2];
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3308      	adds	r3, #8
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012ca:	4053      	eors	r3, r2
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
            a3 ^= ki[3];
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	330c      	adds	r3, #12
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	6a3a      	ldr	r2, [r7, #32]
 80012d6:	4053      	eors	r3, r2
 80012d8:	623b      	str	r3, [r7, #32]
            do {
                AES_key4 (t1,t2,t3,t0,4);
 80012da:	697b      	ldr	r3, [r7, #20]
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	61bb      	str	r3, [r7, #24]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	61fb      	str	r3, [r7, #28]
                AES_expr4(t1,t2,t3,t0,a0);
 80012f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	461a      	mov	r2, r3
 80012f8:	4b82      	ldr	r3, [pc, #520]	@ (8001504 <os_aes+0x44c>)
 80012fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012fe:	69ba      	ldr	r2, [r7, #24]
 8001300:	4053      	eors	r3, r2
 8001302:	61bb      	str	r3, [r7, #24]
 8001304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	b2db      	uxtb	r3, r3
 800130a:	461a      	mov	r2, r3
 800130c:	4b7e      	ldr	r3, [pc, #504]	@ (8001508 <os_aes+0x450>)
 800130e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	4053      	eors	r3, r2
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800131a:	0c1b      	lsrs	r3, r3, #16
 800131c:	b2db      	uxtb	r3, r3
 800131e:	461a      	mov	r2, r3
 8001320:	4b7a      	ldr	r3, [pc, #488]	@ (800150c <os_aes+0x454>)
 8001322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	4053      	eors	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
 800132c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800132e:	0e1b      	lsrs	r3, r3, #24
 8001330:	4a77      	ldr	r2, [pc, #476]	@ (8001510 <os_aes+0x458>)
 8001332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001336:	69fa      	ldr	r2, [r7, #28]
 8001338:	4053      	eors	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
                AES_expr4(t2,t3,t0,t1,a1);
 800133c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800133e:	b2db      	uxtb	r3, r3
 8001340:	461a      	mov	r2, r3
 8001342:	4b70      	ldr	r3, [pc, #448]	@ (8001504 <os_aes+0x44c>)
 8001344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4053      	eors	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	b2db      	uxtb	r3, r3
 8001354:	461a      	mov	r2, r3
 8001356:	4b6c      	ldr	r3, [pc, #432]	@ (8001508 <os_aes+0x450>)
 8001358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	4053      	eors	r3, r2
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001364:	0c1b      	lsrs	r3, r3, #16
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	4b68      	ldr	r3, [pc, #416]	@ (800150c <os_aes+0x454>)
 800136c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001370:	69fa      	ldr	r2, [r7, #28]
 8001372:	4053      	eors	r3, r2
 8001374:	61fb      	str	r3, [r7, #28]
 8001376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001378:	0e1b      	lsrs	r3, r3, #24
 800137a:	4a65      	ldr	r2, [pc, #404]	@ (8001510 <os_aes+0x458>)
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4053      	eors	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
                AES_expr4(t3,t0,t1,t2,a2);
 8001386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001388:	b2db      	uxtb	r3, r3
 800138a:	461a      	mov	r2, r3
 800138c:	4b5d      	ldr	r3, [pc, #372]	@ (8001504 <os_aes+0x44c>)
 800138e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	4053      	eors	r3, r2
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800139a:	0a1b      	lsrs	r3, r3, #8
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	4b59      	ldr	r3, [pc, #356]	@ (8001508 <os_aes+0x450>)
 80013a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013a6:	69fa      	ldr	r2, [r7, #28]
 80013a8:	4053      	eors	r3, r2
 80013aa:	61fb      	str	r3, [r7, #28]
 80013ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ae:	0c1b      	lsrs	r3, r3, #16
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	461a      	mov	r2, r3
 80013b4:	4b55      	ldr	r3, [pc, #340]	@ (800150c <os_aes+0x454>)
 80013b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013ba:	69ba      	ldr	r2, [r7, #24]
 80013bc:	4053      	eors	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c2:	0e1b      	lsrs	r3, r3, #24
 80013c4:	4a52      	ldr	r2, [pc, #328]	@ (8001510 <os_aes+0x458>)
 80013c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4053      	eors	r3, r2
 80013ce:	60fb      	str	r3, [r7, #12]
                AES_expr4(t0,t1,t2,t3,a3);
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b4b      	ldr	r3, [pc, #300]	@ (8001504 <os_aes+0x44c>)
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	4053      	eors	r3, r2
 80013e0:	61fb      	str	r3, [r7, #28]
 80013e2:	6a3b      	ldr	r3, [r7, #32]
 80013e4:	0a1b      	lsrs	r3, r3, #8
 80013e6:	b2db      	uxtb	r3, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b47      	ldr	r3, [pc, #284]	@ (8001508 <os_aes+0x450>)
 80013ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4053      	eors	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	6a3b      	ldr	r3, [r7, #32]
 80013f8:	0c1b      	lsrs	r3, r3, #16
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b43      	ldr	r3, [pc, #268]	@ (800150c <os_aes+0x454>)
 8001400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001404:	68fa      	ldr	r2, [r7, #12]
 8001406:	4053      	eors	r3, r2
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	0e1b      	lsrs	r3, r3, #24
 800140e:	4a40      	ldr	r2, [pc, #256]	@ (8001510 <os_aes+0x458>)
 8001410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001414:	68ba      	ldr	r2, [r7, #8]
 8001416:	4053      	eors	r3, r2
 8001418:	60bb      	str	r3, [r7, #8]

                AES_key4 (a1,a2,a3,a0,8);
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001424:	627b      	str	r3, [r7, #36]	@ 0x24
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142a:	623b      	str	r3, [r7, #32]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	6a1b      	ldr	r3, [r3, #32]
 8001430:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a1,a2,a3,a0,t0);
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	b2db      	uxtb	r3, r3
 8001436:	461a      	mov	r2, r3
 8001438:	4b32      	ldr	r3, [pc, #200]	@ (8001504 <os_aes+0x44c>)
 800143a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800143e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001440:	4053      	eors	r3, r2
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	0a1b      	lsrs	r3, r3, #8
 8001448:	b2db      	uxtb	r3, r3
 800144a:	461a      	mov	r2, r3
 800144c:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <os_aes+0x450>)
 800144e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001452:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001454:	4053      	eors	r3, r2
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	0c1b      	lsrs	r3, r3, #16
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	4b2a      	ldr	r3, [pc, #168]	@ (800150c <os_aes+0x454>)
 8001462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001466:	6a3a      	ldr	r2, [r7, #32]
 8001468:	4053      	eors	r3, r2
 800146a:	623b      	str	r3, [r7, #32]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	0e1b      	lsrs	r3, r3, #24
 8001470:	4a27      	ldr	r2, [pc, #156]	@ (8001510 <os_aes+0x458>)
 8001472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001476:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001478:	4053      	eors	r3, r2
 800147a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                AES_expr4(a2,a3,a0,a1,t1);
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	b2db      	uxtb	r3, r3
 8001480:	461a      	mov	r2, r3
 8001482:	4b20      	ldr	r3, [pc, #128]	@ (8001504 <os_aes+0x44c>)
 8001484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001488:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800148a:	4053      	eors	r3, r2
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	0a1b      	lsrs	r3, r3, #8
 8001492:	b2db      	uxtb	r3, r3
 8001494:	461a      	mov	r2, r3
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <os_aes+0x450>)
 8001498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800149c:	6a3a      	ldr	r2, [r7, #32]
 800149e:	4053      	eors	r3, r2
 80014a0:	623b      	str	r3, [r7, #32]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	b2db      	uxtb	r3, r3
 80014a8:	461a      	mov	r2, r3
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <os_aes+0x454>)
 80014ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014b2:	4053      	eors	r3, r2
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	0e1b      	lsrs	r3, r3, #24
 80014ba:	4a15      	ldr	r2, [pc, #84]	@ (8001510 <os_aes+0x458>)
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014c2:	4053      	eors	r3, r2
 80014c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                AES_expr4(a3,a0,a1,a2,t2);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	461a      	mov	r2, r3
 80014cc:	4b0d      	ldr	r3, [pc, #52]	@ (8001504 <os_aes+0x44c>)
 80014ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d2:	6a3a      	ldr	r2, [r7, #32]
 80014d4:	4053      	eors	r3, r2
 80014d6:	623b      	str	r3, [r7, #32]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	0a1b      	lsrs	r3, r3, #8
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <os_aes+0x450>)
 80014e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80014e8:	4053      	eors	r3, r2
 80014ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	0c1b      	lsrs	r3, r3, #16
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <os_aes+0x454>)
 80014f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014fa:	e00b      	b.n	8001514 <os_aes+0x45c>
 80014fc:	20000144 	.word	0x20000144
 8001500:	20000154 	.word	0x20000154
 8001504:	080105c4 	.word	0x080105c4
 8001508:	080101c4 	.word	0x080101c4
 800150c:	0800fdc4 	.word	0x0800fdc4
 8001510:	0800f9c4 	.word	0x0800f9c4
 8001514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001516:	4053      	eors	r3, r2
 8001518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	0e1b      	lsrs	r3, r3, #24
 800151e:	4aa1      	ldr	r2, [pc, #644]	@ (80017a4 <os_aes+0x6ec>)
 8001520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001524:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001526:	4053      	eors	r3, r2
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
                AES_expr4(a0,a1,a2,a3,t3);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	b2db      	uxtb	r3, r3
 800152e:	461a      	mov	r2, r3
 8001530:	4b9d      	ldr	r3, [pc, #628]	@ (80017a8 <os_aes+0x6f0>)
 8001532:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001536:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001538:	4053      	eors	r3, r2
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	0a1b      	lsrs	r3, r3, #8
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	4b99      	ldr	r3, [pc, #612]	@ (80017ac <os_aes+0x6f4>)
 8001546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800154a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800154c:	4053      	eors	r3, r2
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	0c1b      	lsrs	r3, r3, #16
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	4b95      	ldr	r3, [pc, #596]	@ (80017b0 <os_aes+0x6f8>)
 800155a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001560:	4053      	eors	r3, r2
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	0e1b      	lsrs	r3, r3, #24
 8001568:	4a8e      	ldr	r2, [pc, #568]	@ (80017a4 <os_aes+0x6ec>)
 800156a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800156e:	6a3a      	ldr	r2, [r7, #32]
 8001570:	4053      	eors	r3, r2
 8001572:	623b      	str	r3, [r7, #32]
            } while( (ki+=8) < ke );
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	3320      	adds	r3, #32
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	429a      	cmp	r2, r3
 8001580:	f4ff aeab 	bcc.w	80012da <os_aes+0x222>

            AES_key4 (t1,t2,t3,t0,4);
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	695b      	ldr	r3, [r3, #20]
 8001588:	61bb      	str	r3, [r7, #24]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	69db      	ldr	r3, [r3, #28]
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	61fb      	str	r3, [r7, #28]
            AES_expr4(t1,t2,t3,t0,a0);
 800159c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b81      	ldr	r3, [pc, #516]	@ (80017a8 <os_aes+0x6f0>)
 80015a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	4053      	eors	r3, r2
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015b0:	0a1b      	lsrs	r3, r3, #8
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	4b7d      	ldr	r3, [pc, #500]	@ (80017ac <os_aes+0x6f4>)
 80015b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015bc:	68fa      	ldr	r2, [r7, #12]
 80015be:	4053      	eors	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015c4:	0c1b      	lsrs	r3, r3, #16
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b79      	ldr	r3, [pc, #484]	@ (80017b0 <os_aes+0x6f8>)
 80015cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	4053      	eors	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80015d8:	0e1b      	lsrs	r3, r3, #24
 80015da:	4a72      	ldr	r2, [pc, #456]	@ (80017a4 <os_aes+0x6ec>)
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	69fa      	ldr	r2, [r7, #28]
 80015e2:	4053      	eors	r3, r2
 80015e4:	61fb      	str	r3, [r7, #28]
            AES_expr4(t2,t3,t0,t1,a1);
 80015e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	4b6e      	ldr	r3, [pc, #440]	@ (80017a8 <os_aes+0x6f0>)
 80015ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	4053      	eors	r3, r2
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015fa:	0a1b      	lsrs	r3, r3, #8
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	461a      	mov	r2, r3
 8001600:	4b6a      	ldr	r3, [pc, #424]	@ (80017ac <os_aes+0x6f4>)
 8001602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001606:	68ba      	ldr	r2, [r7, #8]
 8001608:	4053      	eors	r3, r2
 800160a:	60bb      	str	r3, [r7, #8]
 800160c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800160e:	0c1b      	lsrs	r3, r3, #16
 8001610:	b2db      	uxtb	r3, r3
 8001612:	461a      	mov	r2, r3
 8001614:	4b66      	ldr	r3, [pc, #408]	@ (80017b0 <os_aes+0x6f8>)
 8001616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	4053      	eors	r3, r2
 800161e:	61fb      	str	r3, [r7, #28]
 8001620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001622:	0e1b      	lsrs	r3, r3, #24
 8001624:	4a5f      	ldr	r2, [pc, #380]	@ (80017a4 <os_aes+0x6ec>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4053      	eors	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
            AES_expr4(t3,t0,t1,t2,a2);
 8001630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001632:	b2db      	uxtb	r3, r3
 8001634:	461a      	mov	r2, r3
 8001636:	4b5c      	ldr	r3, [pc, #368]	@ (80017a8 <os_aes+0x6f0>)
 8001638:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800163c:	68ba      	ldr	r2, [r7, #8]
 800163e:	4053      	eors	r3, r2
 8001640:	60bb      	str	r3, [r7, #8]
 8001642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001644:	0a1b      	lsrs	r3, r3, #8
 8001646:	b2db      	uxtb	r3, r3
 8001648:	461a      	mov	r2, r3
 800164a:	4b58      	ldr	r3, [pc, #352]	@ (80017ac <os_aes+0x6f4>)
 800164c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001650:	69fa      	ldr	r2, [r7, #28]
 8001652:	4053      	eors	r3, r2
 8001654:	61fb      	str	r3, [r7, #28]
 8001656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001658:	0c1b      	lsrs	r3, r3, #16
 800165a:	b2db      	uxtb	r3, r3
 800165c:	461a      	mov	r2, r3
 800165e:	4b54      	ldr	r3, [pc, #336]	@ (80017b0 <os_aes+0x6f8>)
 8001660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4053      	eors	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	0e1b      	lsrs	r3, r3, #24
 800166e:	4a4d      	ldr	r2, [pc, #308]	@ (80017a4 <os_aes+0x6ec>)
 8001670:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4053      	eors	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
            AES_expr4(t0,t1,t2,t3,a3);
 800167a:	6a3b      	ldr	r3, [r7, #32]
 800167c:	b2db      	uxtb	r3, r3
 800167e:	461a      	mov	r2, r3
 8001680:	4b49      	ldr	r3, [pc, #292]	@ (80017a8 <os_aes+0x6f0>)
 8001682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4053      	eors	r3, r2
 800168a:	61fb      	str	r3, [r7, #28]
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	0a1b      	lsrs	r3, r3, #8
 8001690:	b2db      	uxtb	r3, r3
 8001692:	461a      	mov	r2, r3
 8001694:	4b45      	ldr	r3, [pc, #276]	@ (80017ac <os_aes+0x6f4>)
 8001696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800169a:	69ba      	ldr	r2, [r7, #24]
 800169c:	4053      	eors	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]
 80016a0:	6a3b      	ldr	r3, [r7, #32]
 80016a2:	0c1b      	lsrs	r3, r3, #16
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b41      	ldr	r3, [pc, #260]	@ (80017b0 <os_aes+0x6f8>)
 80016aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4053      	eors	r3, r2
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	0e1b      	lsrs	r3, r3, #24
 80016b8:	4a3a      	ldr	r2, [pc, #232]	@ (80017a4 <os_aes+0x6ec>)
 80016ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	4053      	eors	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]

            AES_expr(a0,t0,t1,t2,t3,8);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ca:	69fb      	ldr	r3, [r7, #28]
 80016cc:	0e1b      	lsrs	r3, r3, #24
 80016ce:	4a39      	ldr	r2, [pc, #228]	@ (80017b4 <os_aes+0x6fc>)
 80016d0:	5cd3      	ldrb	r3, [r2, r3]
 80016d2:	061b      	lsls	r3, r3, #24
 80016d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016d6:	4053      	eors	r3, r2
 80016d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	0c1b      	lsrs	r3, r3, #16
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	461a      	mov	r2, r3
 80016e2:	4b34      	ldr	r3, [pc, #208]	@ (80017b4 <os_aes+0x6fc>)
 80016e4:	5c9b      	ldrb	r3, [r3, r2]
 80016e6:	041b      	lsls	r3, r3, #16
 80016e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016ea:	4053      	eors	r3, r2
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	0a1b      	lsrs	r3, r3, #8
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b2f      	ldr	r3, [pc, #188]	@ (80017b4 <os_aes+0x6fc>)
 80016f8:	5c9b      	ldrb	r3, [r3, r2]
 80016fa:	021b      	lsls	r3, r3, #8
 80016fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016fe:	4053      	eors	r3, r2
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	b2db      	uxtb	r3, r3
 8001706:	461a      	mov	r2, r3
 8001708:	4b2a      	ldr	r3, [pc, #168]	@ (80017b4 <os_aes+0x6fc>)
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	461a      	mov	r2, r3
 800170e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001710:	4053      	eors	r3, r2
 8001712:	62fb      	str	r3, [r7, #44]	@ 0x2c
            AES_expr(a1,t1,t2,t3,t0,9);
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	0e1b      	lsrs	r3, r3, #24
 800171e:	4a25      	ldr	r2, [pc, #148]	@ (80017b4 <os_aes+0x6fc>)
 8001720:	5cd3      	ldrb	r3, [r2, r3]
 8001722:	061b      	lsls	r3, r3, #24
 8001724:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001726:	4053      	eors	r3, r2
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	b2db      	uxtb	r3, r3
 8001730:	461a      	mov	r2, r3
 8001732:	4b20      	ldr	r3, [pc, #128]	@ (80017b4 <os_aes+0x6fc>)
 8001734:	5c9b      	ldrb	r3, [r3, r2]
 8001736:	041b      	lsls	r3, r3, #16
 8001738:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800173a:	4053      	eors	r3, r2
 800173c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	4b1b      	ldr	r3, [pc, #108]	@ (80017b4 <os_aes+0x6fc>)
 8001748:	5c9b      	ldrb	r3, [r3, r2]
 800174a:	021b      	lsls	r3, r3, #8
 800174c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800174e:	4053      	eors	r3, r2
 8001750:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	b2db      	uxtb	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	4b16      	ldr	r3, [pc, #88]	@ (80017b4 <os_aes+0x6fc>)
 800175a:	5c9b      	ldrb	r3, [r3, r2]
 800175c:	461a      	mov	r2, r3
 800175e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001760:	4053      	eors	r3, r2
 8001762:	62bb      	str	r3, [r7, #40]	@ 0x28
            AES_expr(a2,t2,t3,t0,t1,10);
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	0e1b      	lsrs	r3, r3, #24
 800176e:	4a11      	ldr	r2, [pc, #68]	@ (80017b4 <os_aes+0x6fc>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	061b      	lsls	r3, r3, #24
 8001774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001776:	4053      	eors	r3, r2
 8001778:	627b      	str	r3, [r7, #36]	@ 0x24
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	0c1b      	lsrs	r3, r3, #16
 800177e:	b2db      	uxtb	r3, r3
 8001780:	461a      	mov	r2, r3
 8001782:	4b0c      	ldr	r3, [pc, #48]	@ (80017b4 <os_aes+0x6fc>)
 8001784:	5c9b      	ldrb	r3, [r3, r2]
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800178a:	4053      	eors	r3, r2
 800178c:	627b      	str	r3, [r7, #36]	@ 0x24
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	0a1b      	lsrs	r3, r3, #8
 8001792:	b2db      	uxtb	r3, r3
 8001794:	461a      	mov	r2, r3
 8001796:	4b07      	ldr	r3, [pc, #28]	@ (80017b4 <os_aes+0x6fc>)
 8001798:	5c9b      	ldrb	r3, [r3, r2]
 800179a:	021b      	lsls	r3, r3, #8
 800179c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800179e:	4053      	eors	r3, r2
 80017a0:	e00a      	b.n	80017b8 <os_aes+0x700>
 80017a2:	bf00      	nop
 80017a4:	0800f9c4 	.word	0x0800f9c4
 80017a8:	080105c4 	.word	0x080105c4
 80017ac:	080101c4 	.word	0x080101c4
 80017b0:	0800fdc4 	.word	0x0800fdc4
 80017b4:	0800f8c4 	.word	0x0800f8c4
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	4b5f      	ldr	r3, [pc, #380]	@ (8001940 <os_aes+0x888>)
 80017c2:	5c9b      	ldrb	r3, [r3, r2]
 80017c4:	461a      	mov	r2, r3
 80017c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017c8:	4053      	eors	r3, r2
 80017ca:	627b      	str	r3, [r7, #36]	@ 0x24
            AES_expr(a3,t3,t0,t1,t2,11);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d0:	623b      	str	r3, [r7, #32]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	0e1b      	lsrs	r3, r3, #24
 80017d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001940 <os_aes+0x888>)
 80017d8:	5cd3      	ldrb	r3, [r2, r3]
 80017da:	061b      	lsls	r3, r3, #24
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	4053      	eors	r3, r2
 80017e0:	623b      	str	r3, [r7, #32]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b55      	ldr	r3, [pc, #340]	@ (8001940 <os_aes+0x888>)
 80017ec:	5c9b      	ldrb	r3, [r3, r2]
 80017ee:	041b      	lsls	r3, r3, #16
 80017f0:	6a3a      	ldr	r2, [r7, #32]
 80017f2:	4053      	eors	r3, r2
 80017f4:	623b      	str	r3, [r7, #32]
 80017f6:	69bb      	ldr	r3, [r7, #24]
 80017f8:	0a1b      	lsrs	r3, r3, #8
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b50      	ldr	r3, [pc, #320]	@ (8001940 <os_aes+0x888>)
 8001800:	5c9b      	ldrb	r3, [r3, r2]
 8001802:	021b      	lsls	r3, r3, #8
 8001804:	6a3a      	ldr	r2, [r7, #32]
 8001806:	4053      	eors	r3, r2
 8001808:	623b      	str	r3, [r7, #32]
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	b2db      	uxtb	r3, r3
 800180e:	461a      	mov	r2, r3
 8001810:	4b4b      	ldr	r3, [pc, #300]	@ (8001940 <os_aes+0x888>)
 8001812:	5c9b      	ldrb	r3, [r3, r2]
 8001814:	461a      	mov	r2, r3
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	4053      	eors	r3, r2
 800181a:	623b      	str	r3, [r7, #32]
            // result of AES encryption in a0-a3

            if( mode & AES_MIC ) {
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d056      	beq.n	80018d4 <os_aes+0x81c>
                if( (t1 = (mode & AES_MICSUB) >> 4) != 0 ) { // last block
 8001826:	79fb      	ldrb	r3, [r7, #7]
 8001828:	111b      	asrs	r3, r3, #4
 800182a:	f003 0303 	and.w	r3, r3, #3
 800182e:	61bb      	str	r3, [r7, #24]
 8001830:	69bb      	ldr	r3, [r7, #24]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d041      	beq.n	80018ba <os_aes+0x802>
                    do {
                        // compute CMAC subkey K1 and K2
                        t0 = a0 >> 31; // save MSB
 8001836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001838:	0fdb      	lsrs	r3, r3, #31
 800183a:	61fb      	str	r3, [r7, #28]
                        a0 = (a0 << 1) | (a1 >> 31);
 800183c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800183e:	005a      	lsls	r2, r3, #1
 8001840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001842:	0fdb      	lsrs	r3, r3, #31
 8001844:	4313      	orrs	r3, r2
 8001846:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        a1 = (a1 << 1) | (a2 >> 31);
 8001848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800184a:	005a      	lsls	r2, r3, #1
 800184c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184e:	0fdb      	lsrs	r3, r3, #31
 8001850:	4313      	orrs	r3, r2
 8001852:	62bb      	str	r3, [r7, #40]	@ 0x28
                        a2 = (a2 << 1) | (a3 >> 31);
 8001854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001856:	005a      	lsls	r2, r3, #1
 8001858:	6a3b      	ldr	r3, [r7, #32]
 800185a:	0fdb      	lsrs	r3, r3, #31
 800185c:	4313      	orrs	r3, r2
 800185e:	627b      	str	r3, [r7, #36]	@ 0x24
                        a3 = (a3 << 1);
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	623b      	str	r3, [r7, #32]
                        if( t0 ) a3 ^= 0x87;
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <os_aes+0x7bc>
 800186c:	6a3b      	ldr	r3, [r7, #32]
 800186e:	f083 0387 	eor.w	r3, r3, #135	@ 0x87
 8001872:	623b      	str	r3, [r7, #32]
                    } while( --t1 );
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	3b01      	subs	r3, #1
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	69bb      	ldr	r3, [r7, #24]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1da      	bne.n	8001836 <os_aes+0x77e>

                    AESAUX[0] ^= a0;
 8001880:	4b30      	ldr	r3, [pc, #192]	@ (8001944 <os_aes+0x88c>)
 8001882:	681a      	ldr	r2, [r3, #0]
 8001884:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001886:	4053      	eors	r3, r2
 8001888:	4a2e      	ldr	r2, [pc, #184]	@ (8001944 <os_aes+0x88c>)
 800188a:	6013      	str	r3, [r2, #0]
                    AESAUX[1] ^= a1;
 800188c:	4b2d      	ldr	r3, [pc, #180]	@ (8001944 <os_aes+0x88c>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001892:	4053      	eors	r3, r2
 8001894:	4a2b      	ldr	r2, [pc, #172]	@ (8001944 <os_aes+0x88c>)
 8001896:	6053      	str	r3, [r2, #4]
                    AESAUX[2] ^= a2;
 8001898:	4b2a      	ldr	r3, [pc, #168]	@ (8001944 <os_aes+0x88c>)
 800189a:	689a      	ldr	r2, [r3, #8]
 800189c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800189e:	4053      	eors	r3, r2
 80018a0:	4a28      	ldr	r2, [pc, #160]	@ (8001944 <os_aes+0x88c>)
 80018a2:	6093      	str	r3, [r2, #8]
                    AESAUX[3] ^= a3;
 80018a4:	4b27      	ldr	r3, [pc, #156]	@ (8001944 <os_aes+0x88c>)
 80018a6:	68da      	ldr	r2, [r3, #12]
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	4053      	eors	r3, r2
 80018ac:	4a25      	ldr	r2, [pc, #148]	@ (8001944 <os_aes+0x88c>)
 80018ae:	60d3      	str	r3, [r2, #12]
                    mode &= ~AES_MICSUB;
 80018b0:	79fb      	ldrb	r3, [r7, #7]
 80018b2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80018b6:	71fb      	strb	r3, [r7, #7]
                    goto LOADDATA;
 80018b8:	e4ad      	b.n	8001216 <os_aes+0x15e>
                } else {
                    // save cipher block as new iv
                    AESAUX[0] = a0;
 80018ba:	4a22      	ldr	r2, [pc, #136]	@ (8001944 <os_aes+0x88c>)
 80018bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018be:	6013      	str	r3, [r2, #0]
                    AESAUX[1] = a1;
 80018c0:	4a20      	ldr	r2, [pc, #128]	@ (8001944 <os_aes+0x88c>)
 80018c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018c4:	6053      	str	r3, [r2, #4]
                    AESAUX[2] = a2;
 80018c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001944 <os_aes+0x88c>)
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	6093      	str	r3, [r2, #8]
                    AESAUX[3] = a3;
 80018cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001944 <os_aes+0x88c>)
 80018ce:	6a3b      	ldr	r3, [r7, #32]
 80018d0:	60d3      	str	r3, [r2, #12]
 80018d2:	e094      	b.n	80019fe <os_aes+0x946>
                }
            } else { // CIPHER
                if( mode & AES_CTR ) { // xor block (partially)
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d034      	beq.n	8001948 <os_aes+0x890>
                    t0 = (len > 16) ? 16: len;
 80018de:	88bb      	ldrh	r3, [r7, #4]
 80018e0:	2b10      	cmp	r3, #16
 80018e2:	bf28      	it	cs
 80018e4:	2310      	movcs	r3, #16
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	61fb      	str	r3, [r7, #28]
                    for(t1=0; t1<t0; t1++) {
 80018ea:	2300      	movs	r3, #0
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	e01d      	b.n	800192c <os_aes+0x874>
                        buf[t1] ^= (a0>>24);
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	4413      	add	r3, r2
 80018f6:	7819      	ldrb	r1, [r3, #0]
 80018f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80018fa:	0e1b      	lsrs	r3, r3, #24
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	6838      	ldr	r0, [r7, #0]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	4403      	add	r3, r0
 8001904:	404a      	eors	r2, r1
 8001906:	b2d2      	uxtb	r2, r2
 8001908:	701a      	strb	r2, [r3, #0]
                        a0 <<= 8;
 800190a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800190c:	021b      	lsls	r3, r3, #8
 800190e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if((t1&3)==3) {
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	f003 0303 	and.w	r3, r3, #3
 8001916:	2b03      	cmp	r3, #3
 8001918:	d105      	bne.n	8001926 <os_aes+0x86e>
                            a0 = a1;
 800191a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800191c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                            a1 = a2;
 800191e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001920:	62bb      	str	r3, [r7, #40]	@ 0x28
                            a2 = a3;
 8001922:	6a3b      	ldr	r3, [r7, #32]
 8001924:	627b      	str	r3, [r7, #36]	@ 0x24
                    for(t1=0; t1<t0; t1++) {
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	3301      	adds	r3, #1
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	429a      	cmp	r2, r3
 8001932:	d3dd      	bcc.n	80018f0 <os_aes+0x838>
                        }
                    }
                    // update counter
                    AESAUX[3]++;
 8001934:	4b03      	ldr	r3, [pc, #12]	@ (8001944 <os_aes+0x88c>)
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	3301      	adds	r3, #1
 800193a:	4a02      	ldr	r2, [pc, #8]	@ (8001944 <os_aes+0x88c>)
 800193c:	60d3      	str	r3, [r2, #12]
 800193e:	e05e      	b.n	80019fe <os_aes+0x946>
 8001940:	0800f8c4 	.word	0x0800f8c4
 8001944:	20000144 	.word	0x20000144
                } else { // ECB
                    // store block
                    msbf4_write(buf+0,  a0);
 8001948:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800194a:	0e1b      	lsrs	r3, r3, #24
 800194c:	b2da      	uxtb	r2, r3
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	701a      	strb	r2, [r3, #0]
 8001952:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001954:	0c1a      	lsrs	r2, r3, #16
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	3301      	adds	r3, #1
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	701a      	strb	r2, [r3, #0]
 800195e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001960:	0a1a      	lsrs	r2, r3, #8
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	3302      	adds	r3, #2
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	701a      	strb	r2, [r3, #0]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3303      	adds	r3, #3
 800196e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001970:	b2d2      	uxtb	r2, r2
 8001972:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+4,  a1);
 8001974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001976:	0e1a      	lsrs	r2, r3, #24
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	3304      	adds	r3, #4
 800197c:	b2d2      	uxtb	r2, r2
 800197e:	701a      	strb	r2, [r3, #0]
 8001980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001982:	0c1a      	lsrs	r2, r3, #16
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	3305      	adds	r3, #5
 8001988:	b2d2      	uxtb	r2, r2
 800198a:	701a      	strb	r2, [r3, #0]
 800198c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800198e:	0a1a      	lsrs	r2, r3, #8
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	3306      	adds	r3, #6
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	701a      	strb	r2, [r3, #0]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3307      	adds	r3, #7
 800199c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800199e:	b2d2      	uxtb	r2, r2
 80019a0:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+8,  a2);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	0e1a      	lsrs	r2, r3, #24
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	3308      	adds	r3, #8
 80019aa:	b2d2      	uxtb	r2, r2
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019b0:	0c1a      	lsrs	r2, r3, #16
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	3309      	adds	r3, #9
 80019b6:	b2d2      	uxtb	r2, r2
 80019b8:	701a      	strb	r2, [r3, #0]
 80019ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019bc:	0a1a      	lsrs	r2, r3, #8
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	330a      	adds	r3, #10
 80019c2:	b2d2      	uxtb	r2, r2
 80019c4:	701a      	strb	r2, [r3, #0]
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	330b      	adds	r3, #11
 80019ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019cc:	b2d2      	uxtb	r2, r2
 80019ce:	701a      	strb	r2, [r3, #0]
                    msbf4_write(buf+12, a3);
 80019d0:	6a3b      	ldr	r3, [r7, #32]
 80019d2:	0e1a      	lsrs	r2, r3, #24
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	330c      	adds	r3, #12
 80019d8:	b2d2      	uxtb	r2, r2
 80019da:	701a      	strb	r2, [r3, #0]
 80019dc:	6a3b      	ldr	r3, [r7, #32]
 80019de:	0c1a      	lsrs	r2, r3, #16
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	330d      	adds	r3, #13
 80019e4:	b2d2      	uxtb	r2, r2
 80019e6:	701a      	strb	r2, [r3, #0]
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	0a1a      	lsrs	r2, r3, #8
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	330e      	adds	r3, #14
 80019f0:	b2d2      	uxtb	r2, r2
 80019f2:	701a      	strb	r2, [r3, #0]
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	330f      	adds	r3, #15
 80019f8:	6a3a      	ldr	r2, [r7, #32]
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
                }
            }

            // update block state
            if( (mode & AES_MIC)==0 || (mode & AES_MICNOAUX) ) {
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 0302 	and.w	r3, r3, #2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d004      	beq.n	8001a12 <os_aes+0x95a>
 8001a08:	79fb      	ldrb	r3, [r7, #7]
 8001a0a:	f003 0308 	and.w	r3, r3, #8
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d005      	beq.n	8001a1e <os_aes+0x966>
                buf += 16;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	3310      	adds	r3, #16
 8001a16:	603b      	str	r3, [r7, #0]
                len -= 16;
 8001a18:	88bb      	ldrh	r3, [r7, #4]
 8001a1a:	3b10      	subs	r3, #16
 8001a1c:	80bb      	strh	r3, [r7, #4]
            }
            mode |= AES_MICNOAUX;
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f043 0308 	orr.w	r3, r3, #8
 8001a24:	71fb      	strb	r3, [r7, #7]
        while( (signed char)len > 0 ) {
 8001a26:	88bb      	ldrh	r3, [r7, #4]
 8001a28:	b25b      	sxtb	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	f73f abba 	bgt.w	80011a4 <os_aes+0xec>
        }
        return AESAUX[0];
 8001a30:	4b02      	ldr	r3, [pc, #8]	@ (8001a3c <os_aes+0x984>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3730      	adds	r7, #48	@ 0x30
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	20000144 	.word	0x20000144

08001a40 <cayenne_lpp_reset>:
#include <string.h>

#include "cayenne_lpp.h"

void cayenne_lpp_reset(cayenne_lpp_t *lpp)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b082      	sub	sp, #8
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
    memset(lpp->buffer, 0, CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	222a      	movs	r2, #42	@ 0x2a
 8001a4c:	2100      	movs	r1, #0
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f00c fd29 	bl	800e4a6 <memset>
    lpp->cursor = 0;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
}
 8001a5c:	bf00      	nop
 8001a5e:	3708      	adds	r7, #8
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}

08001a64 <cayenne_lpp_add_temperature>:
    lpp->buffer[lpp->cursor++] = value;
}

void cayenne_lpp_add_temperature(cayenne_lpp_t *lpp, uint8_t channel,
                                 float celsius)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001a72:	72fb      	strb	r3, [r7, #11]
    assert((lpp->cursor + CAYENNE_LPP_TEMPERATURE_SIZE) < CAYENNE_LPP_MAX_BUFFER_SIZE);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001a7a:	3304      	adds	r3, #4
 8001a7c:	2b29      	cmp	r3, #41	@ 0x29
 8001a7e:	d905      	bls.n	8001a8c <cayenne_lpp_add_temperature+0x28>
 8001a80:	4b24      	ldr	r3, [pc, #144]	@ (8001b14 <cayenne_lpp_add_temperature+0xb0>)
 8001a82:	4a25      	ldr	r2, [pc, #148]	@ (8001b18 <cayenne_lpp_add_temperature+0xb4>)
 8001a84:	215f      	movs	r1, #95	@ 0x5f
 8001a86:	4825      	ldr	r0, [pc, #148]	@ (8001b1c <cayenne_lpp_add_temperature+0xb8>)
 8001a88:	f00c fbd8 	bl	800e23c <__assert_func>

    int16_t val = celsius * 10;
 8001a8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a90:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9c:	ee17 3a90 	vmov	r3, s15
 8001aa0:	82fb      	strh	r3, [r7, #22]
    lpp->buffer[lpp->cursor++] = channel;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001aa8:	1c5a      	adds	r2, r3, #1
 8001aaa:	b2d1      	uxtb	r1, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	7afa      	ldrb	r2, [r7, #11]
 8001ab8:	545a      	strb	r2, [r3, r1]
    lpp->buffer[lpp->cursor++] = CAYENNE_LPP_TEMPERATURE;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ac0:	1c5a      	adds	r2, r3, #1
 8001ac2:	b2d1      	uxtb	r1, r2
 8001ac4:	68fa      	ldr	r2, [r7, #12]
 8001ac6:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001aca:	461a      	mov	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2167      	movs	r1, #103	@ 0x67
 8001ad0:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val >> 8;
 8001ad2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001ad6:	121b      	asrs	r3, r3, #8
 8001ad8:	b219      	sxth	r1, r3
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	b2d0      	uxtb	r0, r2
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	f882 002a 	strb.w	r0, [r2, #42]	@ 0x2a
 8001aea:	461a      	mov	r2, r3
 8001aec:	b2c9      	uxtb	r1, r1
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	5499      	strb	r1, [r3, r2]
    lpp->buffer[lpp->cursor++] = val;
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001af8:	1c5a      	adds	r2, r3, #1
 8001afa:	b2d1      	uxtb	r1, r2
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	f882 102a 	strb.w	r1, [r2, #42]	@ 0x2a
 8001b02:	461a      	mov	r2, r3
 8001b04:	8afb      	ldrh	r3, [r7, #22]
 8001b06:	b2d9      	uxtb	r1, r3
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	5499      	strb	r1, [r3, r2]
}
 8001b0c:	bf00      	nop
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	0800f38c 	.word	0x0800f38c
 8001b18:	080109c4 	.word	0x080109c4
 8001b1c:	0800f1f0 	.word	0x0800f1f0

08001b20 <getBuffer>:
    lpp->buffer[lpp->cursor++] = alt >> 8;
    lpp->buffer[lpp->cursor++] = alt;
}

uint8_t* getBuffer(cayenne_lpp_t *lpp)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
	return lpp->buffer;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
	...

08001b38 <debug_init>:

/*  ************************************** */
/*    DO NOT CHANGE BELOW THIS LINE        */
/*  ************************************** */

void debug_init () {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
//    debug_led(0);

    // configure USART1 (115200/8N1, tx-only)

    // print banner
    debug_str("\r\n============== DEBUG STARTED ==============\r\n");
 8001b3c:	4802      	ldr	r0, [pc, #8]	@ (8001b48 <debug_init+0x10>)
 8001b3e:	f000 f868 	bl	8001c12 <debug_str>
}
 8001b42:	bf00      	nop
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	0800f560 	.word	0x0800f560

08001b4c <debug_led>:

void debug_led (int val) {
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,val);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	b2db      	uxtb	r3, r3
 8001b58:	461a      	mov	r2, r3
 8001b5a:	2102      	movs	r1, #2
 8001b5c:	4803      	ldr	r0, [pc, #12]	@ (8001b6c <debug_led+0x20>)
 8001b5e:	f008 fe93 	bl	800a888 <HAL_GPIO_WritePin>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	48000400 	.word	0x48000400

08001b70 <debug_char>:

void debug_char (char c) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	71fb      	strb	r3, [r7, #7]
  char buffer[] = "";
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	733b      	strb	r3, [r7, #12]
  buffer[0]= c;
 8001b7e:	79fb      	ldrb	r3, [r7, #7]
 8001b80:	733b      	strb	r3, [r7, #12]
  HAL_UART_Transmit(&myUART,buffer,sizeof(buffer),HAL_MAX_DELAY);
 8001b82:	f107 010c 	add.w	r1, r7, #12
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4803      	ldr	r0, [pc, #12]	@ (8001b9c <debug_char+0x2c>)
 8001b8e:	f00b fe83 	bl	800d898 <HAL_UART_Transmit>
}
 8001b92:	bf00      	nop
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	20000530 	.word	0x20000530

08001ba0 <debug_hex>:

void debug_hex (u1_t b) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
    debug_char("0123456789ABCDEF"[b>>4]);
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	091b      	lsrs	r3, r3, #4
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4b08      	ldr	r3, [pc, #32]	@ (8001bd4 <debug_hex+0x34>)
 8001bb4:	5c9b      	ldrb	r3, [r3, r2]
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff ffda 	bl	8001b70 <debug_char>
    debug_char("0123456789ABCDEF"[b&0xF]);
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	f003 030f 	and.w	r3, r3, #15
 8001bc2:	4a04      	ldr	r2, [pc, #16]	@ (8001bd4 <debug_hex+0x34>)
 8001bc4:	5cd3      	ldrb	r3, [r2, r3]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff ffd2 	bl	8001b70 <debug_char>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	0800f590 	.word	0x0800f590

08001bd8 <debug_uint>:
    }
    debug_char('\r');
    debug_char('\n');
}

void debug_uint (u4_t v) {
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
    for(s1_t n=24; n>=0; n-=8) {
 8001be0:	2318      	movs	r3, #24
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e00c      	b.n	8001c00 <debug_uint+0x28>
        debug_hex(v>>n);
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	fa22 f303 	lsr.w	r3, r2, r3
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff ffd4 	bl	8001ba0 <debug_hex>
    for(s1_t n=24; n>=0; n-=8) {
 8001bf8:	7bfb      	ldrb	r3, [r7, #15]
 8001bfa:	3b08      	subs	r3, #8
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	73fb      	strb	r3, [r7, #15]
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	daee      	bge.n	8001be6 <debug_uint+0xe>
    }
}
 8001c08:	bf00      	nop
 8001c0a:	bf00      	nop
 8001c0c:	3710      	adds	r7, #16
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}

08001c12 <debug_str>:
    int n = debug_fmt(buf, sizeof(buf), v, 10, 0, 0);
    while(n--)
        debug_char(*p++);
}

void debug_str (const char* str) {
 8001c12:	b580      	push	{r7, lr}
 8001c14:	b082      	sub	sp, #8
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
    while(*str) {
 8001c1a:	e006      	b.n	8001c2a <debug_str+0x18>
        debug_char(*str++);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	1c5a      	adds	r2, r3, #1
 8001c20:	607a      	str	r2, [r7, #4]
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff ffa3 	bl	8001b70 <debug_char>
    while(*str) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f4      	bne.n	8001c1c <debug_str+0xa>
    }
}
 8001c32:	bf00      	nop
 8001c34:	bf00      	nop
 8001c36:	3708      	adds	r7, #8
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <debug_val>:

void debug_val (const char* label, u4_t val) {
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
    debug_str(label);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f7ff ffe3 	bl	8001c12 <debug_str>
    debug_uint(val);
 8001c4c:	6838      	ldr	r0, [r7, #0]
 8001c4e:	f7ff ffc3 	bl	8001bd8 <debug_uint>
    debug_char('\r');
 8001c52:	200d      	movs	r0, #13
 8001c54:	f7ff ff8c 	bl	8001b70 <debug_char>
    debug_char('\n');
 8001c58:	200a      	movs	r0, #10
 8001c5a:	f7ff ff89 	bl	8001b70 <debug_char>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
	...

08001c68 <debug_event>:
    while( b-buf < max && p > num );
    // return number of characters written
    return b - buf;
}

void debug_event (int ev) {
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
        [EV_LINK_DEAD]      = "LINK_DEAD",
        [EV_LINK_ALIVE]     = "LINK_ALIVE",
        [EV_SCAN_FOUND]     = "SCAN_FOUND",
        [EV_TXSTART]        = "EV_TXSTART",
    };
    debug_str((ev < sizeof(evnames)/sizeof(evnames[0])) ? evnames[ev] : "EV_UNKNOWN" );
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b11      	cmp	r3, #17
 8001c74:	d804      	bhi.n	8001c80 <debug_event+0x18>
 8001c76:	4a09      	ldr	r2, [pc, #36]	@ (8001c9c <debug_event+0x34>)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7e:	e000      	b.n	8001c82 <debug_event+0x1a>
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <debug_event+0x38>)
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ffc5 	bl	8001c12 <debug_str>
    debug_char('\r');
 8001c88:	200d      	movs	r0, #13
 8001c8a:	f7ff ff71 	bl	8001b70 <debug_char>
    debug_char('\n');
 8001c8e:	200a      	movs	r0, #10
 8001c90:	f7ff ff6e 	bl	8001b70 <debug_char>
}
 8001c94:	bf00      	nop
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	20000000 	.word	0x20000000
 8001ca0:	0800f5a4 	.word	0x0800f5a4

08001ca4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cba:	4b33      	ldr	r3, [pc, #204]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cbe:	4a32      	ldr	r2, [pc, #200]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cc0:	f043 0304 	orr.w	r3, r3, #4
 8001cc4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cc6:	4b30      	ldr	r3, [pc, #192]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cca:	f003 0304 	and.w	r3, r3, #4
 8001cce:	60bb      	str	r3, [r7, #8]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cde:	4b2a      	ldr	r3, [pc, #168]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cea:	4b27      	ldr	r3, [pc, #156]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cee:	4a26      	ldr	r2, [pc, #152]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cf0:	f043 0302 	orr.w	r3, r3, #2
 8001cf4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cf6:	4b24      	ldr	r3, [pc, #144]	@ (8001d88 <MX_GPIO_Init+0xe4>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	603b      	str	r3, [r7, #0]
 8001d00:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2102      	movs	r1, #2
 8001d06:	4821      	ldr	r0, [pc, #132]	@ (8001d8c <MX_GPIO_Init+0xe8>)
 8001d08:	f008 fdbe 	bl	800a888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RST_Pin|NSS_Pin, GPIO_PIN_RESET);
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f44f 4108 	mov.w	r1, #34816	@ 0x8800
 8001d12:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d16:	f008 fdb7 	bl	800a888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d26:	2300      	movs	r3, #0
 8001d28:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001d2a:	f107 030c 	add.w	r3, r7, #12
 8001d2e:	4619      	mov	r1, r3
 8001d30:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <MX_GPIO_Init+0xe8>)
 8001d32:	f008 fc3f 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = RST_Pin|NSS_Pin;
 8001d36:	f44f 4308 	mov.w	r3, #34816	@ 0x8800
 8001d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d48:	f107 030c 	add.w	r3, r7, #12
 8001d4c:	4619      	mov	r1, r3
 8001d4e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d52:	f008 fc2f 	bl	800a5b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DIO0_Pin|DIO1_Pin;
 8001d56:	23c0      	movs	r3, #192	@ 0xc0
 8001d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d5a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d60:	2300      	movs	r3, #0
 8001d62:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d64:	f107 030c 	add.w	r3, r7, #12
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4808      	ldr	r0, [pc, #32]	@ (8001d8c <MX_GPIO_Init+0xe8>)
 8001d6c:	f008 fc22 	bl	800a5b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001d70:	2200      	movs	r2, #0
 8001d72:	2100      	movs	r1, #0
 8001d74:	2017      	movs	r0, #23
 8001d76:	f008 fbe6 	bl	800a546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d7a:	2017      	movs	r0, #23
 8001d7c:	f008 fbff 	bl	800a57e <HAL_NVIC_EnableIRQ>

}
 8001d80:	bf00      	nop
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	48000400 	.word	0x48000400

08001d90 <hal_io_init>:
} HAL;

// -----------------------------------------------------------------------------
// I/O

static void hal_io_init () {
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
	//already done by cubemx
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <hal_pin_rxtx>:

// val ==1  => tx 1, rx 0 ; val == 0 => tx 0, rx 1
void hal_pin_rxtx (u1_t val) {
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	4603      	mov	r3, r0
 8001da6:	71fb      	strb	r3, [r7, #7]
  #ifdef TX_GPIO_Port
    HAL_GPIO_WritePin(RX_GPIO_Port,RX_Pin,~val);
    HAL_GPIO_WritePin(TX_GPIO_Port,TX_Pin,val);
  #endif
#endif
}
 8001da8:	bf00      	nop
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <hal_pin_nss>:

// set radio NSS pin to given value
void hal_pin_nss (u1_t val) {
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(NSS_GPIO_Port,NSS_Pin,val);
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001dc6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dca:	f008 fd5d 	bl	800a888 <HAL_GPIO_WritePin>
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}

08001dd6 <hal_pin_rst>:

// set radio RST pin to given value (or keep floating!)
void hal_pin_rst (u1_t val) {
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b08c      	sub	sp, #48	@ 0x30
 8001dda:	af00      	add	r7, sp, #0
 8001ddc:	4603      	mov	r3, r0
 8001dde:	71fb      	strb	r3, [r7, #7]
    if(val == 0 || val == 1) { // drive pin
 8001de0:	79fb      	ldrb	r3, [r7, #7]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d002      	beq.n	8001dec <hal_pin_rst+0x16>
 8001de6:	79fb      	ldrb	r3, [r7, #7]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d116      	bne.n	8001e1a <hal_pin_rst+0x44>
    	GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001dec:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001df0:	61fb      	str	r3, [r7, #28]
    	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df2:	2301      	movs	r3, #1
 8001df4:	623b      	str	r3, [r7, #32]
    	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df6:	2300      	movs	r3, #0
 8001df8:	62bb      	str	r3, [r7, #40]	@ 0x28
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001dfa:	f107 031c 	add.w	r3, r7, #28
 8001dfe:	4619      	mov	r1, r3
 8001e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e04:	f008 fbd6 	bl	800a5b4 <HAL_GPIO_Init>

    	HAL_GPIO_WritePin(RST_GPIO_Port,RST_Pin,val);
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	461a      	mov	r2, r3
 8001e0c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e14:	f008 fd38 	bl	800a888 <HAL_GPIO_WritePin>
    if(val == 0 || val == 1) { // drive pin
 8001e18:	e00e      	b.n	8001e38 <hal_pin_rst+0x62>

    } else { // keep pin floating
        GPIO_InitTypeDef GPIO_InitStruct;
    	GPIO_InitStruct.Pin = RST_Pin;
 8001e1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001e1e:	60bb      	str	r3, [r7, #8]
    	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
    	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	613b      	str	r3, [r7, #16]
    	HAL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8001e28:	f107 0308 	add.w	r3, r7, #8
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e32:	f008 fbbf 	bl	800a5b4 <HAL_GPIO_Init>
    }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	3730      	adds	r7, #48	@ 0x30
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_GPIO_EXTI_Callback>:

extern void radio_irq_handler(u1_t dio);

// generic EXTI IRQ handler for all channels
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_int){
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	80fb      	strh	r3, [r7, #6]
	// DIO 0
	if(GPIO_Pin_int == DIO0_Pin) {
 8001e4a:	88fb      	ldrh	r3, [r7, #6]
 8001e4c:	2b40      	cmp	r3, #64	@ 0x40
 8001e4e:	d102      	bne.n	8001e56 <HAL_GPIO_EXTI_Callback+0x16>
		// invoke radio handler (on IRQ!)
		radio_irq_handler(0);
 8001e50:	2000      	movs	r0, #0
 8001e52:	f004 f9b1 	bl	80061b8 <radio_irq_handler>
	}
	// DIO 1
	if(GPIO_Pin_int == DIO1_Pin) {
 8001e56:	88fb      	ldrh	r3, [r7, #6]
 8001e58:	2b80      	cmp	r3, #128	@ 0x80
 8001e5a:	d102      	bne.n	8001e62 <HAL_GPIO_EXTI_Callback+0x22>
	    // invoke radio handler (on IRQ!)
		radio_irq_handler(1);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f004 f9ab 	bl	80061b8 <radio_irq_handler>
	// DIO 2
//	if(GPIO_Pin_int == DIO2_Pin) {
	//    // invoke radio handler (on IRQ!)
//	    radio_irq_handler(2);
//	}
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}

08001e6a <hal_spi_init>:

// -----------------------------------------------------------------------------
// SPI
void hal_spi_init () {
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0
	// already done by cube mx
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <hal_spi>:

// perform SPI transaction with radio
u1_t hal_spi (u1_t out) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af02      	add	r7, sp, #8
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	char outbuffer[] ="";
 8001e82:	2300      	movs	r3, #0
 8001e84:	733b      	strb	r3, [r7, #12]
	char inbuffer[] ="";
 8001e86:	2300      	movs	r3, #0
 8001e88:	723b      	strb	r3, [r7, #8]
	outbuffer[0] = out;
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	733b      	strb	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&mySPI,outbuffer,inbuffer,sizeof(outbuffer),HAL_MAX_DELAY);
 8001e8e:	f107 0208 	add.w	r2, r7, #8
 8001e92:	f107 010c 	add.w	r1, r7, #12
 8001e96:	f04f 33ff 	mov.w	r3, #4294967295
 8001e9a:	9300      	str	r3, [sp, #0]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <hal_spi+0x38>)
 8001ea0:	f00a fe59 	bl	800cb56 <HAL_SPI_TransmitReceive>
	return inbuffer[0];
 8001ea4:	7a3b      	ldrb	r3, [r7, #8]
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3710      	adds	r7, #16
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000047c 	.word	0x2000047c

08001eb4 <hal_time_init>:


// -----------------------------------------------------------------------------
// TIME
static void hal_time_init () {
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
	// already done by cubemx
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <hal_ticks>:

u4_t hal_ticks () {
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b082      	sub	sp, #8
 8001ec8:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 8001eca:	f000 f8b1 	bl	8002030 <hal_disableIRQs>
    u4_t t = HAL.ticks;
 8001ece:	4b13      	ldr	r3, [pc, #76]	@ (8001f1c <hal_ticks+0x58>)
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	607b      	str	r3, [r7, #4]
    u2_t cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001ed4:	4b12      	ldr	r3, [pc, #72]	@ (8001f20 <hal_ticks+0x5c>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eda:	807b      	strh	r3, [r7, #2]
    if(__HAL_TIM_GET_FLAG(&myTIMER, TIM_FLAG_CC1) != RESET){
 8001edc:	4b10      	ldr	r3, [pc, #64]	@ (8001f20 <hal_ticks+0x5c>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	691b      	ldr	r3, [r3, #16]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d10d      	bne.n	8001f06 <hal_ticks+0x42>
    	if(__HAL_TIM_GET_IT_SOURCE(&myTIMER, TIM_IT_CC1) !=RESET){
 8001eea:	4b0d      	ldr	r3, [pc, #52]	@ (8001f20 <hal_ticks+0x5c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	68db      	ldr	r3, [r3, #12]
 8001ef0:	f003 0302 	and.w	r3, r3, #2
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d106      	bne.n	8001f06 <hal_ticks+0x42>
    		cnt = __HAL_TIM_GET_COUNTER(&myTIMER);
 8001ef8:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <hal_ticks+0x5c>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001efe:	807b      	strh	r3, [r7, #2]
    		t++;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3301      	adds	r3, #1
 8001f04:	607b      	str	r3, [r7, #4]
        }
     }
    hal_enableIRQs();
 8001f06:	f000 f8a3 	bl	8002050 <hal_enableIRQs>
    return (t<<16)|cnt;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	041a      	lsls	r2, r3, #16
 8001f0e:	887b      	ldrh	r3, [r7, #2]
 8001f10:	4313      	orrs	r3, r2
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	20000204 	.word	0x20000204
 8001f20:	200004e4 	.word	0x200004e4

08001f24 <deltaticks>:

// return modified delta ticks from now to specified ticktime (0 for past, FFFF for far future)
static u2_t deltaticks (u4_t time) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b084      	sub	sp, #16
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
    u4_t t = hal_ticks();
 8001f2c:	f7ff ffca 	bl	8001ec4 <hal_ticks>
 8001f30:	60f8      	str	r0, [r7, #12]
    s4_t d = time - t;
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	60bb      	str	r3, [r7, #8]
    if( d<=0 ) return 0;    // in the past
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dc01      	bgt.n	8001f44 <deltaticks+0x20>
 8001f40:	2300      	movs	r3, #0
 8001f42:	e008      	b.n	8001f56 <deltaticks+0x32>
    if( (d>>16)!=0 ) return 0xFFFF; // far ahead
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	141b      	asrs	r3, r3, #16
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d002      	beq.n	8001f52 <deltaticks+0x2e>
 8001f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001f50:	e001      	b.n	8001f56 <deltaticks+0x32>
    return (u2_t)d;
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	b29b      	uxth	r3, r3
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3710      	adds	r7, #16
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <hal_waitUntil>:

void hal_waitUntil (u4_t time) {
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b082      	sub	sp, #8
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	6078      	str	r0, [r7, #4]
    while( deltaticks(time) != 0 ); // busy wait until timestamp is reached
 8001f66:	bf00      	nop
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f7ff ffdb 	bl	8001f24 <deltaticks>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d1f9      	bne.n	8001f68 <hal_waitUntil+0xa>
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <hal_checkTimer>:

// check and rewind for target time
u1_t hal_checkTimer (u4_t time) {
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b084      	sub	sp, #16
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    u2_t dt;
    myTIMER.Instance->SR &= ~TIM_SR_CC1IF; // clear any pending interrupts
 8001f88:	4b1b      	ldr	r3, [pc, #108]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0202 	bic.w	r2, r2, #2
 8001f96:	611a      	str	r2, [r3, #16]
    if((dt = deltaticks(time)) < 5) { // event is now (a few ticks ahead)
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff ffc3 	bl	8001f24 <deltaticks>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	81fb      	strh	r3, [r7, #14]
 8001fa2:	89fb      	ldrh	r3, [r7, #14]
 8001fa4:	2b04      	cmp	r3, #4
 8001fa6:	d809      	bhi.n	8001fbc <hal_checkTimer+0x3c>
    	myTIMER.Instance->DIER &= ~TIM_DIER_CC1IE; // disable IE
 8001fa8:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	68da      	ldr	r2, [r3, #12]
 8001fae:	4b12      	ldr	r3, [pc, #72]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0202 	bic.w	r2, r2, #2
 8001fb6:	60da      	str	r2, [r3, #12]
        return 1;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e018      	b.n	8001fee <hal_checkTimer+0x6e>
    } else { // rewind timer (fully or to exact time))
    	myTIMER.Instance->CCR1 = myTIMER.Instance->CNT + dt;   // set comparator
 8001fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8001fc2:	89fa      	ldrh	r2, [r7, #14]
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	440a      	add	r2, r1
 8001fca:	635a      	str	r2, [r3, #52]	@ 0x34
    	myTIMER.Instance->DIER |= TIM_DIER_CC1IE;  // enable IE
 8001fcc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0202 	orr.w	r2, r2, #2
 8001fda:	60da      	str	r2, [r3, #12]
    	myTIMER.Instance->CCER |= TIM_CCER_CC1E;   // enable capture/compare uint 2
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6a1a      	ldr	r2, [r3, #32]
 8001fe2:	4b05      	ldr	r3, [pc, #20]	@ (8001ff8 <hal_checkTimer+0x78>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	621a      	str	r2, [r3, #32]
        return 0;
 8001fec:	2300      	movs	r3, #0
    }
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	200004e4 	.word	0x200004e4

08001ffc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
	if(htim->Instance == myTIMER.Instance){
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	4b07      	ldr	r3, [pc, #28]	@ (8002028 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	429a      	cmp	r2, r3
 800200e:	d104      	bne.n	800201a <HAL_TIM_PeriodElapsedCallback+0x1e>
		HAL.ticks++;
 8002010:	4b06      	ldr	r3, [pc, #24]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	3301      	adds	r3, #1
 8002016:	4a05      	ldr	r2, [pc, #20]	@ (800202c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002018:	6053      	str	r3, [r2, #4]
    }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	200004e4 	.word	0x200004e4
 800202c:	20000204 	.word	0x20000204

08002030 <hal_disableIRQs>:

// -----------------------------------------------------------------------------
// IRQ
void hal_disableIRQs () {
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
	__disable_irq();
	//__set_BASEPRI(1 << 4);
    HAL.irqlevel++;
 8002038:	4b04      	ldr	r3, [pc, #16]	@ (800204c <hal_disableIRQs+0x1c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3301      	adds	r3, #1
 800203e:	4a03      	ldr	r2, [pc, #12]	@ (800204c <hal_disableIRQs+0x1c>)
 8002040:	6013      	str	r3, [r2, #0]
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	20000204 	.word	0x20000204

08002050 <hal_enableIRQs>:

void hal_enableIRQs () {
 8002050:	b480      	push	{r7}
 8002052:	af00      	add	r7, sp, #0
    if(--HAL.irqlevel == 0) {
 8002054:	4b07      	ldr	r3, [pc, #28]	@ (8002074 <hal_enableIRQs+0x24>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3b01      	subs	r3, #1
 800205a:	4a06      	ldr	r2, [pc, #24]	@ (8002074 <hal_enableIRQs+0x24>)
 800205c:	6013      	str	r3, [r2, #0]
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <hal_enableIRQs+0x24>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d101      	bne.n	800206a <hal_enableIRQs+0x1a>
  __ASM volatile ("cpsie i" : : : "memory");
 8002066:	b662      	cpsie	i
}
 8002068:	bf00      	nop
		__enable_irq();
    	//__set_BASEPRI(0);
    }
}
 800206a:	bf00      	nop
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	20000204 	.word	0x20000204

08002078 <hal_sleep>:

void hal_sleep () {
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
	// low power sleep mode
#ifndef CFG_no_low_power_sleep_mode
	// PWR->CR |= PWR_CR_LPSDSR;
#endif
    // suspend execution until IRQ, regardless of the CPSR I-bit
    __WFI();
 800207c:	bf30      	wfi
}
 800207e:	bf00      	nop
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <hal_init>:

// -----------------------------------------------------------------------------

void hal_init () {
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    memset(&HAL, 0x00, sizeof(HAL));
 800208c:	2208      	movs	r2, #8
 800208e:	2100      	movs	r1, #0
 8002090:	4807      	ldr	r0, [pc, #28]	@ (80020b0 <hal_init+0x28>)
 8002092:	f00c fa08 	bl	800e4a6 <memset>
    hal_disableIRQs();
 8002096:	f7ff ffcb 	bl	8002030 <hal_disableIRQs>
    // configure radio I/O and interrupt handler
    hal_io_init();
 800209a:	f7ff fe79 	bl	8001d90 <hal_io_init>
    // configure radio SPI
    hal_spi_init();
 800209e:	f7ff fee4 	bl	8001e6a <hal_spi_init>
    // configure timer and interrupt handler
    hal_time_init();
 80020a2:	f7ff ff07 	bl	8001eb4 <hal_time_init>
    hal_enableIRQs();
 80020a6:	f7ff ffd3 	bl	8002050 <hal_enableIRQs>
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20000204 	.word	0x20000204

080020b4 <hal_failed>:

void hal_failed () {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
    // HALT...
    hal_disableIRQs();
 80020b8:	f7ff ffba 	bl	8002030 <hal_disableIRQs>
    hal_sleep();
 80020bc:	f7ff ffdc 	bl	8002078 <hal_sleep>
    while(1);
 80020c0:	bf00      	nop
 80020c2:	e7fd      	b.n	80020c0 <hal_failed+0xc>

080020c4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80020c8:	4b1b      	ldr	r3, [pc, #108]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <MX_I2C1_Init+0x78>)
 80020cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020d0:	4a1b      	ldr	r2, [pc, #108]	@ (8002140 <MX_I2C1_Init+0x7c>)
 80020d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80020d4:	4b18      	ldr	r3, [pc, #96]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020dc:	2201      	movs	r2, #1
 80020de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020e0:	4b15      	ldr	r3, [pc, #84]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <MX_I2C1_Init+0x74>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020fe:	480e      	ldr	r0, [pc, #56]	@ (8002138 <MX_I2C1_Init+0x74>)
 8002100:	f008 fbf2 	bl	800a8e8 <HAL_I2C_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800210a:	f003 faec 	bl	80056e6 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800210e:	2100      	movs	r1, #0
 8002110:	4809      	ldr	r0, [pc, #36]	@ (8002138 <MX_I2C1_Init+0x74>)
 8002112:	f009 fa61 	bl	800b5d8 <HAL_I2CEx_ConfigAnalogFilter>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800211c:	f003 fae3 	bl	80056e6 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002120:	2100      	movs	r1, #0
 8002122:	4805      	ldr	r0, [pc, #20]	@ (8002138 <MX_I2C1_Init+0x74>)
 8002124:	f009 faa3 	bl	800b66e <HAL_I2CEx_ConfigDigitalFilter>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800212e:	f003 fada 	bl	80056e6 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000020c 	.word	0x2000020c
 800213c:	40005400 	.word	0x40005400
 8002140:	10909cec 	.word	0x10909cec

08002144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b09e      	sub	sp, #120	@ 0x78
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800215c:	f107 0310 	add.w	r3, r7, #16
 8002160:	2254      	movs	r2, #84	@ 0x54
 8002162:	2100      	movs	r1, #0
 8002164:	4618      	mov	r0, r3
 8002166:	f00c f99e 	bl	800e4a6 <memset>
  if(i2cHandle->Instance==I2C1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a1f      	ldr	r2, [pc, #124]	@ (80021ec <HAL_I2C_MspInit+0xa8>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d137      	bne.n	80021e4 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002174:	2340      	movs	r3, #64	@ 0x40
 8002176:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002178:	2300      	movs	r3, #0
 800217a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800217c:	f107 0310 	add.w	r3, r7, #16
 8002180:	4618      	mov	r0, r3
 8002182:	f00a f95d 	bl	800c440 <HAL_RCCEx_PeriphCLKConfig>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800218c:	f003 faab 	bl	80056e6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002190:	4b17      	ldr	r3, [pc, #92]	@ (80021f0 <HAL_I2C_MspInit+0xac>)
 8002192:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002194:	4a16      	ldr	r2, [pc, #88]	@ (80021f0 <HAL_I2C_MspInit+0xac>)
 8002196:	f043 0301 	orr.w	r3, r3, #1
 800219a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219c:	4b14      	ldr	r3, [pc, #80]	@ (80021f0 <HAL_I2C_MspInit+0xac>)
 800219e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021a8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80021ac:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ae:	2312      	movs	r3, #18
 80021b0:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b6:	2303      	movs	r3, #3
 80021b8:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021ba:	2304      	movs	r3, #4
 80021bc:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80021c2:	4619      	mov	r1, r3
 80021c4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c8:	f008 f9f4 	bl	800a5b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	@ (80021f0 <HAL_I2C_MspInit+0xac>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021d0:	4a07      	ldr	r2, [pc, #28]	@ (80021f0 <HAL_I2C_MspInit+0xac>)
 80021d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80021d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80021d8:	4b05      	ldr	r3, [pc, #20]	@ (80021f0 <HAL_I2C_MspInit+0xac>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80021e4:	bf00      	nop
 80021e6:	3778      	adds	r7, #120	@ 0x78
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40005400 	.word	0x40005400
 80021f0:	40021000 	.word	0x40021000

080021f4 <getSf>:
typedef u4_t devaddr_t;

// RX quality (device)
enum { RSSI_OFF=64, SNR_SCALEUP=4 };

inline sf_t  getSf   (rps_t params)            { return   (sf_t)(params &  0x7); }
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	b2db      	uxtb	r3, r3
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <getBw>:
inline rps_t setSf   (rps_t params, sf_t sf)   { return (rps_t)((params & ~0x7) | sf); }
inline bw_t  getBw   (rps_t params)            { return  (bw_t)((params >> 3) & 0x3); }
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	4603      	mov	r3, r0
 800221c:	80fb      	strh	r3, [r7, #6]
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	08db      	lsrs	r3, r3, #3
 8002222:	b29b      	uxth	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	b2db      	uxtb	r3, r3
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <getCr>:
inline rps_t setBw   (rps_t params, bw_t cr)   { return (rps_t)((params & ~0x18) | (cr<<3)); }
inline cr_t  getCr   (rps_t params)            { return  (cr_t)((params >> 5) & 0x3); }
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	4603      	mov	r3, r0
 8002240:	80fb      	strh	r3, [r7, #6]
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	b29b      	uxth	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	370c      	adds	r7, #12
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <setCr>:
inline rps_t setCr   (rps_t params, cr_t cr)   { return (rps_t)((params & ~0x60) | (cr<<5)); }
 800225c:	b480      	push	{r7}
 800225e:	b083      	sub	sp, #12
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	460a      	mov	r2, r1
 8002266:	80fb      	strh	r3, [r7, #6]
 8002268:	4613      	mov	r3, r2
 800226a:	717b      	strb	r3, [r7, #5]
 800226c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002270:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 8002274:	b21a      	sxth	r2, r3
 8002276:	797b      	ldrb	r3, [r7, #5]
 8002278:	015b      	lsls	r3, r3, #5
 800227a:	b21b      	sxth	r3, r3
 800227c:	4313      	orrs	r3, r2
 800227e:	b21b      	sxth	r3, r3
 8002280:	b29b      	uxth	r3, r3
 8002282:	4618      	mov	r0, r3
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <getNocrc>:
inline int   getNocrc(rps_t params)            { return        ((params >> 7) & 0x1); }
 800228e:	b480      	push	{r7}
 8002290:	b083      	sub	sp, #12
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	80fb      	strh	r3, [r7, #6]
 8002298:	88fb      	ldrh	r3, [r7, #6]
 800229a:	09db      	lsrs	r3, r3, #7
 800229c:	b29b      	uxth	r3, r3
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <setNocrc>:
inline rps_t setNocrc(rps_t params, int nocrc) { return (rps_t)((params & ~0x80) | (nocrc<<7)); }
 80022ae:	b480      	push	{r7}
 80022b0:	b083      	sub	sp, #12
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	6039      	str	r1, [r7, #0]
 80022b8:	80fb      	strh	r3, [r7, #6]
 80022ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	01db      	lsls	r3, r3, #7
 80022c8:	b21b      	sxth	r3, r3
 80022ca:	4313      	orrs	r3, r2
 80022cc:	b21b      	sxth	r3, r3
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <getIh>:
inline int   getIh   (rps_t params)            { return        ((params >> 8) & 0xFF); }
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	4603      	mov	r3, r0
 80022e4:	80fb      	strh	r3, [r7, #6]
 80022e6:	88fb      	ldrh	r3, [r7, #6]
 80022e8:	0a1b      	lsrs	r3, r3, #8
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <setIh>:
inline rps_t setIh   (rps_t params, int ih)    { return (rps_t)((params & ~0xFF00) | (ih<<8)); }
 80022fa:	b480      	push	{r7}
 80022fc:	b083      	sub	sp, #12
 80022fe:	af00      	add	r7, sp, #0
 8002300:	4603      	mov	r3, r0
 8002302:	6039      	str	r1, [r7, #0]
 8002304:	80fb      	strh	r3, [r7, #6]
 8002306:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	b21a      	sxth	r2, r3
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	b21b      	sxth	r3, r3
 8002314:	4313      	orrs	r3, r2
 8002316:	b21b      	sxth	r3, r3
 8002318:	b29b      	uxth	r3, r3
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <updr2rps>:
#define MAKERPS(sf,bw,cr,ih,nocrc) ((rps_t)((sf) | ((bw)<<3) | ((cr)<<5) | ((nocrc)?(1<<7):0) | ((ih&0xFF)<<8)))
// Two frames with params r1/r2 would interfere on air: same SFx + BWx 
inline int sameSfBw(rps_t r1, rps_t r2) { return ((r1^r2)&0x1F) == 0; }

extern const u1_t _DR2RPS_CRC[];
inline rps_t updr2rps (dr_t dr) { return (rps_t)_DR2RPS_CRC[dr+1]; }
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	71fb      	strb	r3, [r7, #7]
 8002332:	79fb      	ldrb	r3, [r7, #7]
 8002334:	3301      	adds	r3, #1
 8002336:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <updr2rps+0x20>)
 8002338:	5cd3      	ldrb	r3, [r2, r3]
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	080109e0 	.word	0x080109e0

0800234c <dndr2rps>:
inline rps_t dndr2rps (dr_t dr) { return setNocrc(updr2rps(dr),1); }
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	4603      	mov	r3, r0
 8002354:	71fb      	strb	r3, [r7, #7]
 8002356:	79fb      	ldrb	r3, [r7, #7]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff ffe5 	bl	8002328 <updr2rps>
 800235e:	4603      	mov	r3, r0
 8002360:	2101      	movs	r1, #1
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff ffa3 	bl	80022ae <setNocrc>
 8002368:	4603      	mov	r3, r0
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <decDR>:
inline int isFasterDR (dr_t dr1, dr_t dr2) { return dr1 > dr2; }
inline int isSlowerDR (dr_t dr1, dr_t dr2) { return dr1 < dr2; }
inline dr_t  incDR    (dr_t dr) { return _DR2RPS_CRC[dr+2]==ILLEGAL_RPS ? dr : (dr_t)(dr+1); } // increase data rate
inline dr_t  decDR    (dr_t dr) { return _DR2RPS_CRC[dr  ]==ILLEGAL_RPS ? dr : (dr_t)(dr-1); } // decrease data rate
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	4603      	mov	r3, r0
 800237c:	71fb      	strb	r3, [r7, #7]
 800237e:	79fb      	ldrb	r3, [r7, #7]
 8002380:	4a07      	ldr	r2, [pc, #28]	@ (80023a0 <decDR+0x2c>)
 8002382:	5cd3      	ldrb	r3, [r2, r3]
 8002384:	2bff      	cmp	r3, #255	@ 0xff
 8002386:	d003      	beq.n	8002390 <decDR+0x1c>
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	3b01      	subs	r3, #1
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e000      	b.n	8002392 <decDR+0x1e>
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	4618      	mov	r0, r3
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	080109e0 	.word	0x080109e0

080023a4 <validDR>:
//inline dr_t  assertDR (dr_t dr) { return _DR2RPS_CRC[dr+1]==ILLEGAL_RPS ? DR_DFLTMIN : dr; }   // force into a valid DR
inline bit_t validDR  (dr_t dr) { return _DR2RPS_CRC[dr+1]!=ILLEGAL_RPS; } // in range
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	4603      	mov	r3, r0
 80023ac:	71fb      	strb	r3, [r7, #7]
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	3301      	adds	r3, #1
 80023b2:	4a06      	ldr	r2, [pc, #24]	@ (80023cc <validDR+0x28>)
 80023b4:	5cd3      	ldrb	r3, [r2, r3]
 80023b6:	2bff      	cmp	r3, #255	@ 0xff
 80023b8:	bf14      	ite	ne
 80023ba:	2301      	movne	r3, #1
 80023bc:	2300      	moveq	r3, #0
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	080109e0 	.word	0x080109e0

080023d0 <lowerDR>:
inline dr_t  lowerDR  (dr_t dr, u1_t n) { while(n--){dr=decDR(dr);} return dr; } // decrease data rate by n steps
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	460a      	mov	r2, r1
 80023da:	71fb      	strb	r3, [r7, #7]
 80023dc:	4613      	mov	r3, r2
 80023de:	71bb      	strb	r3, [r7, #6]
 80023e0:	e005      	b.n	80023ee <lowerDR+0x1e>
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ffc5 	bl	8002374 <decDR>
 80023ea:	4603      	mov	r3, r0
 80023ec:	71fb      	strb	r3, [r7, #7]
 80023ee:	79bb      	ldrb	r3, [r7, #6]
 80023f0:	1e5a      	subs	r2, r3, #1
 80023f2:	71ba      	strb	r2, [r7, #6]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1f4      	bne.n	80023e2 <lowerDR+0x12>
 80023f8:	79fb      	ldrb	r3, [r7, #7]
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <os_rlsbf2>:
// BEG OS - default implementations for certain OS suport functions

#if !defined(HAS_os_calls)

#if !defined(os_rlsbf2)
u2_t os_rlsbf2 (xref2cu1_t buf) {
 8002402:	b480      	push	{r7}
 8002404:	b083      	sub	sp, #12
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
    return (u2_t)(buf[0] | (buf[1]<<8));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	b21a      	sxth	r2, r3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	3301      	adds	r3, #1
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	021b      	lsls	r3, r3, #8
 8002418:	b21b      	sxth	r3, r3
 800241a:	4313      	orrs	r3, r2
 800241c:	b21b      	sxth	r3, r3
 800241e:	b29b      	uxth	r3, r3
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <os_rlsbf4>:
#endif

#if !defined(os_rlsbf4)
u4_t os_rlsbf4 (xref2cu1_t buf) {
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[0] | (buf[1]<<8) | ((u4_t)buf[2]<<16) | ((u4_t)buf[3]<<24));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	781b      	ldrb	r3, [r3, #0]
 8002438:	461a      	mov	r2, r3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	021b      	lsls	r3, r3, #8
 8002442:	4313      	orrs	r3, r2
 8002444:	461a      	mov	r2, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3302      	adds	r3, #2
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	041b      	lsls	r3, r3, #16
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3303      	adds	r3, #3
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	061b      	lsls	r3, r3, #24
 8002458:	4313      	orrs	r3, r2
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <os_rmsbf4>:
#endif


#if !defined(os_rmsbf4)
u4_t os_rmsbf4 (xref2cu1_t buf) {
 8002466:	b480      	push	{r7}
 8002468:	b083      	sub	sp, #12
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
    return (u4_t)(buf[3] | (buf[2]<<8) | ((u4_t)buf[1]<<16) | ((u4_t)buf[0]<<24));
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3303      	adds	r3, #3
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	461a      	mov	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	3302      	adds	r3, #2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	021b      	lsls	r3, r3, #8
 800247e:	4313      	orrs	r3, r2
 8002480:	461a      	mov	r2, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3301      	adds	r3, #1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	041b      	lsls	r3, r3, #16
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	061b      	lsls	r3, r3, #24
 8002492:	4313      	orrs	r3, r2
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <os_wlsbf2>:
#endif


#if !defined(os_wlsbf2)
void os_wlsbf2 (xref2u1_t buf, u2_t v) {
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	807b      	strh	r3, [r7, #2]
    buf[0] = v;
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80024b4:	887b      	ldrh	r3, [r7, #2]
 80024b6:	0a1b      	lsrs	r3, r3, #8
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	3301      	adds	r3, #1
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <os_wlsbf4>:
#endif

#if !defined(os_wlsbf4)
void os_wlsbf4 (xref2u1_t buf, u4_t v) {
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
    buf[0] = v;
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>8;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	0a1a      	lsrs	r2, r3, #8
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	3301      	adds	r3, #1
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>16;
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	0c1a      	lsrs	r2, r3, #16
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3302      	adds	r3, #2
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]
    buf[3] = v>>24;
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	0e1a      	lsrs	r2, r3, #24
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3303      	adds	r3, #3
 8002500:	b2d2      	uxtb	r2, r2
 8002502:	701a      	strb	r2, [r3, #0]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <os_wmsbf4>:
#endif

#if !defined(os_wmsbf4)
void os_wmsbf4 (xref2u1_t buf, u4_t v) {
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	6039      	str	r1, [r7, #0]
    buf[3] = v;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3303      	adds	r3, #3
 800251e:	683a      	ldr	r2, [r7, #0]
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	701a      	strb	r2, [r3, #0]
    buf[2] = v>>8;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	0a1a      	lsrs	r2, r3, #8
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3302      	adds	r3, #2
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	701a      	strb	r2, [r3, #0]
    buf[1] = v>>16;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	0c1a      	lsrs	r2, r3, #16
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3301      	adds	r3, #1
 8002538:	b2d2      	uxtb	r2, r2
 800253a:	701a      	strb	r2, [r3, #0]
    buf[0] = v>>24;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	0e1b      	lsrs	r3, r3, #24
 8002540:	b2da      	uxtb	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	701a      	strb	r2, [r3, #0]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <os_getBattLevel>:
#endif

#if !defined(os_getBattLevel)
u1_t os_getBattLevel (void) {
 8002552:	b480      	push	{r7}
 8002554:	af00      	add	r7, sp, #0
    return MCMD_DEVS_BATT_NOINFO;
 8002556:	23ff      	movs	r3, #255	@ 0xff
}
 8002558:	4618      	mov	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <os_crc16>:
#endif

#if !defined(os_crc16)
// New CRC-16 CCITT(XMODEM) checksum for beacons:
u2_t os_crc16 (xref2u1_t data, uint len) {
 8002562:	b480      	push	{r7}
 8002564:	b087      	sub	sp, #28
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
    u2_t remainder = 0;
 800256c:	2300      	movs	r3, #0
 800256e:	82fb      	strh	r3, [r7, #22]
    u2_t polynomial = 0x1021;
 8002570:	f241 0321 	movw	r3, #4129	@ 0x1021
 8002574:	81bb      	strh	r3, [r7, #12]
    for( uint i = 0; i < len; i++ ) {
 8002576:	2300      	movs	r3, #0
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e026      	b.n	80025ca <os_crc16+0x68>
        remainder ^= data[i] << 8;
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	4413      	add	r3, r2
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	b21a      	sxth	r2, r3
 8002588:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800258c:	4053      	eors	r3, r2
 800258e:	b21b      	sxth	r3, r3
 8002590:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 8002592:	2308      	movs	r3, #8
 8002594:	73fb      	strb	r3, [r7, #15]
 8002596:	e012      	b.n	80025be <os_crc16+0x5c>
            if( (remainder & 0x8000) )
 8002598:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800259c:	2b00      	cmp	r3, #0
 800259e:	da08      	bge.n	80025b2 <os_crc16+0x50>
                remainder = (remainder << 1) ^ polynomial;
 80025a0:	8afb      	ldrh	r3, [r7, #22]
 80025a2:	005b      	lsls	r3, r3, #1
 80025a4:	b21a      	sxth	r2, r3
 80025a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025aa:	4053      	eors	r3, r2
 80025ac:	b21b      	sxth	r3, r3
 80025ae:	82fb      	strh	r3, [r7, #22]
 80025b0:	e002      	b.n	80025b8 <os_crc16+0x56>
            else 
                remainder <<= 1;
 80025b2:	8afb      	ldrh	r3, [r7, #22]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	82fb      	strh	r3, [r7, #22]
        for( u1_t bit = 8; bit > 0; bit--) {
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3b01      	subs	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1e9      	bne.n	8002598 <os_crc16+0x36>
    for( uint i = 0; i < len; i++ ) {
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	3301      	adds	r3, #1
 80025c8:	613b      	str	r3, [r7, #16]
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3d4      	bcc.n	800257c <os_crc16+0x1a>
        }
    }
    return remainder;
 80025d2:	8afb      	ldrh	r3, [r7, #22]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr

080025e0 <micB0>:
// ================================================================================

// ================================================================================
// BEG AES

static void micB0 (u4_t devaddr, u4_t seqno, int dndir, int len) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	60b9      	str	r1, [r7, #8]
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	603b      	str	r3, [r7, #0]
    os_clearMem(AESaux,16);
 80025ee:	2210      	movs	r2, #16
 80025f0:	2100      	movs	r1, #0
 80025f2:	4810      	ldr	r0, [pc, #64]	@ (8002634 <micB0+0x54>)
 80025f4:	f00b ff57 	bl	800e4a6 <memset>
    AESaux[0]  = 0x49;
 80025f8:	4b0e      	ldr	r3, [pc, #56]	@ (8002634 <micB0+0x54>)
 80025fa:	2249      	movs	r2, #73	@ 0x49
 80025fc:	701a      	strb	r2, [r3, #0]
    AESaux[5]  = dndir?1:0;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <micB0+0x58>)
 800260c:	701a      	strb	r2, [r3, #0]
    AESaux[15] = len;
 800260e:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <micB0+0x5c>)
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 8002616:	4b0a      	ldr	r3, [pc, #40]	@ (8002640 <micB0+0x60>)
 8002618:	68f9      	ldr	r1, [r7, #12]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff57 	bl	80024ce <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 8002620:	4b08      	ldr	r3, [pc, #32]	@ (8002644 <micB0+0x64>)
 8002622:	68b9      	ldr	r1, [r7, #8]
 8002624:	4618      	mov	r0, r3
 8002626:	f7ff ff52 	bl	80024ce <os_wlsbf4>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000144 	.word	0x20000144
 8002638:	20000149 	.word	0x20000149
 800263c:	20000153 	.word	0x20000153
 8002640:	2000014a 	.word	0x2000014a
 8002644:	2000014e 	.word	0x2000014e

08002648 <aes_verifyMic>:


static int aes_verifyMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
 8002654:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	6879      	ldr	r1, [r7, #4]
 800265c:	68b8      	ldr	r0, [r7, #8]
 800265e:	f7ff ffbf 	bl	80025e0 <micB0>
    os_copyMem(AESkey,key,16);
 8002662:	2210      	movs	r2, #16
 8002664:	68f9      	ldr	r1, [r7, #12]
 8002666:	480d      	ldr	r0, [pc, #52]	@ (800269c <aes_verifyMic+0x54>)
 8002668:	f00b ff99 	bl	800e59e <memcpy>
    return os_aes(AES_MIC, pdu, len) == os_rmsbf4(pdu+len);
 800266c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266e:	b29b      	uxth	r3, r3
 8002670:	461a      	mov	r2, r3
 8002672:	6a39      	ldr	r1, [r7, #32]
 8002674:	2002      	movs	r0, #2
 8002676:	f7fe fd1f 	bl	80010b8 <os_aes>
 800267a:	4604      	mov	r4, r0
 800267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267e:	6a3a      	ldr	r2, [r7, #32]
 8002680:	4413      	add	r3, r2
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff feef 	bl	8002466 <os_rmsbf4>
 8002688:	4603      	mov	r3, r0
 800268a:	429c      	cmp	r4, r3
 800268c:	bf0c      	ite	eq
 800268e:	2301      	moveq	r3, #1
 8002690:	2300      	movne	r3, #0
 8002692:	b2db      	uxtb	r3, r3
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	bd90      	pop	{r4, r7, pc}
 800269c:	20000154 	.word	0x20000154

080026a0 <aes_appendMic>:


static void aes_appendMic (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t pdu, int len) {
 80026a0:	b590      	push	{r4, r7, lr}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
    micB0(devaddr, seqno, dndir, len);
 80026ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b0:	683a      	ldr	r2, [r7, #0]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	68b8      	ldr	r0, [r7, #8]
 80026b6:	f7ff ff93 	bl	80025e0 <micB0>
    os_copyMem(AESkey,key,16);
 80026ba:	2210      	movs	r2, #16
 80026bc:	68f9      	ldr	r1, [r7, #12]
 80026be:	480b      	ldr	r0, [pc, #44]	@ (80026ec <aes_appendMic+0x4c>)
 80026c0:	f00b ff6d 	bl	800e59e <memcpy>
    // MSB because of internal structure of AES
    os_wmsbf4(pdu+len, os_aes(AES_MIC, pdu, len));
 80026c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026c6:	6a3a      	ldr	r2, [r7, #32]
 80026c8:	18d4      	adds	r4, r2, r3
 80026ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	6a39      	ldr	r1, [r7, #32]
 80026d2:	2002      	movs	r0, #2
 80026d4:	f7fe fcf0 	bl	80010b8 <os_aes>
 80026d8:	4603      	mov	r3, r0
 80026da:	4619      	mov	r1, r3
 80026dc:	4620      	mov	r0, r4
 80026de:	f7ff ff17 	bl	8002510 <os_wmsbf4>
}
 80026e2:	bf00      	nop
 80026e4:	3714      	adds	r7, #20
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd90      	pop	{r4, r7, pc}
 80026ea:	bf00      	nop
 80026ec:	20000154 	.word	0x20000154

080026f0 <aes_appendMic0>:


static void aes_appendMic0 (xref2u1_t pdu, int len) {
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 80026fa:	480b      	ldr	r0, [pc, #44]	@ (8002728 <aes_appendMic0+0x38>)
 80026fc:	f002 fe38 	bl	8005370 <os_getDevKey>
    os_wmsbf4(pdu+len, os_aes(AES_MIC|AES_MICNOAUX, pdu, len));  // MSB because of internal structure of AES
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	18d4      	adds	r4, r2, r3
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	461a      	mov	r2, r3
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	200a      	movs	r0, #10
 8002710:	f7fe fcd2 	bl	80010b8 <os_aes>
 8002714:	4603      	mov	r3, r0
 8002716:	4619      	mov	r1, r3
 8002718:	4620      	mov	r0, r4
 800271a:	f7ff fef9 	bl	8002510 <os_wmsbf4>
}
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}
 8002726:	bf00      	nop
 8002728:	20000154 	.word	0x20000154

0800272c <aes_verifyMic0>:


static int aes_verifyMic0 (xref2u1_t pdu, int len) {
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 8002736:	480d      	ldr	r0, [pc, #52]	@ (800276c <aes_verifyMic0+0x40>)
 8002738:	f002 fe1a 	bl	8005370 <os_getDevKey>
    return os_aes(AES_MIC|AES_MICNOAUX, pdu, len) == os_rmsbf4(pdu+len);
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	b29b      	uxth	r3, r3
 8002740:	461a      	mov	r2, r3
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	200a      	movs	r0, #10
 8002746:	f7fe fcb7 	bl	80010b8 <os_aes>
 800274a:	4604      	mov	r4, r0
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fe87 	bl	8002466 <os_rmsbf4>
 8002758:	4603      	mov	r3, r0
 800275a:	429c      	cmp	r4, r3
 800275c:	bf0c      	ite	eq
 800275e:	2301      	moveq	r3, #1
 8002760:	2300      	movne	r3, #0
 8002762:	b2db      	uxtb	r3, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	20000154 	.word	0x20000154

08002770 <aes_encrypt>:


static void aes_encrypt (xref2u1_t pdu, int len) {
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
    os_getDevKey(AESkey);
 800277a:	4807      	ldr	r0, [pc, #28]	@ (8002798 <aes_encrypt+0x28>)
 800277c:	f002 fdf8 	bl	8005370 <os_getDevKey>
    os_aes(AES_ENC, pdu, len);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	b29b      	uxth	r3, r3
 8002784:	461a      	mov	r2, r3
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	2000      	movs	r0, #0
 800278a:	f7fe fc95 	bl	80010b8 <os_aes>
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000154 	.word	0x20000154

0800279c <aes_cipher>:


static void aes_cipher (xref2cu1_t key, u4_t devaddr, u4_t seqno, int dndir, xref2u1_t payload, int len) {
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
 80027a8:	603b      	str	r3, [r7, #0]
    if( len <= 0 )
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dd29      	ble.n	8002804 <aes_cipher+0x68>
        return;
    os_clearMem(AESaux, 16);
 80027b0:	2210      	movs	r2, #16
 80027b2:	2100      	movs	r1, #0
 80027b4:	4815      	ldr	r0, [pc, #84]	@ (800280c <aes_cipher+0x70>)
 80027b6:	f00b fe76 	bl	800e4a6 <memset>
    AESaux[0] = AESaux[15] = 1; // mode=cipher / dir=down / block counter=1
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <aes_cipher+0x74>)
 80027bc:	2201      	movs	r2, #1
 80027be:	701a      	strb	r2, [r3, #0]
 80027c0:	4a12      	ldr	r2, [pc, #72]	@ (800280c <aes_cipher+0x70>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	7013      	strb	r3, [r2, #0]
    AESaux[5] = dndir?1:0;
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	bf14      	ite	ne
 80027cc:	2301      	movne	r3, #1
 80027ce:	2300      	moveq	r3, #0
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <aes_cipher+0x78>)
 80027d4:	701a      	strb	r2, [r3, #0]
    os_wlsbf4(AESaux+ 6,devaddr);
 80027d6:	4b10      	ldr	r3, [pc, #64]	@ (8002818 <aes_cipher+0x7c>)
 80027d8:	68b9      	ldr	r1, [r7, #8]
 80027da:	4618      	mov	r0, r3
 80027dc:	f7ff fe77 	bl	80024ce <os_wlsbf4>
    os_wlsbf4(AESaux+10,seqno);
 80027e0:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <aes_cipher+0x80>)
 80027e2:	6879      	ldr	r1, [r7, #4]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fe72 	bl	80024ce <os_wlsbf4>
    os_copyMem(AESkey,key,16);
 80027ea:	2210      	movs	r2, #16
 80027ec:	68f9      	ldr	r1, [r7, #12]
 80027ee:	480c      	ldr	r0, [pc, #48]	@ (8002820 <aes_cipher+0x84>)
 80027f0:	f00b fed5 	bl	800e59e <memcpy>
    os_aes(AES_CTR, payload, len);
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	461a      	mov	r2, r3
 80027fa:	69b9      	ldr	r1, [r7, #24]
 80027fc:	2004      	movs	r0, #4
 80027fe:	f7fe fc5b 	bl	80010b8 <os_aes>
 8002802:	e000      	b.n	8002806 <aes_cipher+0x6a>
        return;
 8002804:	bf00      	nop
}
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20000144 	.word	0x20000144
 8002810:	20000153 	.word	0x20000153
 8002814:	20000149 	.word	0x20000149
 8002818:	2000014a 	.word	0x2000014a
 800281c:	2000014e 	.word	0x2000014e
 8002820:	20000154 	.word	0x20000154

08002824 <aes_sessKeys>:


static void aes_sessKeys (u2_t devnonce, xref2cu1_t artnonce, xref2u1_t nwkkey, xref2u1_t artkey) {
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	4603      	mov	r3, r0
 8002832:	81fb      	strh	r3, [r7, #14]
    os_clearMem(nwkkey, 16);
 8002834:	2210      	movs	r2, #16
 8002836:	2100      	movs	r1, #0
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f00b fe34 	bl	800e4a6 <memset>
    nwkkey[0] = 0x01;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2201      	movs	r2, #1
 8002842:	701a      	strb	r2, [r3, #0]
    os_copyMem(nwkkey+1, artnonce, LEN_ARTNONCE+LEN_NETID);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3301      	adds	r3, #1
 8002848:	2206      	movs	r2, #6
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	4618      	mov	r0, r3
 800284e:	f00b fea6 	bl	800e59e <memcpy>
    os_wlsbf2(nwkkey+1+LEN_ARTNONCE+LEN_NETID, devnonce);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3307      	adds	r3, #7
 8002856:	89fa      	ldrh	r2, [r7, #14]
 8002858:	4611      	mov	r1, r2
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff fe20 	bl	80024a0 <os_wlsbf2>
    os_copyMem(artkey, nwkkey, 16);
 8002860:	2210      	movs	r2, #16
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	6838      	ldr	r0, [r7, #0]
 8002866:	f00b fe9a 	bl	800e59e <memcpy>
    artkey[0] = 0x02;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	2202      	movs	r2, #2
 800286e:	701a      	strb	r2, [r3, #0]

    os_getDevKey(AESkey);
 8002870:	4809      	ldr	r0, [pc, #36]	@ (8002898 <aes_sessKeys+0x74>)
 8002872:	f002 fd7d 	bl	8005370 <os_getDevKey>
    os_aes(AES_ENC, nwkkey, 16);
 8002876:	2210      	movs	r2, #16
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	2000      	movs	r0, #0
 800287c:	f7fe fc1c 	bl	80010b8 <os_aes>
    os_getDevKey(AESkey);
 8002880:	4805      	ldr	r0, [pc, #20]	@ (8002898 <aes_sessKeys+0x74>)
 8002882:	f002 fd75 	bl	8005370 <os_getDevKey>
    os_aes(AES_ENC, artkey, 16);
 8002886:	2210      	movs	r2, #16
 8002888:	6839      	ldr	r1, [r7, #0]
 800288a:	2000      	movs	r0, #0
 800288c:	f7fe fc14 	bl	80010b8 <os_aes>
}
 8002890:	bf00      	nop
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	20000154 	.word	0x20000154

0800289c <getSensitivity>:
    { 141-135,  141-132, 141-129 },  // SF10
    { 141-138,  141-135, 141-132 },  // SF11
    { 141-141,  141-138, 141-135 }   // SF12
};

int getSensitivity (rps_t rps) {
 800289c:	b590      	push	{r4, r7, lr}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	4603      	mov	r3, r0
 80028a4:	80fb      	strh	r3, [r7, #6]
    return -141 + SENSITIVITY[getSf(rps)][getBw(rps)];
 80028a6:	88fb      	ldrh	r3, [r7, #6]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f7ff fca3 	bl	80021f4 <getSf>
 80028ae:	4603      	mov	r3, r0
 80028b0:	461c      	mov	r4, r3
 80028b2:	88fb      	ldrh	r3, [r7, #6]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff fcad 	bl	8002214 <getBw>
 80028ba:	4603      	mov	r3, r0
 80028bc:	4619      	mov	r1, r3
 80028be:	4a06      	ldr	r2, [pc, #24]	@ (80028d8 <getSensitivity+0x3c>)
 80028c0:	4623      	mov	r3, r4
 80028c2:	005b      	lsls	r3, r3, #1
 80028c4:	4423      	add	r3, r4
 80028c6:	4413      	add	r3, r2
 80028c8:	440b      	add	r3, r1
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	3b8d      	subs	r3, #141	@ 0x8d
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd90      	pop	{r4, r7, pc}
 80028d6:	bf00      	nop
 80028d8:	080109fc 	.word	0x080109fc

080028dc <calcAirTime>:

ostime_t calcAirTime (rps_t rps, u1_t plen) {
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b087      	sub	sp, #28
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	460a      	mov	r2, r1
 80028e6:	80fb      	strh	r3, [r7, #6]
 80028e8:	4613      	mov	r3, r2
 80028ea:	717b      	strb	r3, [r7, #5]
    u1_t bw = getBw(rps);  // 0,1,2 = 125,250,500kHz
 80028ec:	88fb      	ldrh	r3, [r7, #6]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff fc90 	bl	8002214 <getBw>
 80028f4:	4603      	mov	r3, r0
 80028f6:	72fb      	strb	r3, [r7, #11]
    u1_t sf = getSf(rps);  // 0=FSK, 1..6 = SF7..12
 80028f8:	88fb      	ldrh	r3, [r7, #6]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff fc7a 	bl	80021f4 <getSf>
 8002900:	4603      	mov	r3, r0
 8002902:	72bb      	strb	r3, [r7, #10]
    if( sf == FSK ) {
 8002904:	7abb      	ldrb	r3, [r7, #10]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d10c      	bne.n	8002924 <calcAirTime+0x48>
        return (plen+/*preamble*/5+/*syncword*/3+/*len*/1+/*crc*/2) * /*bits/byte*/8
 800290a:	797b      	ldrb	r3, [r7, #5]
 800290c:	330b      	adds	r3, #11
            * (s4_t)OSTICKS_PER_SEC / /*kbit/s*/50000;
 800290e:	f44f 327a 	mov.w	r2, #256000	@ 0x3e800
 8002912:	fb02 f303 	mul.w	r3, r2, r3
 8002916:	4a3c      	ldr	r2, [pc, #240]	@ (8002a08 <calcAirTime+0x12c>)
 8002918:	fb82 1203 	smull	r1, r2, r2, r3
 800291c:	1312      	asrs	r2, r2, #12
 800291e:	17db      	asrs	r3, r3, #31
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	e06d      	b.n	8002a00 <calcAirTime+0x124>
    }
    u1_t sfx = 4*(sf+(7-SF7));
 8002924:	7abb      	ldrb	r3, [r7, #10]
 8002926:	3306      	adds	r3, #6
 8002928:	b2db      	uxtb	r3, r3
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	75fb      	strb	r3, [r7, #23]
    u1_t q = sfx - (sf >= SF11 ? 8 : 0);
 800292e:	7abb      	ldrb	r3, [r7, #10]
 8002930:	2b04      	cmp	r3, #4
 8002932:	d901      	bls.n	8002938 <calcAirTime+0x5c>
 8002934:	2308      	movs	r3, #8
 8002936:	e000      	b.n	800293a <calcAirTime+0x5e>
 8002938:	2300      	movs	r3, #0
 800293a:	7dfa      	ldrb	r2, [r7, #23]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	727b      	strb	r3, [r7, #9]
    int tmp = 8*plen - sfx + 28 + (getNocrc(rps)?0:16) - (getIh(rps)?20:0);
 8002940:	797b      	ldrb	r3, [r7, #5]
 8002942:	00da      	lsls	r2, r3, #3
 8002944:	7dfb      	ldrb	r3, [r7, #23]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f103 041c 	add.w	r4, r3, #28
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fc9d 	bl	800228e <getNocrc>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <calcAirTime+0x82>
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <calcAirTime+0x84>
 800295e:	2310      	movs	r3, #16
 8002960:	441c      	add	r4, r3
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff fcb9 	bl	80022dc <getIh>
 800296a:	4603      	mov	r3, r0
 800296c:	2b00      	cmp	r3, #0
 800296e:	d001      	beq.n	8002974 <calcAirTime+0x98>
 8002970:	2314      	movs	r3, #20
 8002972:	e000      	b.n	8002976 <calcAirTime+0x9a>
 8002974:	2300      	movs	r3, #0
 8002976:	1ae3      	subs	r3, r4, r3
 8002978:	613b      	str	r3, [r7, #16]
    if( tmp > 0 ) {
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	2b00      	cmp	r3, #0
 800297e:	dd15      	ble.n	80029ac <calcAirTime+0xd0>
        tmp = (tmp + q - 1) / q;
 8002980:	7a7a      	ldrb	r2, [r7, #9]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4413      	add	r3, r2
 8002986:	1e5a      	subs	r2, r3, #1
 8002988:	7a7b      	ldrb	r3, [r7, #9]
 800298a:	fb92 f3f3 	sdiv	r3, r2, r3
 800298e:	613b      	str	r3, [r7, #16]
        tmp *= getCr(rps)+5;
 8002990:	88fb      	ldrh	r3, [r7, #6]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fc50 	bl	8002238 <getCr>
 8002998:	4603      	mov	r3, r0
 800299a:	1d5a      	adds	r2, r3, #5
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	613b      	str	r3, [r7, #16]
        tmp += 8;
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	3308      	adds	r3, #8
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	e001      	b.n	80029b0 <calcAirTime+0xd4>
    } else {
        tmp = 8;
 80029ac:	2308      	movs	r3, #8
 80029ae:	613b      	str	r3, [r7, #16]
    }
    tmp = (tmp<<2) + /*preamble*/49 /* 4 * (8 + 4.25) */;
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	3331      	adds	r3, #49	@ 0x31
 80029b6:	613b      	str	r3, [r7, #16]
    //
    // osticks =  tmp * OSTICKS_PER_SEC * 1<<sf / bw
    //
    // 3 => counter reduced divisor 125000/8 => 15625
    // 2 => counter 2 shift on tmp
    sfx = sf+(7-SF7) - (3+2) - bw;
 80029b8:	7aba      	ldrb	r2, [r7, #10]
 80029ba:	7afb      	ldrb	r3, [r7, #11]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	3301      	adds	r3, #1
 80029c2:	75fb      	strb	r3, [r7, #23]
    int div = 15625;
 80029c4:	f643 5309 	movw	r3, #15625	@ 0x3d09
 80029c8:	60fb      	str	r3, [r7, #12]
    if( sfx > 4 ) {
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
 80029cc:	2b04      	cmp	r3, #4
 80029ce:	d907      	bls.n	80029e0 <calcAirTime+0x104>
        // prevent 32bit signed int overflow in last step
        div >>= sfx-4;
 80029d0:	7dfb      	ldrb	r3, [r7, #23]
 80029d2:	3b04      	subs	r3, #4
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	fa42 f303 	asr.w	r3, r2, r3
 80029da:	60fb      	str	r3, [r7, #12]
        sfx = 4;
 80029dc:	2304      	movs	r3, #4
 80029de:	75fb      	strb	r3, [r7, #23]
    }
    // Need 32bit arithmetic for this last step
    return (((ostime_t)tmp << sfx) * OSTICKS_PER_SEC + div/2) / div;
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	693a      	ldr	r2, [r7, #16]
 80029e4:	fa02 f303 	lsl.w	r3, r2, r3
 80029e8:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 80029ec:	fb03 f202 	mul.w	r2, r3, r2
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	0fd9      	lsrs	r1, r3, #31
 80029f4:	440b      	add	r3, r1
 80029f6:	105b      	asrs	r3, r3, #1
 80029f8:	441a      	add	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	fb92 f3f3 	sdiv	r3, r2, r3
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	371c      	adds	r7, #28
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd90      	pop	{r4, r7, pc}
 8002a08:	14f8b589 	.word	0x14f8b589

08002a0c <calcRxWindow>:
    us2osticksRound(128<<0)   // ------    DR_SF7CR
#endif
};


static ostime_t calcRxWindow (u1_t secs, dr_t dr) {
 8002a0c:	b480      	push	{r7}
 8002a0e:	b087      	sub	sp, #28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	460a      	mov	r2, r1
 8002a16:	71fb      	strb	r3, [r7, #7]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	71bb      	strb	r3, [r7, #6]
    ostime_t rxoff, err;
    if( secs==0 ) {
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d108      	bne.n	8002a34 <calcRxWindow+0x28>
        // aka 128 secs (next becaon)
        rxoff = LMIC.drift;
 8002a22:	4b22      	ldr	r3, [pc, #136]	@ (8002aac <calcRxWindow+0xa0>)
 8002a24:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002a28:	617b      	str	r3, [r7, #20]
        err = LMIC.lastDriftDiff;
 8002a2a:	4b20      	ldr	r3, [pc, #128]	@ (8002aac <calcRxWindow+0xa0>)
 8002a2c:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002a30:	613b      	str	r3, [r7, #16]
 8002a32:	e011      	b.n	8002a58 <calcRxWindow+0x4c>
    } else {
        // scheduled RX window within secs into current beacon period
        rxoff = (LMIC.drift * (ostime_t)secs) >> BCN_INTV_exp;
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <calcRxWindow+0xa0>)
 8002a36:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	fb02 f303 	mul.w	r3, r2, r3
 8002a42:	11db      	asrs	r3, r3, #7
 8002a44:	617b      	str	r3, [r7, #20]
        err = (LMIC.lastDriftDiff * (ostime_t)secs) >> BCN_INTV_exp;
 8002a46:	4b19      	ldr	r3, [pc, #100]	@ (8002aac <calcRxWindow+0xa0>)
 8002a48:	f9b3 30b6 	ldrsh.w	r3, [r3, #182]	@ 0xb6
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	11db      	asrs	r3, r3, #7
 8002a56:	613b      	str	r3, [r7, #16]
    }
    u1_t rxsyms = MINRX_SYMS;
 8002a58:	2305      	movs	r3, #5
 8002a5a:	73fb      	strb	r3, [r7, #15]
    err += (ostime_t)LMIC.maxDriftDiff * LMIC.missedBcns;
 8002a5c:	4b13      	ldr	r3, [pc, #76]	@ (8002aac <calcRxWindow+0xa0>)
 8002a5e:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8002a62:	461a      	mov	r2, r3
 8002a64:	4b11      	ldr	r3, [pc, #68]	@ (8002aac <calcRxWindow+0xa0>)
 8002a66:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8002a6a:	fb02 f303 	mul.w	r3, r2, r3
 8002a6e:	693a      	ldr	r2, [r7, #16]
 8002a70:	4413      	add	r3, r2
 8002a72:	613b      	str	r3, [r7, #16]
    LMIC.rxsyms = MINRX_SYMS + (err / dr2hsym(dr));
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab0 <calcRxWindow+0xa4>)
 8002a78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	3305      	adds	r3, #5
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	4b08      	ldr	r3, [pc, #32]	@ (8002aac <calcRxWindow+0xa0>)
 8002a8a:	741a      	strb	r2, [r3, #16]

    return (rxsyms-PAMBL_SYMS) * dr2hsym(dr) + rxoff;
 8002a8c:	7bfb      	ldrb	r3, [r7, #15]
 8002a8e:	3b08      	subs	r3, #8
 8002a90:	79ba      	ldrb	r2, [r7, #6]
 8002a92:	4907      	ldr	r1, [pc, #28]	@ (8002ab0 <calcRxWindow+0xa4>)
 8002a94:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002a98:	fb03 f202 	mul.w	r2, r3, r2
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	4413      	add	r3, r2
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	371c      	adds	r7, #28
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	20000260 	.word	0x20000260
 8002ab0:	08010a20 	.word	0x08010a20

08002ab4 <calcBcnRxWindowFromMillis>:


// Setup beacon RX parameters assuming we have an error of ms (aka +/-(ms/2))
static void calcBcnRxWindowFromMillis (u1_t ms, bit_t ini) {
 8002ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ab8:	b087      	sub	sp, #28
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	4606      	mov	r6, r0
 8002abe:	4608      	mov	r0, r1
 8002ac0:	4631      	mov	r1, r6
 8002ac2:	73f9      	strb	r1, [r7, #15]
 8002ac4:	4601      	mov	r1, r0
 8002ac6:	73b9      	strb	r1, [r7, #14]
    if( ini ) {
 8002ac8:	7bb9      	ldrb	r1, [r7, #14]
 8002aca:	2900      	cmp	r1, #0
 8002acc:	d014      	beq.n	8002af8 <calcBcnRxWindowFromMillis+0x44>
        LMIC.drift = 0;
 8002ace:	493b      	ldr	r1, [pc, #236]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	f8a1 00b4 	strh.w	r0, [r1, #180]	@ 0xb4
        LMIC.maxDriftDiff = 0;
 8002ad6:	4939      	ldr	r1, [pc, #228]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f8a1 00b8 	strh.w	r0, [r1, #184]	@ 0xb8
        LMIC.missedBcns = 0;
 8002ade:	4937      	ldr	r1, [pc, #220]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	f881 0131 	strb.w	r0, [r1, #305]	@ 0x131
        LMIC.bcninfo.flags |= BCN_NODRIFT|BCN_NODDIFF;
 8002ae6:	4935      	ldr	r1, [pc, #212]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002ae8:	f891 1196 	ldrb.w	r1, [r1, #406]	@ 0x196
 8002aec:	f041 010c 	orr.w	r1, r1, #12
 8002af0:	b2c8      	uxtb	r0, r1
 8002af2:	4932      	ldr	r1, [pc, #200]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002af4:	f881 0196 	strb.w	r0, [r1, #406]	@ 0x196
    }
    ostime_t hsym = dr2hsym(DR_BCN);
 8002af8:	2142      	movs	r1, #66	@ 0x42
 8002afa:	6179      	str	r1, [r7, #20]
    LMIC.bcnRxsyms = MINRX_SYMS + ms2osticksCeil(ms) / hsym;
 8002afc:	7bf9      	ldrb	r1, [r7, #15]
 8002afe:	2000      	movs	r0, #0
 8002b00:	460c      	mov	r4, r1
 8002b02:	4605      	mov	r5, r0
 8002b04:	4620      	mov	r0, r4
 8002b06:	4629      	mov	r1, r5
 8002b08:	f04f 0a00 	mov.w	sl, #0
 8002b0c:	f04f 0b00 	mov.w	fp, #0
 8002b10:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002b14:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 8002b18:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	4659      	mov	r1, fp
 8002b20:	1b02      	subs	r2, r0, r4
 8002b22:	eb61 0305 	sbc.w	r3, r1, r5
 8002b26:	f04f 0000 	mov.w	r0, #0
 8002b2a:	f04f 0100 	mov.w	r1, #0
 8002b2e:	0099      	lsls	r1, r3, #2
 8002b30:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 8002b34:	0090      	lsls	r0, r2, #2
 8002b36:	4602      	mov	r2, r0
 8002b38:	460b      	mov	r3, r1
 8002b3a:	eb12 0804 	adds.w	r8, r2, r4
 8002b3e:	eb43 0905 	adc.w	r9, r3, r5
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	f04f 0300 	mov.w	r3, #0
 8002b4a:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8002b4e:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8002b52:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8002b56:	4690      	mov	r8, r2
 8002b58:	4699      	mov	r9, r3
 8002b5a:	4642      	mov	r2, r8
 8002b5c:	464b      	mov	r3, r9
 8002b5e:	f240 31e7 	movw	r1, #999	@ 0x3e7
 8002b62:	1851      	adds	r1, r2, r1
 8002b64:	6039      	str	r1, [r7, #0]
 8002b66:	f143 0300 	adc.w	r3, r3, #0
 8002b6a:	607b      	str	r3, [r7, #4]
 8002b6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b78:	f7fd ff98 	bl	8000aac <__aeabi_ldivmod>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	fb92 f3f3 	sdiv	r3, r2, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	3305      	adds	r3, #5
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002b8e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - (LMIC.bcnRxsyms-PAMBL_SYMS) * hsym;
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002b94:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8002b98:	f503 127a 	add.w	r2, r3, #4096000	@ 0x3e8000
 8002b9c:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002b9e:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8002ba2:	3b08      	subs	r3, #8
 8002ba4:	6979      	ldr	r1, [r7, #20]
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	4a03      	ldr	r2, [pc, #12]	@ (8002bbc <calcBcnRxWindowFromMillis+0x108>)
 8002bae:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
}
 8002bb2:	bf00      	nop
 8002bb4:	371c      	adds	r7, #28
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002bbc:	20000260 	.word	0x20000260

08002bc0 <rxschedInit>:


// Setup scheduled RX window (ping/multicast slot)
static void rxschedInit (xref2rxsched_t rxsched) {
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
    os_clearMem(AESkey,16);
 8002bc8:	2210      	movs	r2, #16
 8002bca:	2100      	movs	r1, #0
 8002bcc:	482e      	ldr	r0, [pc, #184]	@ (8002c88 <rxschedInit+0xc8>)
 8002bce:	f00b fc6a 	bl	800e4a6 <memset>
    os_clearMem(LMIC.frame+8,8);
 8002bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8002c8c <rxschedInit+0xcc>)
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	2100      	movs	r1, #0
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f00b fc64 	bl	800e4a6 <memset>
    os_wlsbf4(LMIC.frame, LMIC.bcninfo.time);
 8002bde:	4b2c      	ldr	r3, [pc, #176]	@ (8002c90 <rxschedInit+0xd0>)
 8002be0:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8002be4:	4619      	mov	r1, r3
 8002be6:	482b      	ldr	r0, [pc, #172]	@ (8002c94 <rxschedInit+0xd4>)
 8002be8:	f7ff fc71 	bl	80024ce <os_wlsbf4>
    os_wlsbf4(LMIC.frame+4, LMIC.devaddr);
 8002bec:	4a2a      	ldr	r2, [pc, #168]	@ (8002c98 <rxschedInit+0xd8>)
 8002bee:	4b28      	ldr	r3, [pc, #160]	@ (8002c90 <rxschedInit+0xd0>)
 8002bf0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f7ff fc69 	bl	80024ce <os_wlsbf4>
    os_aes(AES_ENC,LMIC.frame,16);
 8002bfc:	2210      	movs	r2, #16
 8002bfe:	4925      	ldr	r1, [pc, #148]	@ (8002c94 <rxschedInit+0xd4>)
 8002c00:	2000      	movs	r0, #0
 8002c02:	f7fe fa59 	bl	80010b8 <os_aes>
    u1_t intvExp = rxsched->intvExp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	785b      	ldrb	r3, [r3, #1]
 8002c0a:	73fb      	strb	r3, [r7, #15]
    ostime_t off = os_rlsbf2(LMIC.frame) & (0x0FFF >> (7 - intvExp)); // random offset (slot units)
 8002c0c:	4821      	ldr	r0, [pc, #132]	@ (8002c94 <rxschedInit+0xd4>)
 8002c0e:	f7ff fbf8 	bl	8002402 <os_rlsbf2>
 8002c12:	4603      	mov	r3, r0
 8002c14:	4619      	mov	r1, r3
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	f1c3 0307 	rsb	r3, r3, #7
 8002c1c:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002c20:	fa42 f303 	asr.w	r3, r2, r3
 8002c24:	400b      	ands	r3, r1
 8002c26:	60bb      	str	r3, [r7, #8]
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002c28:	4b19      	ldr	r3, [pc, #100]	@ (8002c90 <rxschedInit+0xd0>)
 8002c2a:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
                       BCN_RESERVE_osticks +
 8002c2e:	4619      	mov	r1, r3
                       ms2osticks(BCN_SLOT_SPAN_ms * off)); // random offset osticks
 8002c30:	68ba      	ldr	r2, [r7, #8]
 8002c32:	4613      	mov	r3, r2
 8002c34:	011b      	lsls	r3, r3, #4
 8002c36:	1a9b      	subs	r3, r3, r2
 8002c38:	019b      	lsls	r3, r3, #6
                       BCN_RESERVE_osticks +
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8002c40:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8002c44:	461a      	mov	r2, r3
    rxsched->rxbase = (LMIC.bcninfo.txtime +
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	605a      	str	r2, [r3, #4]
    rxsched->slot   = 0;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	709a      	strb	r2, [r3, #2]
    rxsched->rxtime = rxsched->rxbase - calcRxWindow(/*secs BCN_RESERVE*/2+(1<<intvExp),rxsched->dr);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685c      	ldr	r4, [r3, #4]
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	2201      	movs	r2, #1
 8002c58:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3302      	adds	r3, #2
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	4619      	mov	r1, r3
 8002c68:	4610      	mov	r0, r2
 8002c6a:	f7ff fecf 	bl	8002a0c <calcRxWindow>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	1ae2      	subs	r2, r4, r3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002c76:	4b06      	ldr	r3, [pc, #24]	@ (8002c90 <rxschedInit+0xd0>)
 8002c78:	7c1a      	ldrb	r2, [r3, #16]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	70da      	strb	r2, [r3, #3]
}
 8002c7e:	bf00      	nop
 8002c80:	3714      	adds	r7, #20
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd90      	pop	{r4, r7, pc}
 8002c86:	bf00      	nop
 8002c88:	20000154 	.word	0x20000154
 8002c8c:	200003b0 	.word	0x200003b0
 8002c90:	20000260 	.word	0x20000260
 8002c94:	200003a8 	.word	0x200003a8
 8002c98:	200003ac 	.word	0x200003ac

08002c9c <rxschedNext>:


static bit_t rxschedNext (xref2rxsched_t rxsched, ostime_t cando) {
 8002c9c:	b590      	push	{r4, r7, lr}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  again:
    if( rxsched->rxtime - cando >= 0 )
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	db01      	blt.n	8002cb6 <rxschedNext+0x1a>
        return 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e03a      	b.n	8002d2c <rxschedNext+0x90>
    u1_t slot;
    if( (slot=rxsched->slot) >= 128 )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	789b      	ldrb	r3, [r3, #2]
 8002cba:	73fb      	strb	r3, [r7, #15]
 8002cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	da01      	bge.n	8002cc8 <rxschedNext+0x2c>
        return 0;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	e031      	b.n	8002d2c <rxschedNext+0x90>
    u1_t intv = 1<<rxsched->intvExp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	785b      	ldrb	r3, [r3, #1]
 8002ccc:	461a      	mov	r2, r3
 8002cce:	2301      	movs	r3, #1
 8002cd0:	4093      	lsls	r3, r2
 8002cd2:	73bb      	strb	r3, [r7, #14]
    if( (rxsched->slot = (slot += (intv))) >= 128 )
 8002cd4:	7bfa      	ldrb	r2, [r7, #15]
 8002cd6:	7bbb      	ldrb	r3, [r7, #14]
 8002cd8:	4413      	add	r3, r2
 8002cda:	73fb      	strb	r3, [r7, #15]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	7bfa      	ldrb	r2, [r7, #15]
 8002ce0:	709a      	strb	r2, [r3, #2]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	789b      	ldrb	r3, [r3, #2]
 8002ce6:	b25b      	sxtb	r3, r3
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	da01      	bge.n	8002cf0 <rxschedNext+0x54>
        return 0;
 8002cec:	2300      	movs	r3, #0
 8002cee:	e01d      	b.n	8002d2c <rxschedNext+0x90>
    rxsched->rxtime = rxsched->rxbase
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6859      	ldr	r1, [r3, #4]
        + ((BCN_WINDOW_osticks * (ostime_t)slot) >> BCN_INTV_exp)
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	4613      	mov	r3, r2
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	1a9b      	subs	r3, r3, r2
 8002cfc:	049b      	lsls	r3, r3, #18
 8002cfe:	11db      	asrs	r3, r3, #7
 8002d00:	18cc      	adds	r4, r1, r3
        - calcRxWindow(/*secs BCN_RESERVE*/2+slot+intv,rxsched->dr);
 8002d02:	7bfa      	ldrb	r2, [r7, #15]
 8002d04:	7bbb      	ldrb	r3, [r7, #14]
 8002d06:	4413      	add	r3, r2
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	3302      	adds	r3, #2
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4610      	mov	r0, r2
 8002d16:	f7ff fe79 	bl	8002a0c <calcRxWindow>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	1ae2      	subs	r2, r4, r3
    rxsched->rxtime = rxsched->rxbase
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]
    rxsched->rxsyms = LMIC.rxsyms;
 8002d22:	4b04      	ldr	r3, [pc, #16]	@ (8002d34 <rxschedNext+0x98>)
 8002d24:	7c1a      	ldrb	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	70da      	strb	r2, [r3, #3]
    goto again;
 8002d2a:	e7bc      	b.n	8002ca6 <rxschedNext+0xa>
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3714      	adds	r7, #20
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd90      	pop	{r4, r7, pc}
 8002d34:	20000260 	.word	0x20000260

08002d38 <rndDelay>:


static ostime_t rndDelay (u1_t secSpan) {
 8002d38:	b590      	push	{r4, r7, lr}
 8002d3a:	b085      	sub	sp, #20
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
    u2_t r = os_getRndU2();
 8002d42:	f003 fa13 	bl	800616c <radio_rand1>
 8002d46:	4603      	mov	r3, r0
 8002d48:	021b      	lsls	r3, r3, #8
 8002d4a:	b21c      	sxth	r4, r3
 8002d4c:	f003 fa0e 	bl	800616c <radio_rand1>
 8002d50:	4603      	mov	r3, r0
 8002d52:	b21b      	sxth	r3, r3
 8002d54:	4323      	orrs	r3, r4
 8002d56:	b21b      	sxth	r3, r3
 8002d58:	817b      	strh	r3, [r7, #10]
    ostime_t delay = r;
 8002d5a:	897b      	ldrh	r3, [r7, #10]
 8002d5c:	60fb      	str	r3, [r7, #12]
    if( delay > OSTICKS_PER_SEC )
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8002d64:	dd0b      	ble.n	8002d7e <rndDelay+0x46>
        delay = r % (u2_t)OSTICKS_PER_SEC;
 8002d66:	897b      	ldrh	r3, [r7, #10]
 8002d68:	4a11      	ldr	r2, [pc, #68]	@ (8002db0 <rndDelay+0x78>)
 8002d6a:	fba2 1203 	umull	r1, r2, r2, r3
 8002d6e:	0ad2      	lsrs	r2, r2, #11
 8002d70:	f44f 41fa 	mov.w	r1, #32000	@ 0x7d00
 8002d74:	fb01 f202 	mul.w	r2, r1, r2
 8002d78:	1a9b      	subs	r3, r3, r2
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	60fb      	str	r3, [r7, #12]
    if( secSpan > 0 )
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <rndDelay+0x6e>
        delay += ((u1_t)r % secSpan) * OSTICKS_PER_SEC;
 8002d84:	897b      	ldrh	r3, [r7, #10]
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	79fa      	ldrb	r2, [r7, #7]
 8002d8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d8e:	fb01 f202 	mul.w	r2, r1, r2
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	461a      	mov	r2, r3
 8002d98:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8002d9c:	fb02 f303 	mul.w	r3, r2, r3
 8002da0:	68fa      	ldr	r2, [r7, #12]
 8002da2:	4413      	add	r3, r2
 8002da4:	60fb      	str	r3, [r7, #12]
    return delay;
 8002da6:	68fb      	ldr	r3, [r7, #12]
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3714      	adds	r7, #20
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd90      	pop	{r4, r7, pc}
 8002db0:	10624dd3 	.word	0x10624dd3

08002db4 <txDelay>:


static void txDelay (ostime_t reftime, u1_t secSpan) {
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	70fb      	strb	r3, [r7, #3]
    reftime += rndDelay(secSpan);
 8002dc0:	78fb      	ldrb	r3, [r7, #3]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff ffb8 	bl	8002d38 <rndDelay>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4413      	add	r3, r2
 8002dce:	607b      	str	r3, [r7, #4]
    if( LMIC.globalDutyRate == 0  ||  (reftime - LMIC.globalDutyAvail) > 0 ) {
 8002dd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <txDelay+0x58>)
 8002dd2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <txDelay+0x34>
 8002dda:	4b0c      	ldr	r3, [pc, #48]	@ (8002e0c <txDelay+0x58>)
 8002ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	dd0c      	ble.n	8002e02 <txDelay+0x4e>
        LMIC.globalDutyAvail = reftime;
 8002de8:	4a08      	ldr	r2, [pc, #32]	@ (8002e0c <txDelay+0x58>)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
        LMIC.opmode |= OP_RNDTX;
 8002df0:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <txDelay+0x58>)
 8002df2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b03      	ldr	r3, [pc, #12]	@ (8002e0c <txDelay+0x58>)
 8002dfe:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002e02:	bf00      	nop
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	20000260 	.word	0x20000260

08002e10 <setDrJoin>:


static void setDrJoin (u1_t reason, u1_t dr) {
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	460a      	mov	r2, r1
 8002e1a:	71fb      	strb	r3, [r7, #7]
 8002e1c:	4613      	mov	r3, r2
 8002e1e:	71bb      	strb	r3, [r7, #6]
                        e_.deveui    = MAIN::CDEV->getEui(),
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = LMIC.adrTxPow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    LMIC.datarate = dr;
 8002e20:	4a04      	ldr	r2, [pc, #16]	@ (8002e34 <setDrJoin+0x24>)
 8002e22:	79bb      	ldrb	r3, [r7, #6]
 8002e24:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
    DO_DEVDB(LMIC.datarate,datarate);
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	20000260 	.word	0x20000260

08002e38 <setDrTxpow>:


static void setDrTxpow (u1_t reason, u1_t dr, s1_t pow) {
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	4603      	mov	r3, r0
 8002e40:	71fb      	strb	r3, [r7, #7]
 8002e42:	460b      	mov	r3, r1
 8002e44:	71bb      	strb	r3, [r7, #6]
 8002e46:	4613      	mov	r3, r2
 8002e48:	717b      	strb	r3, [r7, #5]
                        e_.dr        = dr|DR_PAGE,
                        e_.txpow     = pow,
                        e_.prevdr    = LMIC.datarate|DR_PAGE,
                        e_.prevtxpow = LMIC.adrTxPow));
    
    if( pow != KEEP_TXPOW )
 8002e4a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002e4e:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8002e52:	d003      	beq.n	8002e5c <setDrTxpow+0x24>
        LMIC.adrTxPow = pow;
 8002e54:	4a0e      	ldr	r2, [pc, #56]	@ (8002e90 <setDrTxpow+0x58>)
 8002e56:	797b      	ldrb	r3, [r7, #5]
 8002e58:	f882 30af 	strb.w	r3, [r2, #175]	@ 0xaf
    if( LMIC.datarate != dr ) {
 8002e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002e90 <setDrTxpow+0x58>)
 8002e5e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8002e62:	79ba      	ldrb	r2, [r7, #6]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d00c      	beq.n	8002e82 <setDrTxpow+0x4a>
        LMIC.datarate = dr;
 8002e68:	4a09      	ldr	r2, [pc, #36]	@ (8002e90 <setDrTxpow+0x58>)
 8002e6a:	79bb      	ldrb	r3, [r7, #6]
 8002e6c:	f882 30b0 	strb.w	r3, [r2, #176]	@ 0xb0
        DO_DEVDB(LMIC.datarate,datarate);
        LMIC.opmode |= OP_NEXTCHNL;
 8002e70:	4b07      	ldr	r3, [pc, #28]	@ (8002e90 <setDrTxpow+0x58>)
 8002e72:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8002e76:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	4b04      	ldr	r3, [pc, #16]	@ (8002e90 <setDrTxpow+0x58>)
 8002e7e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    }
}
 8002e82:	bf00      	nop
 8002e84:	370c      	adds	r7, #12
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
 8002e8e:	bf00      	nop
 8002e90:	20000260 	.word	0x20000260

08002e94 <initDefaultChannels>:
    // Default operational frequencies
    EU868_F1|BAND_CENTI, EU868_F2|BAND_CENTI, EU868_F3|BAND_CENTI,
    EU868_F4|BAND_MILLI, EU868_F5|BAND_MILLI, EU868_F6|BAND_DECI
};

static void initDefaultChannels (bit_t join) {
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b084      	sub	sp, #16
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	71fb      	strb	r3, [r7, #7]
    os_clearMem(&LMIC.channelFreq, sizeof(LMIC.channelFreq));
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	483a      	ldr	r0, [pc, #232]	@ (8002f8c <initDefaultChannels+0xf8>)
 8002ea4:	f00b faff 	bl	800e4a6 <memset>
    os_clearMem(&LMIC.channelDrMap, sizeof(LMIC.channelDrMap));
 8002ea8:	2220      	movs	r2, #32
 8002eaa:	2100      	movs	r1, #0
 8002eac:	4838      	ldr	r0, [pc, #224]	@ (8002f90 <initDefaultChannels+0xfc>)
 8002eae:	f00b fafa 	bl	800e4a6 <memset>
    os_clearMem(&LMIC.bands, sizeof(LMIC.bands));
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	2100      	movs	r1, #0
 8002eb6:	4837      	ldr	r0, [pc, #220]	@ (8002f94 <initDefaultChannels+0x100>)
 8002eb8:	f00b faf5 	bl	800e4a6 <memset>

    LMIC.channelMap = (1 << NUM_DEFAULT_CHANNELS) - 1;
 8002ebc:	4b36      	ldr	r3, [pc, #216]	@ (8002f98 <initDefaultChannels+0x104>)
 8002ebe:	223f      	movs	r2, #63	@ 0x3f
 8002ec0:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    u1_t su = join ? 0 : NUM_DEFAULT_CHANNELS;
 8002ec4:	79fb      	ldrb	r3, [r7, #7]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <initDefaultChannels+0x3a>
 8002eca:	2300      	movs	r3, #0
 8002ecc:	e000      	b.n	8002ed0 <initDefaultChannels+0x3c>
 8002ece:	2306      	movs	r3, #6
 8002ed0:	73fb      	strb	r3, [r7, #15]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	73bb      	strb	r3, [r7, #14]
 8002ed6:	e014      	b.n	8002f02 <initDefaultChannels+0x6e>
        LMIC.channelFreq[fu]  = iniChannelFreq[su];
 8002ed8:	7bfa      	ldrb	r2, [r7, #15]
 8002eda:	7bbb      	ldrb	r3, [r7, #14]
 8002edc:	492f      	ldr	r1, [pc, #188]	@ (8002f9c <initDefaultChannels+0x108>)
 8002ede:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8002ee2:	492d      	ldr	r1, [pc, #180]	@ (8002f98 <initDefaultChannels+0x104>)
 8002ee4:	3310      	adds	r3, #16
 8002ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LMIC.channelDrMap[fu] = DR_RANGE_MAP(DR_SF12,DR_SF7);
 8002eea:	7bbb      	ldrb	r3, [r7, #14]
 8002eec:	4a2a      	ldr	r2, [pc, #168]	@ (8002f98 <initDefaultChannels+0x104>)
 8002eee:	3340      	adds	r3, #64	@ 0x40
 8002ef0:	213f      	movs	r1, #63	@ 0x3f
 8002ef2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for( u1_t fu=0; fu<NUM_DEFAULT_CHANNELS; fu++,su++ ) {
 8002ef6:	7bbb      	ldrb	r3, [r7, #14]
 8002ef8:	3301      	adds	r3, #1
 8002efa:	73bb      	strb	r3, [r7, #14]
 8002efc:	7bfb      	ldrb	r3, [r7, #15]
 8002efe:	3301      	adds	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
 8002f02:	7bbb      	ldrb	r3, [r7, #14]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d9e7      	bls.n	8002ed8 <initDefaultChannels+0x44>
//    if( !join ) {
//        LMIC.channelDrMap[5] = DR_RANGE_MAP(DR_SF12,DR_SF7);
//        LMIC.channelDrMap[1] = DR_RANGE_MAP(DR_SF12,DR_FSK);
//    }

    LMIC.bands[BAND_MILLI].txcap    = 1000;  // 0.1%
 8002f08:	4b23      	ldr	r3, [pc, #140]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002f0e:	841a      	strh	r2, [r3, #32]
    LMIC.bands[BAND_MILLI].txpow    = 14;
 8002f10:	4b21      	ldr	r3, [pc, #132]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f12:	220e      	movs	r2, #14
 8002f14:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
    LMIC.bands[BAND_MILLI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002f18:	f003 f928 	bl	800616c <radio_rand1>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	4b1c      	ldr	r3, [pc, #112]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f26:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23
    LMIC.bands[BAND_CENTI].txcap    = 100;   // 1%
 8002f2a:	4b1b      	ldr	r3, [pc, #108]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f2c:	2264      	movs	r2, #100	@ 0x64
 8002f2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    LMIC.bands[BAND_CENTI].txpow    = 14;
 8002f30:	4b19      	ldr	r3, [pc, #100]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f32:	220e      	movs	r2, #14
 8002f34:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    LMIC.bands[BAND_CENTI].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002f38:	f003 f918 	bl	800616c <radio_rand1>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	b2da      	uxtb	r2, r3
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f46:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
    LMIC.bands[BAND_DECI ].txcap    = 10;    // 10%
 8002f4a:	4b13      	ldr	r3, [pc, #76]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f4c:	220a      	movs	r2, #10
 8002f4e:	861a      	strh	r2, [r3, #48]	@ 0x30
    LMIC.bands[BAND_DECI ].txpow    = 27;
 8002f50:	4b11      	ldr	r3, [pc, #68]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f52:	221b      	movs	r2, #27
 8002f54:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    LMIC.bands[BAND_DECI ].lastchnl = os_getRndU1() % MAX_CHANNELS;
 8002f58:	f003 f908 	bl	800616c <radio_rand1>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	b2da      	uxtb	r2, r3
 8002f64:	4b0c      	ldr	r3, [pc, #48]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f66:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    LMIC.bands[BAND_MILLI].avail = 
    LMIC.bands[BAND_CENTI].avail =
    LMIC.bands[BAND_DECI ].avail = os_getTime();
 8002f6a:	f002 fbd5 	bl	8005718 <os_getTime>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	4a09      	ldr	r2, [pc, #36]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f72:	6353      	str	r3, [r2, #52]	@ 0x34
 8002f74:	4b08      	ldr	r3, [pc, #32]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    LMIC.bands[BAND_CENTI].avail =
 8002f78:	4a07      	ldr	r2, [pc, #28]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
    LMIC.bands[BAND_MILLI].avail = 
 8002f80:	4a05      	ldr	r2, [pc, #20]	@ (8002f98 <initDefaultChannels+0x104>)
 8002f82:	6253      	str	r3, [r2, #36]	@ 0x24
}
 8002f84:	bf00      	nop
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	200002a0 	.word	0x200002a0
 8002f90:	200002e0 	.word	0x200002e0
 8002f94:	20000280 	.word	0x20000280
 8002f98:	20000260 	.word	0x20000260
 8002f9c:	08010a40 	.word	0x08010a40

08002fa0 <LMIC_setupChannel>:
    b->avail = os_getTime();
    b->lastchnl = os_getRndU1() % MAX_CHANNELS;
    return 1;
}

bit_t LMIC_setupChannel (u1_t chidx, u4_t freq, u2_t drmap, s1_t band) {
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6039      	str	r1, [r7, #0]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	461a      	mov	r2, r3
 8002fac:	4603      	mov	r3, r0
 8002fae:	71fb      	strb	r3, [r7, #7]
 8002fb0:	460b      	mov	r3, r1
 8002fb2:	80bb      	strh	r3, [r7, #4]
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	71bb      	strb	r3, [r7, #6]
    if( chidx >= MAX_CHANNELS )
 8002fb8:	79fb      	ldrb	r3, [r7, #7]
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	d901      	bls.n	8002fc2 <LMIC_setupChannel+0x22>
        return 0;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	e054      	b.n	800306c <LMIC_setupChannel+0xcc>
    if( band == -1 ) {
 8002fc2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fca:	d121      	bne.n	8003010 <LMIC_setupChannel+0x70>
        if( freq >= 869400000 && freq <= 869650000 )
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	4a2a      	ldr	r2, [pc, #168]	@ (8003078 <LMIC_setupChannel+0xd8>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d908      	bls.n	8002fe6 <LMIC_setupChannel+0x46>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	4a29      	ldr	r2, [pc, #164]	@ (800307c <LMIC_setupChannel+0xdc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d804      	bhi.n	8002fe6 <LMIC_setupChannel+0x46>
            freq |= BAND_DECI;   // 10% 27dBm
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	f043 0302 	orr.w	r3, r3, #2
 8002fe2:	603b      	str	r3, [r7, #0]
 8002fe4:	e021      	b.n	800302a <LMIC_setupChannel+0x8a>
        else if( (freq >= 868000000 && freq <= 868600000) ||
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	4a25      	ldr	r2, [pc, #148]	@ (8003080 <LMIC_setupChannel+0xe0>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d903      	bls.n	8002ff6 <LMIC_setupChannel+0x56>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	4a24      	ldr	r2, [pc, #144]	@ (8003084 <LMIC_setupChannel+0xe4>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d907      	bls.n	8003006 <LMIC_setupChannel+0x66>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	4a23      	ldr	r2, [pc, #140]	@ (8003088 <LMIC_setupChannel+0xe8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d315      	bcc.n	800302a <LMIC_setupChannel+0x8a>
                 (freq >= 869700000 && freq <= 870000000)  )
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	4a22      	ldr	r2, [pc, #136]	@ (800308c <LMIC_setupChannel+0xec>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d811      	bhi.n	800302a <LMIC_setupChannel+0x8a>
            freq |= BAND_CENTI;  // 1% 14dBm 
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	603b      	str	r3, [r7, #0]
 800300e:	e00c      	b.n	800302a <LMIC_setupChannel+0x8a>
        else 
            freq |= BAND_MILLI;  // 0.1% 14dBm
    } else {
        if( band > BAND_AUX ) return 0;
 8003010:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003014:	2b03      	cmp	r3, #3
 8003016:	dd01      	ble.n	800301c <LMIC_setupChannel+0x7c>
 8003018:	2300      	movs	r3, #0
 800301a:	e027      	b.n	800306c <LMIC_setupChannel+0xcc>
        freq = (freq&~3) | band;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f023 0203 	bic.w	r2, r3, #3
 8003022:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8003026:	4313      	orrs	r3, r2
 8003028:	603b      	str	r3, [r7, #0]
    }
    LMIC.channelFreq [chidx] = freq;
 800302a:	79fb      	ldrb	r3, [r7, #7]
 800302c:	4918      	ldr	r1, [pc, #96]	@ (8003090 <LMIC_setupChannel+0xf0>)
 800302e:	3310      	adds	r3, #16
 8003030:	683a      	ldr	r2, [r7, #0]
 8003032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    LMIC.channelDrMap[chidx] = drmap==0 ? DR_RANGE_MAP(DR_SF12,DR_SF7) : drmap;
 8003036:	88bb      	ldrh	r3, [r7, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <LMIC_setupChannel+0xa0>
 800303c:	88ba      	ldrh	r2, [r7, #4]
 800303e:	e000      	b.n	8003042 <LMIC_setupChannel+0xa2>
 8003040:	223f      	movs	r2, #63	@ 0x3f
 8003042:	79fb      	ldrb	r3, [r7, #7]
 8003044:	4912      	ldr	r1, [pc, #72]	@ (8003090 <LMIC_setupChannel+0xf0>)
 8003046:	3340      	adds	r3, #64	@ 0x40
 8003048:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    LMIC.channelMap |= 1<<chidx;  // enabled right away
 800304c:	4b10      	ldr	r3, [pc, #64]	@ (8003090 <LMIC_setupChannel+0xf0>)
 800304e:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 8003052:	b21a      	sxth	r2, r3
 8003054:	79fb      	ldrb	r3, [r7, #7]
 8003056:	2101      	movs	r1, #1
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	b21b      	sxth	r3, r3
 800305e:	4313      	orrs	r3, r2
 8003060:	b21b      	sxth	r3, r3
 8003062:	b29a      	uxth	r2, r3
 8003064:	4b0a      	ldr	r3, [pc, #40]	@ (8003090 <LMIC_setupChannel+0xf0>)
 8003066:	f8a3 20a0 	strh.w	r2, [r3, #160]	@ 0xa0
    return 1;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	33d1fdbf 	.word	0x33d1fdbf
 800307c:	33d5ce50 	.word	0x33d5ce50
 8003080:	33bca0ff 	.word	0x33bca0ff
 8003084:	33c5c8c0 	.word	0x33c5c8c0
 8003088:	33d691a0 	.word	0x33d691a0
 800308c:	33db2580 	.word	0x33db2580
 8003090:	20000260 	.word	0x20000260

08003094 <convFreq>:
    LMIC.channelFreq[channel] = 0;
    LMIC.channelDrMap[channel] = 0;
    LMIC.channelMap &= ~(1<<channel);
}

static u4_t convFreq (xref2u1_t ptr) {
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
    u4_t freq = (os_rlsbf4(ptr-1) >> 8) * 100;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	4618      	mov	r0, r3
 80030a2:	f7ff f9c3 	bl	800242c <os_rlsbf4>
 80030a6:	4603      	mov	r3, r0
 80030a8:	0a1b      	lsrs	r3, r3, #8
 80030aa:	2264      	movs	r2, #100	@ 0x64
 80030ac:	fb02 f303 	mul.w	r3, r2, r3
 80030b0:	60fb      	str	r3, [r7, #12]
    if( freq < EU868_FREQ_MIN || freq > EU868_FREQ_MAX )
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a06      	ldr	r2, [pc, #24]	@ (80030d0 <convFreq+0x3c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d303      	bcc.n	80030c2 <convFreq+0x2e>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a05      	ldr	r2, [pc, #20]	@ (80030d4 <convFreq+0x40>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d901      	bls.n	80030c6 <convFreq+0x32>
        freq = 0;
 80030c2:	2300      	movs	r3, #0
 80030c4:	60fb      	str	r3, [r7, #12]
    return freq;
 80030c6:	68fb      	ldr	r3, [r7, #12]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	337055c0 	.word	0x337055c0
 80030d4:	33db2580 	.word	0x33db2580

080030d8 <mapChannels>:

static u1_t mapChannels (u1_t chpage, u2_t chmap) {
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	460a      	mov	r2, r1
 80030e2:	71fb      	strb	r3, [r7, #7]
 80030e4:	4613      	mov	r3, r2
 80030e6:	80bb      	strh	r3, [r7, #4]
    // Bad page, disable all channel, enable non-existent
    if( chpage != 0 || chmap==0 || (chmap & ~LMIC.channelMap) != 0 )
 80030e8:	79fb      	ldrb	r3, [r7, #7]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10a      	bne.n	8003104 <mapChannels+0x2c>
 80030ee:	88bb      	ldrh	r3, [r7, #4]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d007      	beq.n	8003104 <mapChannels+0x2c>
 80030f4:	88ba      	ldrh	r2, [r7, #4]
 80030f6:	4b1c      	ldr	r3, [pc, #112]	@ (8003168 <mapChannels+0x90>)
 80030f8:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 80030fc:	43db      	mvns	r3, r3
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <mapChannels+0x30>
        return 0;  // illegal input
 8003104:	2300      	movs	r3, #0
 8003106:	e028      	b.n	800315a <mapChannels+0x82>
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8003108:	2300      	movs	r3, #0
 800310a:	73fb      	strb	r3, [r7, #15]
 800310c:	e01d      	b.n	800314a <mapChannels+0x72>
        if( (chmap & (1<<chnl)) != 0 && LMIC.channelFreq[chnl] == 0 )
 800310e:	88ba      	ldrh	r2, [r7, #4]
 8003110:	7bfb      	ldrb	r3, [r7, #15]
 8003112:	fa42 f303 	asr.w	r3, r2, r3
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <mapChannels+0x6c>
 800311e:	7bfb      	ldrb	r3, [r7, #15]
 8003120:	4a11      	ldr	r2, [pc, #68]	@ (8003168 <mapChannels+0x90>)
 8003122:	3310      	adds	r3, #16
 8003124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d10b      	bne.n	8003144 <mapChannels+0x6c>
            chmap &= ~(1<<chnl); // ignore - channel is not defined
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2201      	movs	r2, #1
 8003130:	fa02 f303 	lsl.w	r3, r2, r3
 8003134:	b21b      	sxth	r3, r3
 8003136:	43db      	mvns	r3, r3
 8003138:	b21a      	sxth	r2, r3
 800313a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800313e:	4013      	ands	r3, r2
 8003140:	b21b      	sxth	r3, r3
 8003142:	80bb      	strh	r3, [r7, #4]
    for( u1_t chnl=0; chnl<MAX_CHANNELS; chnl++ ) {
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	3301      	adds	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	7bfb      	ldrb	r3, [r7, #15]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d9de      	bls.n	800310e <mapChannels+0x36>
    }
    LMIC.channelMap = chmap;
 8003150:	4a05      	ldr	r2, [pc, #20]	@ (8003168 <mapChannels+0x90>)
 8003152:	88bb      	ldrh	r3, [r7, #4]
 8003154:	f8a2 30a0 	strh.w	r3, [r2, #160]	@ 0xa0
    return 1;
 8003158:	2301      	movs	r3, #1
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
 8003166:	bf00      	nop
 8003168:	20000260 	.word	0x20000260

0800316c <updateTx>:


static void updateTx (ostime_t txbeg) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
    u4_t freq = LMIC.channelFreq[LMIC.txChnl];
 8003174:	4b21      	ldr	r3, [pc, #132]	@ (80031fc <updateTx+0x90>)
 8003176:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 800317a:	4a20      	ldr	r2, [pc, #128]	@ (80031fc <updateTx+0x90>)
 800317c:	3310      	adds	r3, #16
 800317e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003182:	617b      	str	r3, [r7, #20]
    // Update global/band specific duty cycle stats
    ostime_t airtime = calcAirTime(LMIC.rps, LMIC.dataLen);
 8003184:	4b1d      	ldr	r3, [pc, #116]	@ (80031fc <updateTx+0x90>)
 8003186:	89db      	ldrh	r3, [r3, #14]
 8003188:	4a1c      	ldr	r2, [pc, #112]	@ (80031fc <updateTx+0x90>)
 800318a:	f892 2147 	ldrb.w	r2, [r2, #327]	@ 0x147
 800318e:	4611      	mov	r1, r2
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff fba3 	bl	80028dc <calcAirTime>
 8003196:	6138      	str	r0, [r7, #16]
    // Update channel/global duty cycle stats
    xref2band_t band = &LMIC.bands[freq & 0x3];
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3304      	adds	r3, #4
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	4a16      	ldr	r2, [pc, #88]	@ (80031fc <updateTx+0x90>)
 80031a4:	4413      	add	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]
    LMIC.freq  = freq & ~(u4_t)3;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	4a13      	ldr	r2, [pc, #76]	@ (80031fc <updateTx+0x90>)
 80031b0:	6093      	str	r3, [r2, #8]
    LMIC.txpow = band->txpow;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80031b8:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <updateTx+0x90>)
 80031ba:	749a      	strb	r2, [r3, #18]
    band->avail = txbeg + airtime * band->txcap;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	fb03 f202 	mul.w	r2, r3, r2
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	441a      	add	r2, r3
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	605a      	str	r2, [r3, #4]
    if( LMIC.globalDutyRate != 0 )
 80031d0:	4b0a      	ldr	r3, [pc, #40]	@ (80031fc <updateTx+0x90>)
 80031d2:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d00b      	beq.n	80031f2 <updateTx+0x86>
        LMIC.globalDutyAvail = txbeg + (airtime<<LMIC.globalDutyRate);
 80031da:	4b08      	ldr	r3, [pc, #32]	@ (80031fc <updateTx+0x90>)
 80031dc:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 80031e0:	461a      	mov	r2, r3
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	fa03 f202 	lsl.w	r2, r3, r2
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	4a03      	ldr	r2, [pc, #12]	@ (80031fc <updateTx+0x90>)
 80031ee:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
}
 80031f2:	bf00      	nop
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000260 	.word	0x20000260

08003200 <nextTx>:

static ostime_t nextTx (ostime_t now) {
 8003200:	b480      	push	{r7}
 8003202:	b087      	sub	sp, #28
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
    u1_t bmap=0xF;
 8003208:	230f      	movs	r3, #15
 800320a:	75fb      	strb	r3, [r7, #23]
    do {
        ostime_t mintime = now + /*10h*/36000*OSTICKS_PER_SEC;
 800320c:	687a      	ldr	r2, [r7, #4]
 800320e:	4b48      	ldr	r3, [pc, #288]	@ (8003330 <nextTx+0x130>)
 8003210:	4413      	add	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        u1_t band=0;
 8003214:	2300      	movs	r3, #0
 8003216:	73fb      	strb	r3, [r7, #15]
        for( u1_t bi=0; bi<4; bi++ ) {
 8003218:	2300      	movs	r3, #0
 800321a:	73bb      	strb	r3, [r7, #14]
 800321c:	e01d      	b.n	800325a <nextTx+0x5a>
            if( (bmap & (1<<bi)) && mintime - LMIC.bands[bi].avail > 0 )
 800321e:	7dfa      	ldrb	r2, [r7, #23]
 8003220:	7bbb      	ldrb	r3, [r7, #14]
 8003222:	fa42 f303 	asr.w	r3, r2, r3
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d012      	beq.n	8003254 <nextTx+0x54>
 800322e:	7bbb      	ldrb	r3, [r7, #14]
 8003230:	4a40      	ldr	r2, [pc, #256]	@ (8003334 <nextTx+0x134>)
 8003232:	3304      	adds	r3, #4
 8003234:	00db      	lsls	r3, r3, #3
 8003236:	4413      	add	r3, r2
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	693a      	ldr	r2, [r7, #16]
 800323c:	1ad3      	subs	r3, r2, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	dd08      	ble.n	8003254 <nextTx+0x54>
                mintime = LMIC.bands[band = bi].avail;
 8003242:	7bbb      	ldrb	r3, [r7, #14]
 8003244:	73fb      	strb	r3, [r7, #15]
 8003246:	7bfb      	ldrb	r3, [r7, #15]
 8003248:	4a3a      	ldr	r2, [pc, #232]	@ (8003334 <nextTx+0x134>)
 800324a:	3304      	adds	r3, #4
 800324c:	00db      	lsls	r3, r3, #3
 800324e:	4413      	add	r3, r2
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	613b      	str	r3, [r7, #16]
        for( u1_t bi=0; bi<4; bi++ ) {
 8003254:	7bbb      	ldrb	r3, [r7, #14]
 8003256:	3301      	adds	r3, #1
 8003258:	73bb      	strb	r3, [r7, #14]
 800325a:	7bbb      	ldrb	r3, [r7, #14]
 800325c:	2b03      	cmp	r3, #3
 800325e:	d9de      	bls.n	800321e <nextTx+0x1e>
        }
        // Find next channel in given band
        u1_t chnl = LMIC.bands[band].lastchnl;
 8003260:	7bfb      	ldrb	r3, [r7, #15]
 8003262:	4a34      	ldr	r2, [pc, #208]	@ (8003334 <nextTx+0x134>)
 8003264:	3304      	adds	r3, #4
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	78db      	ldrb	r3, [r3, #3]
 800326c:	737b      	strb	r3, [r7, #13]
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 800326e:	2300      	movs	r3, #0
 8003270:	733b      	strb	r3, [r7, #12]
 8003272:	e042      	b.n	80032fa <nextTx+0xfa>
            if( (chnl = (chnl+1)) >= MAX_CHANNELS )
 8003274:	7b7b      	ldrb	r3, [r7, #13]
 8003276:	3301      	adds	r3, #1
 8003278:	737b      	strb	r3, [r7, #13]
 800327a:	7b7b      	ldrb	r3, [r7, #13]
 800327c:	2b0f      	cmp	r3, #15
 800327e:	d902      	bls.n	8003286 <nextTx+0x86>
                chnl -=  MAX_CHANNELS;
 8003280:	7b7b      	ldrb	r3, [r7, #13]
 8003282:	3b10      	subs	r3, #16
 8003284:	737b      	strb	r3, [r7, #13]
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 8003286:	4b2b      	ldr	r3, [pc, #172]	@ (8003334 <nextTx+0x134>)
 8003288:	f8b3 30a0 	ldrh.w	r3, [r3, #160]	@ 0xa0
 800328c:	461a      	mov	r2, r3
 800328e:	7b7b      	ldrb	r3, [r7, #13]
 8003290:	fa42 f303 	asr.w	r3, r2, r3
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	2b00      	cmp	r3, #0
 800329a:	d02b      	beq.n	80032f4 <nextTx+0xf4>
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 800329c:	7b7b      	ldrb	r3, [r7, #13]
 800329e:	4a25      	ldr	r2, [pc, #148]	@ (8003334 <nextTx+0x134>)
 80032a0:	3340      	adds	r3, #64	@ 0x40
 80032a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80032a6:	461a      	mov	r2, r3
 80032a8:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <nextTx+0x134>)
 80032aa:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	fa42 f303 	asr.w	r3, r2, r3
 80032b6:	f003 0301 	and.w	r3, r3, #1
            if( (LMIC.channelMap & (1<<chnl)) != 0  &&  // channel enabled
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01a      	beq.n	80032f4 <nextTx+0xf4>
                band == (LMIC.channelFreq[chnl] & 0x3) ) { // in selected band
 80032be:	7bfa      	ldrb	r2, [r7, #15]
 80032c0:	7b7b      	ldrb	r3, [r7, #13]
 80032c2:	491c      	ldr	r1, [pc, #112]	@ (8003334 <nextTx+0x134>)
 80032c4:	3310      	adds	r3, #16
 80032c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80032ca:	f003 0303 	and.w	r3, r3, #3
                (LMIC.channelDrMap[chnl] & (1<<(LMIC.datarate&0xF))) != 0  &&
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d110      	bne.n	80032f4 <nextTx+0xf4>
                LMIC.txChnl = LMIC.bands[band].lastchnl = chnl;
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	4917      	ldr	r1, [pc, #92]	@ (8003334 <nextTx+0x134>)
 80032d6:	1d13      	adds	r3, r2, #4
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	7b79      	ldrb	r1, [r7, #13]
 80032de:	70d9      	strb	r1, [r3, #3]
 80032e0:	4914      	ldr	r1, [pc, #80]	@ (8003334 <nextTx+0x134>)
 80032e2:	1d13      	adds	r3, r2, #4
 80032e4:	00db      	lsls	r3, r3, #3
 80032e6:	440b      	add	r3, r1
 80032e8:	78da      	ldrb	r2, [r3, #3]
 80032ea:	4b12      	ldr	r3, [pc, #72]	@ (8003334 <nextTx+0x134>)
 80032ec:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
                return mintime;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	e016      	b.n	8003322 <nextTx+0x122>
        for( u1_t ci=0; ci<MAX_CHANNELS; ci++ ) {
 80032f4:	7b3b      	ldrb	r3, [r7, #12]
 80032f6:	3301      	adds	r3, #1
 80032f8:	733b      	strb	r3, [r7, #12]
 80032fa:	7b3b      	ldrb	r3, [r7, #12]
 80032fc:	2b0f      	cmp	r3, #15
 80032fe:	d9b9      	bls.n	8003274 <nextTx+0x74>
            }
        }
        if( (bmap &= ~(1<<band)) == 0 ) {
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2201      	movs	r2, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	b25b      	sxtb	r3, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	b25a      	sxtb	r2, r3
 800330e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003312:	4013      	ands	r3, r2
 8003314:	b25b      	sxtb	r3, r3
 8003316:	75fb      	strb	r3, [r7, #23]
 8003318:	7dfb      	ldrb	r3, [r7, #23]
 800331a:	2b00      	cmp	r3, #0
 800331c:	f47f af76 	bne.w	800320c <nextTx+0xc>
            // No feasible channel  found!
            return mintime;
 8003320:	693b      	ldr	r3, [r7, #16]
        }
    } while(1);
}
 8003322:	4618      	mov	r0, r3
 8003324:	371c      	adds	r7, #28
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	44aa2000 	.word	0x44aa2000
 8003334:	20000260 	.word	0x20000260

08003338 <setBcnRxParams>:


static void setBcnRxParams (void) {
 8003338:	b580      	push	{r7, lr}
 800333a:	af00      	add	r7, sp, #0
    LMIC.dataLen = 0;
 800333c:	4b10      	ldr	r3, [pc, #64]	@ (8003380 <setBcnRxParams+0x48>)
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.freq = LMIC.channelFreq[LMIC.bcnChnl] & ~(u4_t)3;
 8003344:	4b0e      	ldr	r3, [pc, #56]	@ (8003380 <setBcnRxParams+0x48>)
 8003346:	f893 3188 	ldrb.w	r3, [r3, #392]	@ 0x188
 800334a:	4a0d      	ldr	r2, [pc, #52]	@ (8003380 <setBcnRxParams+0x48>)
 800334c:	3310      	adds	r3, #16
 800334e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003352:	f023 0303 	bic.w	r3, r3, #3
 8003356:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <setBcnRxParams+0x48>)
 8003358:	6093      	str	r3, [r2, #8]
    LMIC.rps  = setIh(setNocrc(dndr2rps((dr_t)DR_BCN),1),LEN_BCN);
 800335a:	2003      	movs	r0, #3
 800335c:	f7fe fff6 	bl	800234c <dndr2rps>
 8003360:	4603      	mov	r3, r0
 8003362:	2101      	movs	r1, #1
 8003364:	4618      	mov	r0, r3
 8003366:	f7fe ffa2 	bl	80022ae <setNocrc>
 800336a:	4603      	mov	r3, r0
 800336c:	2111      	movs	r1, #17
 800336e:	4618      	mov	r0, r3
 8003370:	f7fe ffc3 	bl	80022fa <setIh>
 8003374:	4603      	mov	r3, r0
 8003376:	461a      	mov	r2, r3
 8003378:	4b01      	ldr	r3, [pc, #4]	@ (8003380 <setBcnRxParams+0x48>)
 800337a:	81da      	strh	r2, [r3, #14]
}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}
 8003380:	20000260 	.word	0x20000260

08003384 <initJoinLoop>:

#define setRx1Params() /*LMIC.freq/rps remain unchanged*/

static void initJoinLoop (void) {
 8003384:	b598      	push	{r3, r4, r7, lr}
 8003386:	af00      	add	r7, sp, #0
#if CFG_TxContinuousMode
  LMIC.txChnl = 0;
#else
    LMIC.txChnl = os_getRndU1() % NUM_DEFAULT_CHANNELS;
 8003388:	f002 fef0 	bl	800616c <radio_rand1>
 800338c:	4603      	mov	r3, r0
 800338e:	461a      	mov	r2, r3
 8003390:	4b15      	ldr	r3, [pc, #84]	@ (80033e8 <initJoinLoop+0x64>)
 8003392:	fba3 1302 	umull	r1, r3, r3, r2
 8003396:	0899      	lsrs	r1, r3, #2
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b11      	ldr	r3, [pc, #68]	@ (80033ec <initJoinLoop+0x68>)
 80033a6:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
#endif
    LMIC.adrTxPow = 14;
 80033aa:	4b10      	ldr	r3, [pc, #64]	@ (80033ec <initJoinLoop+0x68>)
 80033ac:	220e      	movs	r2, #14
 80033ae:	f883 20af 	strb.w	r2, [r3, #175]	@ 0xaf
    setDrJoin(DRCHG_SET, DR_SF7);
 80033b2:	2105      	movs	r1, #5
 80033b4:	2000      	movs	r0, #0
 80033b6:	f7ff fd2b 	bl	8002e10 <setDrJoin>
    initDefaultChannels(1);
 80033ba:	2001      	movs	r0, #1
 80033bc:	f7ff fd6a 	bl	8002e94 <initDefaultChannels>
    ASSERT((LMIC.opmode & OP_NEXTCHNL)==0);
 80033c0:	4b0a      	ldr	r3, [pc, #40]	@ (80033ec <initJoinLoop+0x68>)
 80033c2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80033c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <initJoinLoop+0x4e>
 80033ce:	f7fe fe71 	bl	80020b4 <hal_failed>
    LMIC.txend = LMIC.bands[BAND_MILLI].avail + rndDelay(8);
 80033d2:	4b06      	ldr	r3, [pc, #24]	@ (80033ec <initJoinLoop+0x68>)
 80033d4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80033d6:	2008      	movs	r0, #8
 80033d8:	f7ff fcae 	bl	8002d38 <rndDelay>
 80033dc:	4603      	mov	r3, r0
 80033de:	4423      	add	r3, r4
 80033e0:	4a02      	ldr	r2, [pc, #8]	@ (80033ec <initJoinLoop+0x68>)
 80033e2:	6013      	str	r3, [r2, #0]
}
 80033e4:	bf00      	nop
 80033e6:	bd98      	pop	{r3, r4, r7, pc}
 80033e8:	aaaaaaab 	.word	0xaaaaaaab
 80033ec:	20000260 	.word	0x20000260

080033f0 <nextJoinState>:


static ostime_t nextJoinState (void) {
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
    u1_t failed = 0;
 80033f6:	2300      	movs	r3, #0
 80033f8:	71fb      	strb	r3, [r7, #7]

    // Try 869.x and then 864.x with same DR
    // If both fail try next lower datarate
    if( ++LMIC.txChnl == NUM_DEFAULT_CHANNELS )
 80033fa:	4b30      	ldr	r3, [pc, #192]	@ (80034bc <nextJoinState+0xcc>)
 80033fc:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8003400:	3301      	adds	r3, #1
 8003402:	b2da      	uxtb	r2, r3
 8003404:	4b2d      	ldr	r3, [pc, #180]	@ (80034bc <nextJoinState+0xcc>)
 8003406:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
 800340a:	4b2c      	ldr	r3, [pc, #176]	@ (80034bc <nextJoinState+0xcc>)
 800340c:	f893 30a2 	ldrb.w	r3, [r3, #162]	@ 0xa2
 8003410:	2b06      	cmp	r3, #6
 8003412:	d103      	bne.n	800341c <nextJoinState+0x2c>
        LMIC.txChnl = 0;
 8003414:	4b29      	ldr	r3, [pc, #164]	@ (80034bc <nextJoinState+0xcc>)
 8003416:	2200      	movs	r2, #0
 8003418:	f883 20a2 	strb.w	r2, [r3, #162]	@ 0xa2
    if( (++LMIC.txCnt & 1) == 0 ) {
 800341c:	4b27      	ldr	r3, [pc, #156]	@ (80034bc <nextJoinState+0xcc>)
 800341e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003422:	3301      	adds	r3, #1
 8003424:	b2da      	uxtb	r2, r3
 8003426:	4b25      	ldr	r3, [pc, #148]	@ (80034bc <nextJoinState+0xcc>)
 8003428:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 800342c:	4b23      	ldr	r3, [pc, #140]	@ (80034bc <nextJoinState+0xcc>)
 800342e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <nextJoinState+0x70>
        // Lower DR every 2nd try (having tried 868.x and 864.x with the same DR)
        if( LMIC.datarate == DR_SF12 )
 800343a:	4b20      	ldr	r3, [pc, #128]	@ (80034bc <nextJoinState+0xcc>)
 800343c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <nextJoinState+0x5a>
            failed = 1; // we have tried all DR - signal EV_JOIN_FAILED
 8003444:	2301      	movs	r3, #1
 8003446:	71fb      	strb	r3, [r7, #7]
 8003448:	e00a      	b.n	8003460 <nextJoinState+0x70>
        else
            setDrJoin(DRCHG_NOJACC, decDR((dr_t)LMIC.datarate));
 800344a:	4b1c      	ldr	r3, [pc, #112]	@ (80034bc <nextJoinState+0xcc>)
 800344c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003450:	4618      	mov	r0, r3
 8003452:	f7fe ff8f 	bl	8002374 <decDR>
 8003456:	4603      	mov	r3, r0
 8003458:	4619      	mov	r1, r3
 800345a:	2001      	movs	r0, #1
 800345c:	f7ff fcd8 	bl	8002e10 <setDrJoin>
    }
    // Clear NEXTCHNL because join state engine controls channel hopping
    LMIC.opmode &= ~OP_NEXTCHNL;
 8003460:	4b16      	ldr	r3, [pc, #88]	@ (80034bc <nextJoinState+0xcc>)
 8003462:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003466:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800346a:	b29a      	uxth	r2, r3
 800346c:	4b13      	ldr	r3, [pc, #76]	@ (80034bc <nextJoinState+0xcc>)
 800346e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    // Move txend to randomize synchronized concurrent joins.
    // Duty cycle is based on txend.
    ostime_t time = os_getTime();
 8003472:	f002 f951 	bl	8005718 <os_getTime>
 8003476:	6038      	str	r0, [r7, #0]
    if( time - LMIC.bands[BAND_MILLI].avail < 0 )
 8003478:	4b10      	ldr	r3, [pc, #64]	@ (80034bc <nextJoinState+0xcc>)
 800347a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	da02      	bge.n	800348a <nextJoinState+0x9a>
        time = LMIC.bands[BAND_MILLI].avail;
 8003484:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <nextJoinState+0xcc>)
 8003486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003488:	603b      	str	r3, [r7, #0]
        (isTESTMODE()
         // Avoid collision with JOIN ACCEPT @ SF12 being sent by GW (but we missed it)
         ? DNW2_SAFETY_ZONE
         // Otherwise: randomize join (street lamp case):
         // SF12:255, SF11:127, .., SF7:8secs
         : DNW2_SAFETY_ZONE+rndDelay(255>>LMIC.datarate));
 800348a:	4b0c      	ldr	r3, [pc, #48]	@ (80034bc <nextJoinState+0xcc>)
 800348c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8003490:	461a      	mov	r2, r3
 8003492:	23ff      	movs	r3, #255	@ 0xff
 8003494:	4113      	asrs	r3, r2
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff fc4d 	bl	8002d38 <rndDelay>
 800349e:	4603      	mov	r3, r0
 80034a0:	f503 33bb 	add.w	r3, r3, #95744	@ 0x17600
 80034a4:	f503 7380 	add.w	r3, r3, #256	@ 0x100
    LMIC.txend = time +
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	4413      	add	r3, r2
 80034ac:	4a03      	ldr	r2, [pc, #12]	@ (80034bc <nextJoinState+0xcc>)
 80034ae:	6013      	str	r3, [r2, #0]
    // 1 - triggers EV_JOIN_FAILED event
    return failed;
 80034b0:	79fb      	ldrb	r3, [r7, #7]
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3708      	adds	r7, #8
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}
 80034ba:	bf00      	nop
 80034bc:	20000260 	.word	0x20000260

080034c0 <runEngineUpdate>:
#else
#error Unsupported frequency band!
#endif


static void runEngineUpdate (xref2osjob_t osjob) {
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
    engineUpdate();
 80034c8:	f001 fcb6 	bl	8004e38 <engineUpdate>
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <reportEvent>:


static void reportEvent (ev_t ev) {
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b082      	sub	sp, #8
 80034d8:	af00      	add	r7, sp, #0
 80034da:	4603      	mov	r3, r0
 80034dc:	71fb      	strb	r3, [r7, #7]
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = ev));
    ON_LMIC_EVENT(ev);
 80034de:	79fb      	ldrb	r3, [r7, #7]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f001 ffbf 	bl	8005464 <onEvent>
    engineUpdate();
 80034e6:	f001 fca7 	bl	8004e38 <engineUpdate>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <runReset>:


static void runReset (xref2osjob_t osjob) {
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b082      	sub	sp, #8
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	6078      	str	r0, [r7, #4]
    // Disable session
    LMIC_reset();
 80034fa:	f001 fe67 	bl	80051cc <LMIC_reset>
    LMIC_startJoining();
 80034fe:	f001 fa0f 	bl	8004920 <LMIC_startJoining>
    reportEvent(EV_RESET);
 8003502:	200c      	movs	r0, #12
 8003504:	f7ff ffe6 	bl	80034d4 <reportEvent>
}
 8003508:	bf00      	nop
 800350a:	3708      	adds	r7, #8
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <stateJustJoined>:

static void stateJustJoined (void) {
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
    LMIC.seqnoDn     = LMIC.seqnoUp = 0;
 8003514:	4b2f      	ldr	r3, [pc, #188]	@ (80035d4 <stateJustJoined+0xc4>)
 8003516:	2200      	movs	r2, #0
 8003518:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
 800351c:	4b2d      	ldr	r3, [pc, #180]	@ (80035d4 <stateJustJoined+0xc4>)
 800351e:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8003522:	4a2c      	ldr	r2, [pc, #176]	@ (80035d4 <stateJustJoined+0xc4>)
 8003524:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
    LMIC.rejoinCnt   = 0;
 8003528:	4b2a      	ldr	r3, [pc, #168]	@ (80035d4 <stateJustJoined+0xc4>)
 800352a:	2200      	movs	r2, #0
 800352c:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
    LMIC.dnConf      = LMIC.adrChanged = LMIC.ladrAns = LMIC.devsAns = 0;
 8003530:	4b28      	ldr	r3, [pc, #160]	@ (80035d4 <stateJustJoined+0xc4>)
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
 8003538:	4b26      	ldr	r3, [pc, #152]	@ (80035d4 <stateJustJoined+0xc4>)
 800353a:	f893 2126 	ldrb.w	r2, [r3, #294]	@ 0x126
 800353e:	4b25      	ldr	r3, [pc, #148]	@ (80035d4 <stateJustJoined+0xc4>)
 8003540:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
 8003544:	4b23      	ldr	r3, [pc, #140]	@ (80035d4 <stateJustJoined+0xc4>)
 8003546:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 800354a:	4b22      	ldr	r3, [pc, #136]	@ (80035d4 <stateJustJoined+0xc4>)
 800354c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
 8003550:	4b20      	ldr	r3, [pc, #128]	@ (80035d4 <stateJustJoined+0xc4>)
 8003552:	f893 2122 	ldrb.w	r2, [r3, #290]	@ 0x122
 8003556:	4b1f      	ldr	r3, [pc, #124]	@ (80035d4 <stateJustJoined+0xc4>)
 8003558:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    LMIC.moreData    = LMIC.dn2Ans = LMIC.snchAns = LMIC.dutyCapAns = 0;
 800355c:	4b1d      	ldr	r3, [pc, #116]	@ (80035d4 <stateJustJoined+0xc4>)
 800355e:	2200      	movs	r2, #0
 8003560:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
 8003564:	4b1b      	ldr	r3, [pc, #108]	@ (80035d4 <stateJustJoined+0xc4>)
 8003566:	f893 2129 	ldrb.w	r2, [r3, #297]	@ 0x129
 800356a:	4b1a      	ldr	r3, [pc, #104]	@ (80035d4 <stateJustJoined+0xc4>)
 800356c:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
 8003570:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <stateJustJoined+0xc4>)
 8003572:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 8003576:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <stateJustJoined+0xc4>)
 8003578:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
 800357c:	4b15      	ldr	r3, [pc, #84]	@ (80035d4 <stateJustJoined+0xc4>)
 800357e:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <stateJustJoined+0xc4>)
 8003584:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
    LMIC.pingSetAns  = 0;
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <stateJustJoined+0xc4>)
 800358a:	2200      	movs	r2, #0
 800358c:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    LMIC.upRepeat    = 0;
 8003590:	4b10      	ldr	r3, [pc, #64]	@ (80035d4 <stateJustJoined+0xc4>)
 8003592:	2200      	movs	r2, #0
 8003594:	f883 20ae 	strb.w	r2, [r3, #174]	@ 0xae
    LMIC.adrAckReq   = LINK_CHECK_INIT;
 8003598:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <stateJustJoined+0xc4>)
 800359a:	22f4      	movs	r2, #244	@ 0xf4
 800359c:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
    LMIC.dn2Dr       = DR_DNW2;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <stateJustJoined+0xc4>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq     = FREQ_DNW2;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <stateJustJoined+0xc4>)
 80035aa:	4a0b      	ldr	r2, [pc, #44]	@ (80035d8 <stateJustJoined+0xc8>)
 80035ac:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.bcnChnl     = CHNL_BCN;
 80035b0:	4b08      	ldr	r3, [pc, #32]	@ (80035d4 <stateJustJoined+0xc4>)
 80035b2:	2205      	movs	r2, #5
 80035b4:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
    LMIC.ping.freq   = FREQ_PING;
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <stateJustJoined+0xc4>)
 80035ba:	4a07      	ldr	r2, [pc, #28]	@ (80035d8 <stateJustJoined+0xc8>)
 80035bc:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr     = DR_PING;
 80035c0:	4b04      	ldr	r3, [pc, #16]	@ (80035d4 <stateJustJoined+0xc4>)
 80035c2:	2203      	movs	r2, #3
 80035c4:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000260 	.word	0x20000260
 80035d8:	33d3e608 	.word	0x33d3e608

080035dc <decodeBeacon>:
// ================================================================================
// Decoding frames


// Decode beacon  - do not overwrite bcninfo unless we have a match!
static int decodeBeacon (void) {
 80035dc:	b590      	push	{r4, r7, lr}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
    ASSERT(LMIC.dataLen == LEN_BCN); // implicit header RX guarantees this
 80035e2:	4b46      	ldr	r3, [pc, #280]	@ (80036fc <decodeBeacon+0x120>)
 80035e4:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80035e8:	2b11      	cmp	r3, #17
 80035ea:	d001      	beq.n	80035f0 <decodeBeacon+0x14>
 80035ec:	f7fe fd62 	bl	80020b4 <hal_failed>
    xref2u1_t d = LMIC.frame;
 80035f0:	4b43      	ldr	r3, [pc, #268]	@ (8003700 <decodeBeacon+0x124>)
 80035f2:	607b      	str	r3, [r7, #4]
    if(
#if defined CFG_eu868
        d[OFF_BCN_CRC1] != (u1_t)os_crc16(d,OFF_BCN_CRC1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	3307      	adds	r3, #7
 80035f8:	781c      	ldrb	r4, [r3, #0]
 80035fa:	2107      	movs	r1, #7
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7fe ffb0 	bl	8002562 <os_crc16>
 8003602:	4603      	mov	r3, r0
 8003604:	b2db      	uxtb	r3, r3
    if(
 8003606:	429c      	cmp	r4, r3
 8003608:	d001      	beq.n	800360e <decodeBeacon+0x32>
#elif CFG_us915
        os_rlsbf2(&d[OFF_BCN_CRC1]) != os_crc16(d,OFF_BCN_CRC1)
#endif
        )
        return 0;   // first (common) part fails CRC check
 800360a:	2300      	movs	r3, #0
 800360c:	e071      	b.n	80036f2 <decodeBeacon+0x116>
    // First set of fields is ok
    u4_t bcnnetid = os_rlsbf4(&d[OFF_BCN_NETID]) & 0xFFFFFF;
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fe ff0c 	bl	800242c <os_rlsbf4>
 8003614:	4603      	mov	r3, r0
 8003616:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800361a:	603b      	str	r3, [r7, #0]
    if( bcnnetid != LMIC.netid )
 800361c:	4b37      	ldr	r3, [pc, #220]	@ (80036fc <decodeBeacon+0x120>)
 800361e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003622:	683a      	ldr	r2, [r7, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d002      	beq.n	800362e <decodeBeacon+0x52>
        return -1;  // not the beacon we're looking for
 8003628:	f04f 33ff 	mov.w	r3, #4294967295
 800362c:	e061      	b.n	80036f2 <decodeBeacon+0x116>

    LMIC.bcninfo.flags &= ~(BCN_PARTIAL|BCN_FULL);
 800362e:	4b33      	ldr	r3, [pc, #204]	@ (80036fc <decodeBeacon+0x120>)
 8003630:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003634:	f023 0303 	bic.w	r3, r3, #3
 8003638:	b2da      	uxtb	r2, r3
 800363a:	4b30      	ldr	r3, [pc, #192]	@ (80036fc <decodeBeacon+0x120>)
 800363c:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    // Match - update bcninfo structure
    LMIC.bcninfo.snr    = LMIC.snr;
 8003640:	4b2e      	ldr	r3, [pc, #184]	@ (80036fc <decodeBeacon+0x120>)
 8003642:	f993 200d 	ldrsb.w	r2, [r3, #13]
 8003646:	4b2d      	ldr	r3, [pc, #180]	@ (80036fc <decodeBeacon+0x120>)
 8003648:	f883 2195 	strb.w	r2, [r3, #405]	@ 0x195
    LMIC.bcninfo.rssi   = LMIC.rssi;
 800364c:	4b2b      	ldr	r3, [pc, #172]	@ (80036fc <decodeBeacon+0x120>)
 800364e:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003652:	4b2a      	ldr	r3, [pc, #168]	@ (80036fc <decodeBeacon+0x120>)
 8003654:	f883 2194 	strb.w	r2, [r3, #404]	@ 0x194
    LMIC.bcninfo.txtime = LMIC.rxtime - AIRTIME_BCN_osticks;
 8003658:	4b28      	ldr	r3, [pc, #160]	@ (80036fc <decodeBeacon+0x120>)
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5a3 5390 	sub.w	r3, r3, #4608	@ 0x1200
 8003660:	3b0c      	subs	r3, #12
 8003662:	4a26      	ldr	r2, [pc, #152]	@ (80036fc <decodeBeacon+0x120>)
 8003664:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
    LMIC.bcninfo.time   = os_rlsbf4(&d[OFF_BCN_TIME]);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	3303      	adds	r3, #3
 800366c:	4618      	mov	r0, r3
 800366e:	f7fe fedd 	bl	800242c <os_rlsbf4>
 8003672:	4603      	mov	r3, r0
 8003674:	4a21      	ldr	r2, [pc, #132]	@ (80036fc <decodeBeacon+0x120>)
 8003676:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
    LMIC.bcninfo.flags |= BCN_PARTIAL;
 800367a:	4b20      	ldr	r3, [pc, #128]	@ (80036fc <decodeBeacon+0x120>)
 800367c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	b2da      	uxtb	r2, r3
 8003686:	4b1d      	ldr	r3, [pc, #116]	@ (80036fc <decodeBeacon+0x120>)
 8003688:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196

    // Check 2nd set
    if( os_rlsbf2(&d[OFF_BCN_CRC2]) != os_crc16(d,OFF_BCN_CRC2) )
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	330f      	adds	r3, #15
 8003690:	4618      	mov	r0, r3
 8003692:	f7fe feb6 	bl	8002402 <os_rlsbf2>
 8003696:	4603      	mov	r3, r0
 8003698:	461c      	mov	r4, r3
 800369a:	210f      	movs	r1, #15
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fe ff60 	bl	8002562 <os_crc16>
 80036a2:	4603      	mov	r3, r0
 80036a4:	429c      	cmp	r4, r3
 80036a6:	d001      	beq.n	80036ac <decodeBeacon+0xd0>
        return 1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e022      	b.n	80036f2 <decodeBeacon+0x116>
    // Second set of fields is ok
    LMIC.bcninfo.lat    = (s4_t)os_rlsbf4(&d[OFF_BCN_LAT-1]) >> 8; // read as signed 24-bit
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3308      	adds	r3, #8
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe febb 	bl	800242c <os_rlsbf4>
 80036b6:	4603      	mov	r3, r0
 80036b8:	121b      	asrs	r3, r3, #8
 80036ba:	4a10      	ldr	r2, [pc, #64]	@ (80036fc <decodeBeacon+0x120>)
 80036bc:	f8c2 31a0 	str.w	r3, [r2, #416]	@ 0x1a0
    LMIC.bcninfo.lon    = (s4_t)os_rlsbf4(&d[OFF_BCN_LON-1]) >> 8; // ditto
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	330b      	adds	r3, #11
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe feb1 	bl	800242c <os_rlsbf4>
 80036ca:	4603      	mov	r3, r0
 80036cc:	121b      	asrs	r3, r3, #8
 80036ce:	4a0b      	ldr	r2, [pc, #44]	@ (80036fc <decodeBeacon+0x120>)
 80036d0:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
    LMIC.bcninfo.info   = d[OFF_BCN_INFO];
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	7a1a      	ldrb	r2, [r3, #8]
 80036d8:	4b08      	ldr	r3, [pc, #32]	@ (80036fc <decodeBeacon+0x120>)
 80036da:	f883 219c 	strb.w	r2, [r3, #412]	@ 0x19c
    LMIC.bcninfo.flags |= BCN_FULL;
 80036de:	4b07      	ldr	r3, [pc, #28]	@ (80036fc <decodeBeacon+0x120>)
 80036e0:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	b2da      	uxtb	r2, r3
 80036ea:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <decodeBeacon+0x120>)
 80036ec:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
    return 2;
 80036f0:	2302      	movs	r3, #2
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd90      	pop	{r4, r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000260 	.word	0x20000260
 8003700:	200003a8 	.word	0x200003a8

08003704 <decodeFrame>:


static bit_t decodeFrame (void) {
 8003704:	b590      	push	{r4, r7, lr}
 8003706:	b09b      	sub	sp, #108	@ 0x6c
 8003708:	af02      	add	r7, sp, #8
    xref2u1_t d = LMIC.frame;
 800370a:	4b98      	ldr	r3, [pc, #608]	@ (800396c <decodeFrame+0x268>)
 800370c:	64bb      	str	r3, [r7, #72]	@ 0x48
    u1_t hdr    = d[0];
 800370e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003710:	781b      	ldrb	r3, [r3, #0]
 8003712:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    u1_t ftype  = hdr & HDR_FTYPE;
 8003716:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800371a:	f023 031f 	bic.w	r3, r3, #31
 800371e:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    int  dlen   = LMIC.dataLen;
 8003722:	4b93      	ldr	r3, [pc, #588]	@ (8003970 <decodeFrame+0x26c>)
 8003724:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003728:	643b      	str	r3, [r7, #64]	@ 0x40
    if( dlen < OFF_DAT_OPTS+4 ||
 800372a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800372c:	2b0b      	cmp	r3, #11
 800372e:	dd0d      	ble.n	800374c <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 8003730:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003734:	f003 0303 	and.w	r3, r3, #3
    if( dlen < OFF_DAT_OPTS+4 ||
 8003738:	2b00      	cmp	r3, #0
 800373a:	d107      	bne.n	800374c <decodeFrame+0x48>
        (hdr & HDR_MAJOR) != HDR_MAJOR_V1 ||
 800373c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003740:	2b60      	cmp	r3, #96	@ 0x60
 8003742:	d014      	beq.n	800376e <decodeFrame+0x6a>
        (ftype != HDR_FTYPE_DADN  &&  ftype != HDR_FTYPE_DCDN) ) {
 8003744:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003748:	2ba0      	cmp	r3, #160	@ 0xa0
 800374a:	d010      	beq.n	800376e <decodeFrame+0x6a>
        // Basic sanity checks failed
        EV(specCond, WARN, (e_.reason = EV::specCond_t::UNEXPECTED_FRAME,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = dlen < 4 ? 0 : os_rlsbf4(&d[dlen-4]),
                            e_.info2  = hdr + (dlen<<8)));
      norx:
 800374c:	bf00      	nop
 800374e:	e008      	b.n	8003762 <decodeFrame+0x5e>
    if( addr != LMIC.devaddr ) {
        EV(specCond, WARN, (e_.reason = EV::specCond_t::ALIEN_ADDRESS,
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = addr,
                            e_.info2  = LMIC.devaddr));
        goto norx;
 8003750:	bf00      	nop
 8003752:	e006      	b.n	8003762 <decodeFrame+0x5e>
    }
    if( poff > pend ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (poff-pend) + (fct<<8) + (dlen<<16)));
        goto norx;
 8003754:	bf00      	nop
 8003756:	e004      	b.n	8003762 <decodeFrame+0x5e>
        EV(spe3Cond, ERR, (e_.reason = EV::spe3Cond_t::CORRUPTED_MIC,
                           e_.eui1   = MAIN::CDEV->getEui(),
                           e_.info1  = Base::lsbf4(&d[pend]),
                           e_.info2  = seqno,
                           e_.info3  = LMIC.devaddr));
        goto norx;
 8003758:	bf00      	nop
 800375a:	e002      	b.n	8003762 <decodeFrame+0x5e>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_ROLL_OVER,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 800375c:	bf00      	nop
 800375e:	e000      	b.n	8003762 <decodeFrame+0x5e>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_OBSOLETE,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
            goto norx;
 8003760:	bf00      	nop
        LMIC.dataLen = 0;
 8003762:	4b83      	ldr	r3, [pc, #524]	@ (8003970 <decodeFrame+0x26c>)
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        return 0;
 800376a:	2300      	movs	r3, #0
 800376c:	e2f6      	b.n	8003d5c <decodeFrame+0x658>
    int  fct   = d[OFF_DAT_FCT];
 800376e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003770:	3305      	adds	r3, #5
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	63fb      	str	r3, [r7, #60]	@ 0x3c
    u4_t addr  = os_rlsbf4(&d[OFF_DAT_ADDR]);
 8003776:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003778:	3301      	adds	r3, #1
 800377a:	4618      	mov	r0, r3
 800377c:	f7fe fe56 	bl	800242c <os_rlsbf4>
 8003780:	63b8      	str	r0, [r7, #56]	@ 0x38
    u4_t seqno = os_rlsbf2(&d[OFF_DAT_SEQNO]);
 8003782:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003784:	3306      	adds	r3, #6
 8003786:	4618      	mov	r0, r3
 8003788:	f7fe fe3b 	bl	8002402 <os_rlsbf2>
 800378c:	4603      	mov	r3, r0
 800378e:	637b      	str	r3, [r7, #52]	@ 0x34
    int  olen  = fct & FCT_OPTLEN;
 8003790:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003792:	f003 030f 	and.w	r3, r3, #15
 8003796:	633b      	str	r3, [r7, #48]	@ 0x30
    int  ackup = (fct & FCT_ACK) != 0 ? 1 : 0;   // ACK last up frame
 8003798:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800379a:	115b      	asrs	r3, r3, #5
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int  poff  = OFF_DAT_OPTS+olen;
 80037a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a4:	3308      	adds	r3, #8
 80037a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int  pend  = dlen-4;  // MIC
 80037a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037aa:	3b04      	subs	r3, #4
 80037ac:	62bb      	str	r3, [r7, #40]	@ 0x28
    if( addr != LMIC.devaddr ) {
 80037ae:	4b70      	ldr	r3, [pc, #448]	@ (8003970 <decodeFrame+0x26c>)
 80037b0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80037b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d1ca      	bne.n	8003750 <decodeFrame+0x4c>
    if( poff > pend ) {
 80037ba:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80037bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037be:	429a      	cmp	r2, r3
 80037c0:	dcc8      	bgt.n	8003754 <decodeFrame+0x50>
    int port = -1;
 80037c2:	f04f 33ff 	mov.w	r3, #4294967295
 80037c6:	65bb      	str	r3, [r7, #88]	@ 0x58
    int replayConf = 0;
 80037c8:	2300      	movs	r3, #0
 80037ca:	657b      	str	r3, [r7, #84]	@ 0x54
    if( pend > poff )
 80037cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037ce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d0:	429a      	cmp	r2, r3
 80037d2:	dd07      	ble.n	80037e4 <decodeFrame+0xe0>
        port = d[poff++];
 80037d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80037d6:	1c5a      	adds	r2, r3, #1
 80037d8:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80037da:	461a      	mov	r2, r3
 80037dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80037de:	4413      	add	r3, r2
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    seqno = LMIC.seqnoDn + (u2_t)(seqno - LMIC.seqnoDn);
 80037e4:	4b62      	ldr	r3, [pc, #392]	@ (8003970 <decodeFrame+0x26c>)
 80037e6:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80037ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ec:	b291      	uxth	r1, r2
 80037ee:	4a60      	ldr	r2, [pc, #384]	@ (8003970 <decodeFrame+0x26c>)
 80037f0:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 80037f4:	b292      	uxth	r2, r2
 80037f6:	1a8a      	subs	r2, r1, r2
 80037f8:	b292      	uxth	r2, r2
 80037fa:	4413      	add	r3, r2
 80037fc:	637b      	str	r3, [r7, #52]	@ 0x34
    if( !aes_verifyMic(LMIC.nwkKey, LMIC.devaddr, seqno, /*dn*/1, d, pend) ) {
 80037fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003970 <decodeFrame+0x26c>)
 8003800:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8003804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003806:	9301      	str	r3, [sp, #4]
 8003808:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800380a:	9300      	str	r3, [sp, #0]
 800380c:	2301      	movs	r3, #1
 800380e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003810:	4858      	ldr	r0, [pc, #352]	@ (8003974 <decodeFrame+0x270>)
 8003812:	f7fe ff19 	bl	8002648 <aes_verifyMic>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d09d      	beq.n	8003758 <decodeFrame+0x54>
    if( seqno < LMIC.seqnoDn ) {
 800381c:	4b54      	ldr	r3, [pc, #336]	@ (8003970 <decodeFrame+0x26c>)
 800381e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8003822:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003824:	429a      	cmp	r2, r3
 8003826:	d219      	bcs.n	800385c <decodeFrame+0x158>
        if( (s4_t)seqno > (s4_t)LMIC.seqnoDn ) {
 8003828:	4b51      	ldr	r3, [pc, #324]	@ (8003970 <decodeFrame+0x26c>)
 800382a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800382e:	461a      	mov	r2, r3
 8003830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003832:	429a      	cmp	r2, r3
 8003834:	db92      	blt.n	800375c <decodeFrame+0x58>
        if( seqno != LMIC.seqnoDn-1 || !LMIC.dnConf || ftype != HDR_FTYPE_DCDN ) {
 8003836:	4b4e      	ldr	r3, [pc, #312]	@ (8003970 <decodeFrame+0x26c>)
 8003838:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800383c:	3b01      	subs	r3, #1
 800383e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003840:	429a      	cmp	r2, r3
 8003842:	d18d      	bne.n	8003760 <decodeFrame+0x5c>
 8003844:	4b4a      	ldr	r3, [pc, #296]	@ (8003970 <decodeFrame+0x26c>)
 8003846:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 800384a:	2b00      	cmp	r3, #0
 800384c:	d088      	beq.n	8003760 <decodeFrame+0x5c>
 800384e:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8003852:	2ba0      	cmp	r3, #160	@ 0xa0
 8003854:	d184      	bne.n	8003760 <decodeFrame+0x5c>
        }
        // Replay of previous sequence number allowed only if
        // previous frame and repeated both requested confirmation
        replayConf = 1;
 8003856:	2301      	movs	r3, #1
 8003858:	657b      	str	r3, [r7, #84]	@ 0x54
 800385a:	e00e      	b.n	800387a <decodeFrame+0x176>
            EV(specCond, INFO, (e_.reason = EV::specCond_t::DNSEQNO_SKIP,
                                e_.eui    = MAIN::CDEV->getEui(),
                                e_.info   = LMIC.seqnoDn, 
                                e_.info2  = seqno));
        }
        LMIC.seqnoDn = seqno+1;  // next number to be expected
 800385c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800385e:	3301      	adds	r3, #1
 8003860:	4a43      	ldr	r2, [pc, #268]	@ (8003970 <decodeFrame+0x26c>)
 8003862:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118
        DO_DEVDB(LMIC.seqnoDn,seqnoDn);
        // DN frame requested confirmation - provide ACK once with next UP frame
        LMIC.dnConf = (ftype == HDR_FTYPE_DCDN ? FCT_ACK : 0);
 8003866:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800386a:	2ba0      	cmp	r3, #160	@ 0xa0
 800386c:	d101      	bne.n	8003872 <decodeFrame+0x16e>
 800386e:	2220      	movs	r2, #32
 8003870:	e000      	b.n	8003874 <decodeFrame+0x170>
 8003872:	2200      	movs	r2, #0
 8003874:	4b3e      	ldr	r3, [pc, #248]	@ (8003970 <decodeFrame+0x26c>)
 8003876:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
    }

    if( LMIC.dnConf || (fct & FCT_MORE) )
 800387a:	4b3d      	ldr	r3, [pc, #244]	@ (8003970 <decodeFrame+0x26c>)
 800387c:	f893 3120 	ldrb.w	r3, [r3, #288]	@ 0x120
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <decodeFrame+0x18a>
 8003884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d008      	beq.n	80038a0 <decodeFrame+0x19c>
        LMIC.opmode |= OP_POLL;
 800388e:	4b38      	ldr	r3, [pc, #224]	@ (8003970 <decodeFrame+0x26c>)
 8003890:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003894:	f043 0310 	orr.w	r3, r3, #16
 8003898:	b29a      	uxth	r2, r3
 800389a:	4b35      	ldr	r3, [pc, #212]	@ (8003970 <decodeFrame+0x26c>)
 800389c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac

    // We heard from network
    LMIC.adrChanged = LMIC.rejoinCnt = 0;
 80038a0:	4b33      	ldr	r3, [pc, #204]	@ (8003970 <decodeFrame+0x26c>)
 80038a2:	2200      	movs	r2, #0
 80038a4:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 80038a8:	4b31      	ldr	r3, [pc, #196]	@ (8003970 <decodeFrame+0x26c>)
 80038aa:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 80038ae:	4b30      	ldr	r3, [pc, #192]	@ (8003970 <decodeFrame+0x26c>)
 80038b0:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    if( LMIC.adrAckReq != LINK_CHECK_OFF )
 80038b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003970 <decodeFrame+0x26c>)
 80038b6:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 80038ba:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 80038be:	d003      	beq.n	80038c8 <decodeFrame+0x1c4>
        LMIC.adrAckReq = LINK_CHECK_INIT;
 80038c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003970 <decodeFrame+0x26c>)
 80038c2:	22f4      	movs	r2, #244	@ 0xf4
 80038c4:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121

    // Process OPTS
    int m = LMIC.rssi - RSSI_OFF - getSensitivity(LMIC.rps);
 80038c8:	4b29      	ldr	r3, [pc, #164]	@ (8003970 <decodeFrame+0x26c>)
 80038ca:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038ce:	f1a3 0440 	sub.w	r4, r3, #64	@ 0x40
 80038d2:	4b27      	ldr	r3, [pc, #156]	@ (8003970 <decodeFrame+0x26c>)
 80038d4:	89db      	ldrh	r3, [r3, #14]
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7fe ffe0 	bl	800289c <getSensitivity>
 80038dc:	4603      	mov	r3, r0
 80038de:	1ae3      	subs	r3, r4, r3
 80038e0:	627b      	str	r3, [r7, #36]	@ 0x24
    LMIC.margin = m < 0 ? 0 : m > 254 ? 254 : m;
 80038e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	db05      	blt.n	80038f4 <decodeFrame+0x1f0>
 80038e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ea:	2bfe      	cmp	r3, #254	@ 0xfe
 80038ec:	bfa8      	it	ge
 80038ee:	23fe      	movge	r3, #254	@ 0xfe
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	e000      	b.n	80038f6 <decodeFrame+0x1f2>
 80038f4:	2300      	movs	r3, #0
 80038f6:	4a1e      	ldr	r2, [pc, #120]	@ (8003970 <decodeFrame+0x26c>)
 80038f8:	f882 3124 	strb.w	r3, [r2, #292]	@ 0x124

    xref2u1_t opts = &d[OFF_DAT_OPTS];
 80038fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80038fe:	3308      	adds	r3, #8
 8003900:	623b      	str	r3, [r7, #32]
    int oidx = 0;
 8003902:	2300      	movs	r3, #0
 8003904:	653b      	str	r3, [r7, #80]	@ 0x50
    while( oidx < olen ) {
 8003906:	e1b5      	b.n	8003c74 <decodeFrame+0x570>
        switch( opts[oidx] ) {
 8003908:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800390a:	6a3a      	ldr	r2, [r7, #32]
 800390c:	4413      	add	r3, r2
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	3b02      	subs	r3, #2
 8003912:	2b10      	cmp	r3, #16
 8003914:	f200 81ba 	bhi.w	8003c8c <decodeFrame+0x588>
 8003918:	a201      	add	r2, pc, #4	@ (adr r2, 8003920 <decodeFrame+0x21c>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003965 	.word	0x08003965
 8003924:	08003979 	.word	0x08003979
 8003928:	08003ad7 	.word	0x08003ad7
 800392c:	08003a53 	.word	0x08003a53
 8003930:	08003a43 	.word	0x08003a43
 8003934:	08003b25 	.word	0x08003b25
 8003938:	08003c8d 	.word	0x08003c8d
 800393c:	08003c8d 	.word	0x08003c8d
 8003940:	08003c8d 	.word	0x08003c8d
 8003944:	08003c8d 	.word	0x08003c8d
 8003948:	08003c8d 	.word	0x08003c8d
 800394c:	08003c8d 	.word	0x08003c8d
 8003950:	08003c8d 	.word	0x08003c8d
 8003954:	08003c8d 	.word	0x08003c8d
 8003958:	08003c8d 	.word	0x08003c8d
 800395c:	08003bb1 	.word	0x08003bb1
 8003960:	08003bf3 	.word	0x08003bf3
        case MCMD_LCHK_ANS: {
            //int gwmargin = opts[oidx+1];
            //int ngws = opts[oidx+2];
            oidx += 3;
 8003964:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003966:	3303      	adds	r3, #3
 8003968:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 800396a:	e183      	b.n	8003c74 <decodeFrame+0x570>
 800396c:	200003a8 	.word	0x200003a8
 8003970:	20000260 	.word	0x20000260
 8003974:	20000354 	.word	0x20000354
        }
        case MCMD_LADR_REQ: {
            u1_t p1     = opts[oidx+1];            // txpow + DR
 8003978:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800397a:	3301      	adds	r3, #1
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	72bb      	strb	r3, [r7, #10]
            u2_t chmap  = os_rlsbf2(&opts[oidx+2]);// list of enabled channels
 8003984:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003986:	3302      	adds	r3, #2
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	4413      	add	r3, r2
 800398c:	4618      	mov	r0, r3
 800398e:	f7fe fd38 	bl	8002402 <os_rlsbf2>
 8003992:	4603      	mov	r3, r0
 8003994:	813b      	strh	r3, [r7, #8]
            u1_t chpage = opts[oidx+4] & MCMD_LADR_CHPAGE_MASK;     // channel page
 8003996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003998:	3304      	adds	r3, #4
 800399a:	6a3a      	ldr	r2, [r7, #32]
 800399c:	4413      	add	r3, r2
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	f023 030f 	bic.w	r3, r3, #15
 80039a4:	71fb      	strb	r3, [r7, #7]
            u1_t uprpt  = opts[oidx+4] & MCMD_LADR_REPEAT_MASK;     // up repeat count
 80039a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039a8:	3304      	adds	r3, #4
 80039aa:	6a3a      	ldr	r2, [r7, #32]
 80039ac:	4413      	add	r3, r2
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	f003 030f 	and.w	r3, r3, #15
 80039b4:	71bb      	strb	r3, [r7, #6]
            oidx += 5;
 80039b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039b8:	3305      	adds	r3, #5
 80039ba:	653b      	str	r3, [r7, #80]	@ 0x50

            LMIC.ladrAns = 0x80 |     // Include an answer into next frame up
 80039bc:	4bb0      	ldr	r3, [pc, #704]	@ (8003c80 <decodeFrame+0x57c>)
 80039be:	2287      	movs	r2, #135	@ 0x87
 80039c0:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK;
            if( !mapChannels(chpage, chmap) )
 80039c4:	893a      	ldrh	r2, [r7, #8]
 80039c6:	79fb      	ldrb	r3, [r7, #7]
 80039c8:	4611      	mov	r1, r2
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff fb84 	bl	80030d8 <mapChannels>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d108      	bne.n	80039e8 <decodeFrame+0x2e4>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_CHACK;
 80039d6:	4baa      	ldr	r3, [pc, #680]	@ (8003c80 <decodeFrame+0x57c>)
 80039d8:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4ba7      	ldr	r3, [pc, #668]	@ (8003c80 <decodeFrame+0x57c>)
 80039e4:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
            dr_t dr = (dr_t)(p1>>MCMD_LADR_DR_SHIFT);
 80039e8:	7abb      	ldrb	r3, [r7, #10]
 80039ea:	091b      	lsrs	r3, r3, #4
 80039ec:	717b      	strb	r3, [r7, #5]
            if( !validDR(dr) ) {
 80039ee:	797b      	ldrb	r3, [r7, #5]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f7fe fcd7 	bl	80023a4 <validDR>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d108      	bne.n	8003a0e <decodeFrame+0x30a>
                LMIC.ladrAns &= ~MCMD_LADR_ANS_DRACK;
 80039fc:	4ba0      	ldr	r3, [pc, #640]	@ (8003c80 <decodeFrame+0x57c>)
 80039fe:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003a02:	f023 0302 	bic.w	r3, r3, #2
 8003a06:	b2da      	uxtb	r2, r3
 8003a08:	4b9d      	ldr	r3, [pc, #628]	@ (8003c80 <decodeFrame+0x57c>)
 8003a0a:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
                EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                                   e_.eui    = MAIN::CDEV->getEui(),
                                   e_.info   = Base::lsbf4(&d[pend]),
                                   e_.info2  = Base::msbf4(&opts[oidx-4])));
            }
            if( (LMIC.ladrAns & 0x7F) == (MCMD_LADR_ANS_POWACK | MCMD_LADR_ANS_CHACK | MCMD_LADR_ANS_DRACK) ) {
 8003a0e:	4b9c      	ldr	r3, [pc, #624]	@ (8003c80 <decodeFrame+0x57c>)
 8003a10:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 8003a14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a18:	2b07      	cmp	r3, #7
 8003a1a:	d10d      	bne.n	8003a38 <decodeFrame+0x334>
                // Nothing went wrong - use settings
                LMIC.upRepeat = uprpt;
 8003a1c:	4a98      	ldr	r2, [pc, #608]	@ (8003c80 <decodeFrame+0x57c>)
 8003a1e:	79bb      	ldrb	r3, [r7, #6]
 8003a20:	f882 30ae 	strb.w	r3, [r2, #174]	@ 0xae
                setDrTxpow(DRCHG_NWKCMD, dr, pow2dBm(p1));
 8003a24:	7abb      	ldrb	r3, [r7, #10]
 8003a26:	f003 030f 	and.w	r3, r3, #15
 8003a2a:	4a96      	ldr	r2, [pc, #600]	@ (8003c84 <decodeFrame+0x580>)
 8003a2c:	56d2      	ldrsb	r2, [r2, r3]
 8003a2e:	797b      	ldrb	r3, [r7, #5]
 8003a30:	4619      	mov	r1, r3
 8003a32:	2004      	movs	r0, #4
 8003a34:	f7ff fa00 	bl	8002e38 <setDrTxpow>
            }
            LMIC.adrChanged = 1;  // Trigger an ACK to NWK
 8003a38:	4b91      	ldr	r3, [pc, #580]	@ (8003c80 <decodeFrame+0x57c>)
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
            continue;
 8003a40:	e118      	b.n	8003c74 <decodeFrame+0x570>
        }
        case MCMD_DEVS_REQ: {
            LMIC.devsAns = 1;
 8003a42:	4b8f      	ldr	r3, [pc, #572]	@ (8003c80 <decodeFrame+0x57c>)
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
            oidx += 1;
 8003a4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003a50:	e110      	b.n	8003c74 <decodeFrame+0x570>
        }
        case MCMD_DN2P_SET: {
            dr_t dr = (dr_t)(opts[oidx+1] & 0x0F);
 8003a52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a54:	3301      	adds	r3, #1
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	4413      	add	r3, r2
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	74bb      	strb	r3, [r7, #18]
            u4_t freq = convFreq(&opts[oidx+2]);
 8003a62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a64:	3302      	adds	r3, #2
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	4413      	add	r3, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fb12 	bl	8003094 <convFreq>
 8003a70:	60f8      	str	r0, [r7, #12]
            oidx += 5;
 8003a72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a74:	3305      	adds	r3, #5
 8003a76:	653b      	str	r3, [r7, #80]	@ 0x50
            LMIC.dn2Ans = 0x80;   // answer pending
 8003a78:	4b81      	ldr	r3, [pc, #516]	@ (8003c80 <decodeFrame+0x57c>)
 8003a7a:	2280      	movs	r2, #128	@ 0x80
 8003a7c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( validDR(dr) )
 8003a80:	7cbb      	ldrb	r3, [r7, #18]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fc8e 	bl	80023a4 <validDR>
 8003a88:	4603      	mov	r3, r0
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <decodeFrame+0x39c>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_DRACK;
 8003a8e:	4b7c      	ldr	r3, [pc, #496]	@ (8003c80 <decodeFrame+0x57c>)
 8003a90:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003a94:	f043 0302 	orr.w	r3, r3, #2
 8003a98:	b2da      	uxtb	r2, r3
 8003a9a:	4b79      	ldr	r3, [pc, #484]	@ (8003c80 <decodeFrame+0x57c>)
 8003a9c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( freq != 0 )
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d008      	beq.n	8003ab8 <decodeFrame+0x3b4>
                LMIC.dn2Ans |= MCMD_DN2P_ANS_CHACK;
 8003aa6:	4b76      	ldr	r3, [pc, #472]	@ (8003c80 <decodeFrame+0x57c>)
 8003aa8:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003aac:	f043 0301 	orr.w	r3, r3, #1
 8003ab0:	b2da      	uxtb	r2, r3
 8003ab2:	4b73      	ldr	r3, [pc, #460]	@ (8003c80 <decodeFrame+0x57c>)
 8003ab4:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            if( LMIC.dn2Ans == (0x80|MCMD_DN2P_ANS_DRACK|MCMD_DN2P_ANS_CHACK) ) {
 8003ab8:	4b71      	ldr	r3, [pc, #452]	@ (8003c80 <decodeFrame+0x57c>)
 8003aba:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8003abe:	2b83      	cmp	r3, #131	@ 0x83
 8003ac0:	f040 80d7 	bne.w	8003c72 <decodeFrame+0x56e>
                LMIC.dn2Dr = dr;
 8003ac4:	4a6e      	ldr	r2, [pc, #440]	@ (8003c80 <decodeFrame+0x57c>)
 8003ac6:	7cbb      	ldrb	r3, [r7, #18]
 8003ac8:	f882 312b 	strb.w	r3, [r2, #299]	@ 0x12b
                LMIC.dn2Freq = freq;
 8003acc:	4a6c      	ldr	r2, [pc, #432]	@ (8003c80 <decodeFrame+0x57c>)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c
                DO_DEVDB(LMIC.dn2Dr,dn2Dr);
                DO_DEVDB(LMIC.dn2Freq,dn2Freq);
            }
            continue;
 8003ad4:	e0cd      	b.n	8003c72 <decodeFrame+0x56e>
        }
        case MCMD_DCAP_REQ: {
            u1_t cap = opts[oidx+1];
 8003ad6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ad8:	3301      	adds	r3, #1
 8003ada:	6a3a      	ldr	r2, [r7, #32]
 8003adc:	4413      	add	r3, r2
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	72fb      	strb	r3, [r7, #11]
            oidx += 2;
 8003ae2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	653b      	str	r3, [r7, #80]	@ 0x50
            // A value cap=0xFF means device is OFF unless enabled again manually.
            if( cap==0xFF )
 8003ae8:	7afb      	ldrb	r3, [r7, #11]
 8003aea:	2bff      	cmp	r3, #255	@ 0xff
 8003aec:	d108      	bne.n	8003b00 <decodeFrame+0x3fc>
                LMIC.opmode |= OP_SHUTDOWN;  // stop any sending
 8003aee:	4b64      	ldr	r3, [pc, #400]	@ (8003c80 <decodeFrame+0x57c>)
 8003af0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003af4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	4b61      	ldr	r3, [pc, #388]	@ (8003c80 <decodeFrame+0x57c>)
 8003afc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            LMIC.globalDutyRate  = cap & 0xF;
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	b2da      	uxtb	r2, r3
 8003b08:	4b5d      	ldr	r3, [pc, #372]	@ (8003c80 <decodeFrame+0x57c>)
 8003b0a:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
            LMIC.globalDutyAvail = os_getTime();
 8003b0e:	f001 fe03 	bl	8005718 <os_getTime>
 8003b12:	4603      	mov	r3, r0
 8003b14:	4a5a      	ldr	r2, [pc, #360]	@ (8003c80 <decodeFrame+0x57c>)
 8003b16:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
            DO_DEVDB(cap,dutyCap);
            LMIC.dutyCapAns = 1;
 8003b1a:	4b59      	ldr	r3, [pc, #356]	@ (8003c80 <decodeFrame+0x57c>)
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
            continue;
 8003b22:	e0a7      	b.n	8003c74 <decodeFrame+0x570>
        }
        case MCMD_SNCH_REQ: {
            u1_t chidx = opts[oidx+1];  // channel
 8003b24:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b26:	3301      	adds	r3, #1
 8003b28:	6a3a      	ldr	r2, [r7, #32]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	76fb      	strb	r3, [r7, #27]
            u4_t freq  = convFreq(&opts[oidx+2]); // freq
 8003b30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b32:	3302      	adds	r3, #2
 8003b34:	6a3a      	ldr	r2, [r7, #32]
 8003b36:	4413      	add	r3, r2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7ff faab 	bl	8003094 <convFreq>
 8003b3e:	6178      	str	r0, [r7, #20]
            u1_t drs   = opts[oidx+5];  // datarate span
 8003b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b42:	3305      	adds	r3, #5
 8003b44:	6a3a      	ldr	r2, [r7, #32]
 8003b46:	4413      	add	r3, r2
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	74fb      	strb	r3, [r7, #19]
            LMIC.snchAns = 0x80;
 8003b4c:	4b4c      	ldr	r3, [pc, #304]	@ (8003c80 <decodeFrame+0x57c>)
 8003b4e:	2280      	movs	r2, #128	@ 0x80
 8003b50:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            if( freq != 0 && LMIC_setupChannel(chidx, freq, DR_RANGE_MAP(drs&0xF,drs>>4), -1) )
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d026      	beq.n	8003ba8 <decodeFrame+0x4a4>
 8003b5a:	7cfb      	ldrb	r3, [r7, #19]
 8003b5c:	f003 030f 	and.w	r3, r3, #15
 8003b60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	b21a      	sxth	r2, r3
 8003b6a:	7cfb      	ldrb	r3, [r7, #19]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	f1c3 030f 	rsb	r3, r3, #15
 8003b74:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b78:	fa41 f303 	asr.w	r3, r1, r3
 8003b7c:	b21b      	sxth	r3, r3
 8003b7e:	4013      	ands	r3, r2
 8003b80:	b21b      	sxth	r3, r3
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	7ef8      	ldrb	r0, [r7, #27]
 8003b86:	f04f 33ff 	mov.w	r3, #4294967295
 8003b8a:	6979      	ldr	r1, [r7, #20]
 8003b8c:	f7ff fa08 	bl	8002fa0 <LMIC_setupChannel>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d008      	beq.n	8003ba8 <decodeFrame+0x4a4>
                LMIC.snchAns |= MCMD_SNCH_ANS_DRACK|MCMD_SNCH_ANS_FQACK;
 8003b96:	4b3a      	ldr	r3, [pc, #232]	@ (8003c80 <decodeFrame+0x57c>)
 8003b98:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8003b9c:	f043 0303 	orr.w	r3, r3, #3
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	4b37      	ldr	r3, [pc, #220]	@ (8003c80 <decodeFrame+0x57c>)
 8003ba4:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
            oidx += 6;
 8003ba8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003baa:	3306      	adds	r3, #6
 8003bac:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003bae:	e061      	b.n	8003c74 <decodeFrame+0x570>
        }
        case MCMD_PING_SET: {
            u4_t freq = convFreq(&opts[oidx+1]);
 8003bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	6a3a      	ldr	r2, [r7, #32]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f7ff fa6b 	bl	8003094 <convFreq>
 8003bbe:	61f8      	str	r0, [r7, #28]
            oidx += 4;
 8003bc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bc2:	3304      	adds	r3, #4
 8003bc4:	653b      	str	r3, [r7, #80]	@ 0x50
            u1_t flags = 0x80;
 8003bc6:	2380      	movs	r3, #128	@ 0x80
 8003bc8:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
            if( freq != 0 ) {
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d009      	beq.n	8003be6 <decodeFrame+0x4e2>
                flags |= MCMD_PING_ANS_FQACK;
 8003bd2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003bd6:	f043 0301 	orr.w	r3, r3, #1
 8003bda:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                LMIC.ping.freq = freq;
 8003bde:	4a28      	ldr	r2, [pc, #160]	@ (8003c80 <decodeFrame+0x57c>)
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f8c2 3140 	str.w	r3, [r2, #320]	@ 0x140
                DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
                DO_DEVDB(LMIC.ping.freq, pingFreq);
                DO_DEVDB(LMIC.ping.dr, pingDr);
            }
            LMIC.pingSetAns = flags;
 8003be6:	4a26      	ldr	r2, [pc, #152]	@ (8003c80 <decodeFrame+0x57c>)
 8003be8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8003bec:	f882 3133 	strb.w	r3, [r2, #307]	@ 0x133
            continue;
 8003bf0:	e040      	b.n	8003c74 <decodeFrame+0x570>
        }
        case MCMD_BCNI_ANS: {
            // Ignore if tracking already enabled
            if( (LMIC.opmode & OP_TRACK) == 0 ) {
 8003bf2:	4b23      	ldr	r3, [pc, #140]	@ (8003c80 <decodeFrame+0x57c>)
 8003bf4:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d134      	bne.n	8003c6a <decodeFrame+0x566>
                LMIC.bcnChnl = opts[oidx+3];
 8003c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c02:	3303      	adds	r3, #3
 8003c04:	6a3a      	ldr	r2, [r7, #32]
 8003c06:	4413      	add	r3, r2
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8003c80 <decodeFrame+0x57c>)
 8003c0c:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
                // Enable tracking - bcninfoTries
                LMIC.opmode |= OP_TRACK;
 8003c10:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <decodeFrame+0x57c>)
 8003c12:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003c16:	f043 0302 	orr.w	r3, r3, #2
 8003c1a:	b29a      	uxth	r2, r3
 8003c1c:	4b18      	ldr	r3, [pc, #96]	@ (8003c80 <decodeFrame+0x57c>)
 8003c1e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                // Cleared later in txComplete handling - triggers EV_BEACON_FOUND
                ASSERT(LMIC.bcninfoTries!=0);
 8003c22:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <decodeFrame+0x57c>)
 8003c24:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <decodeFrame+0x52c>
 8003c2c:	f7fe fa42 	bl	80020b4 <hal_failed>
                // Setup RX parameters
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003c30:	4b13      	ldr	r3, [pc, #76]	@ (8003c80 <decodeFrame+0x57c>)
 8003c32:	685c      	ldr	r4, [r3, #4]
                                       + ms2osticks(os_rlsbf2(&opts[oidx+1]) * MCMD_BCNI_TUNIT)
 8003c34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c36:	3301      	adds	r3, #1
 8003c38:	6a3a      	ldr	r2, [r7, #32]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7fe fbe0 	bl	8002402 <os_rlsbf2>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	18e2      	adds	r2, r4, r3
                                       + ms2osticksCeil(MCMD_BCNI_TUNIT/2)
                                       - BCN_INTV_osticks);
 8003c50:	4b0d      	ldr	r3, [pc, #52]	@ (8003c88 <decodeFrame+0x584>)
 8003c52:	4413      	add	r3, r2
                LMIC.bcninfo.txtime = (LMIC.rxtime
 8003c54:	4a0a      	ldr	r2, [pc, #40]	@ (8003c80 <decodeFrame+0x57c>)
 8003c56:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
                LMIC.bcninfo.flags = 0;  // txtime above cannot be used as reference (BCN_PARTIAL|BCN_FULL cleared)
 8003c5a:	4b09      	ldr	r3, [pc, #36]	@ (8003c80 <decodeFrame+0x57c>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
                calcBcnRxWindowFromMillis(MCMD_BCNI_TUNIT,1);  // error of +/-N ms 
 8003c62:	2101      	movs	r1, #1
 8003c64:	201e      	movs	r0, #30
 8003c66:	f7fe ff25 	bl	8002ab4 <calcBcnRxWindowFromMillis>
                                     e_.info    = (LMIC.missedBcns |
                                                   (osticks2us(LMIC.bcninfo.txtime + BCN_INTV_osticks
                                                               - LMIC.bcnRxtime) << 8)),
                                     e_.time    = MAIN::CDEV->ostime2ustime(LMIC.bcninfo.txtime + BCN_INTV_osticks)));
            }
            oidx += 4;
 8003c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003c6c:	3304      	adds	r3, #4
 8003c6e:	653b      	str	r3, [r7, #80]	@ 0x50
            continue;
 8003c70:	e000      	b.n	8003c74 <decodeFrame+0x570>
            continue;
 8003c72:	bf00      	nop
    while( oidx < olen ) {
 8003c74:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	f6ff ae45 	blt.w	8003908 <decodeFrame+0x204>
 8003c7e:	e006      	b.n	8003c8e <decodeFrame+0x58a>
 8003c80:	20000260 	.word	0x20000260
 8003c84:	080109ec 	.word	0x080109ec
 8003c88:	ffc181e0 	.word	0xffc181e0
        }
        EV(specCond, ERR, (e_.reason = EV::specCond_t::BAD_MAC_CMD,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = Base::lsbf4(&d[pend]),
                           e_.info2  = Base::msbf4(&opts[oidx])));
        break;
 8003c8c:	bf00      	nop
        EV(specCond, ERR, (e_.reason = EV::specCond_t::CORRUPTED_FRAME,
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = 0x1000000 + (oidx) + (olen<<8)));
    }

    if( !replayConf ) {
 8003c8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d11d      	bne.n	8003cd0 <decodeFrame+0x5cc>
        // Handle payload only if not a replay
        // Decrypt payload - if any
        if( port >= 0  &&  pend-poff > 0 )
 8003c94:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	db1a      	blt.n	8003cd0 <decodeFrame+0x5cc>
 8003c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003c9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	dd15      	ble.n	8003cd0 <decodeFrame+0x5cc>
            aes_cipher(port <= 0 ? LMIC.nwkKey : LMIC.artKey, LMIC.devaddr, seqno, /*dn*/1, d+poff, pend-poff);
 8003ca4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	dc01      	bgt.n	8003cae <decodeFrame+0x5aa>
 8003caa:	482e      	ldr	r0, [pc, #184]	@ (8003d64 <decodeFrame+0x660>)
 8003cac:	e000      	b.n	8003cb0 <decodeFrame+0x5ac>
 8003cae:	482e      	ldr	r0, [pc, #184]	@ (8003d68 <decodeFrame+0x664>)
 8003cb0:	4b2e      	ldr	r3, [pc, #184]	@ (8003d6c <decodeFrame+0x668>)
 8003cb2:	f8d3 4114 	ldr.w	r4, [r3, #276]	@ 0x114
 8003cb6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003cba:	4413      	add	r3, r2
 8003cbc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003cbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003cc0:	1a8a      	subs	r2, r1, r2
 8003cc2:	9201      	str	r2, [sp, #4]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003cca:	4621      	mov	r1, r4
 8003ccc:	f7fe fd66 	bl	800279c <aes_cipher>
                            e_.eui    = MAIN::CDEV->getEui(),
                            e_.info   = Base::lsbf4(&d[pend]),
                            e_.info2  = seqno));
    }

    if( // NWK acks but we don't have a frame pending
 8003cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd2:	2b00      	cmp	r3, #0
                           e_.eui    = MAIN::CDEV->getEui(),
                           e_.info   = seqno,
                           e_.info2  = ackup));
    }

    if( LMIC.txCnt != 0 ) // we requested an ACK
 8003cd4:	4b25      	ldr	r3, [pc, #148]	@ (8003d6c <decodeFrame+0x668>)
 8003cd6:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d010      	beq.n	8003d00 <decodeFrame+0x5fc>
        LMIC.txrxFlags |= ackup ? TXRX_ACK : TXRX_NACK;
 8003cde:	4b23      	ldr	r3, [pc, #140]	@ (8003d6c <decodeFrame+0x668>)
 8003ce0:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003ce4:	b25b      	sxtb	r3, r3
 8003ce6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ce8:	2a00      	cmp	r2, #0
 8003cea:	d002      	beq.n	8003cf2 <decodeFrame+0x5ee>
 8003cec:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8003cf0:	e000      	b.n	8003cf4 <decodeFrame+0x5f0>
 8003cf2:	2240      	movs	r2, #64	@ 0x40
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	b25b      	sxtb	r3, r3
 8003cf8:	b2da      	uxtb	r2, r3
 8003cfa:	4b1c      	ldr	r3, [pc, #112]	@ (8003d6c <decodeFrame+0x668>)
 8003cfc:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145

    if( port < 0 ) {
 8003d00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	da12      	bge.n	8003d2c <decodeFrame+0x628>
        LMIC.txrxFlags |= TXRX_NOPORT;
 8003d06:	4b19      	ldr	r3, [pc, #100]	@ (8003d6c <decodeFrame+0x668>)
 8003d08:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003d0c:	f043 0320 	orr.w	r3, r3, #32
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	4b16      	ldr	r3, [pc, #88]	@ (8003d6c <decodeFrame+0x668>)
 8003d14:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003d18:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	4b13      	ldr	r3, [pc, #76]	@ (8003d6c <decodeFrame+0x668>)
 8003d1e:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = 0;
 8003d22:	4b12      	ldr	r3, [pc, #72]	@ (8003d6c <decodeFrame+0x668>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8003d2a:	e016      	b.n	8003d5a <decodeFrame+0x656>
    } else {
        LMIC.txrxFlags |= TXRX_PORT;
 8003d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d6c <decodeFrame+0x668>)
 8003d2e:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003d32:	f043 0310 	orr.w	r3, r3, #16
 8003d36:	b2da      	uxtb	r2, r3
 8003d38:	4b0c      	ldr	r3, [pc, #48]	@ (8003d6c <decodeFrame+0x668>)
 8003d3a:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        LMIC.dataBeg = poff;
 8003d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b0a      	ldr	r3, [pc, #40]	@ (8003d6c <decodeFrame+0x668>)
 8003d44:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
        LMIC.dataLen = pend-poff;
 8003d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d4a:	b2da      	uxtb	r2, r3
 8003d4c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003d4e:	b2db      	uxtb	r3, r3
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	b2da      	uxtb	r2, r3
 8003d54:	4b05      	ldr	r3, [pc, #20]	@ (8003d6c <decodeFrame+0x668>)
 8003d56:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    }
    return 1;
 8003d5a:	2301      	movs	r3, #1
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3764      	adds	r7, #100	@ 0x64
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd90      	pop	{r4, r7, pc}
 8003d64:	20000354 	.word	0x20000354
 8003d68:	20000364 	.word	0x20000364
 8003d6c:	20000260 	.word	0x20000260

08003d70 <setupRx2>:

// ================================================================================
// TX/RX transaction support


static void setupRx2 (void) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
    LMIC.txrxFlags = TXRX_DNW2;
 8003d74:	4b0d      	ldr	r3, [pc, #52]	@ (8003dac <setupRx2+0x3c>)
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    LMIC.rps = dndr2rps(LMIC.dn2Dr);
 8003d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003dac <setupRx2+0x3c>)
 8003d7e:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003d82:	4618      	mov	r0, r3
 8003d84:	f7fe fae2 	bl	800234c <dndr2rps>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	4b07      	ldr	r3, [pc, #28]	@ (8003dac <setupRx2+0x3c>)
 8003d8e:	81da      	strh	r2, [r3, #14]
    LMIC.freq = LMIC.dn2Freq;
 8003d90:	4b06      	ldr	r3, [pc, #24]	@ (8003dac <setupRx2+0x3c>)
 8003d92:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8003d96:	4a05      	ldr	r2, [pc, #20]	@ (8003dac <setupRx2+0x3c>)
 8003d98:	6093      	str	r3, [r2, #8]
    LMIC.dataLen = 0;
 8003d9a:	4b04      	ldr	r3, [pc, #16]	@ (8003dac <setupRx2+0x3c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    os_radio(RADIO_RX);
 8003da2:	2002      	movs	r0, #2
 8003da4:	f002 fade 	bl	8006364 <os_radio>
}
 8003da8:	bf00      	nop
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	20000260 	.word	0x20000260

08003db0 <schedRx2>:


static void schedRx2 (ostime_t delay, osjobcb_t func) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
    // Add 1.5 symbols we need 5 out of 8. Try to sync 1.5 symbols into the preamble.
    LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dn2Dr);
 8003dba:	4b0e      	ldr	r3, [pc, #56]	@ (8003df4 <schedRx2+0x44>)
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	18d1      	adds	r1, r2, r3
 8003dc2:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <schedRx2+0x44>)
 8003dc4:	f893 312b 	ldrb.w	r3, [r3, #299]	@ 0x12b
 8003dc8:	461a      	mov	r2, r3
 8003dca:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <schedRx2+0x48>)
 8003dcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	4413      	add	r3, r2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	4a06      	ldr	r2, [pc, #24]	@ (8003df4 <schedRx2+0x44>)
 8003dda:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003ddc:	4b05      	ldr	r3, [pc, #20]	@ (8003df4 <schedRx2+0x44>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	3b40      	subs	r3, #64	@ 0x40
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	4619      	mov	r1, r3
 8003de6:	4805      	ldr	r0, [pc, #20]	@ (8003dfc <schedRx2+0x4c>)
 8003de8:	f001 fd00 	bl	80057ec <os_setTimedCallback>
}
 8003dec:	bf00      	nop
 8003dee:	3708      	adds	r7, #8
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20000260 	.word	0x20000260
 8003df8:	08010a20 	.word	0x08010a20
 8003dfc:	20000274 	.word	0x20000274

08003e00 <setupRx1>:

static void setupRx1 (osjobcb_t func) {
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
    LMIC.txrxFlags = TXRX_DNW1;
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <setupRx1+0x40>)
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    // Turn LMIC.rps from TX over to RX
    LMIC.rps = setNocrc(LMIC.rps,1);
 8003e10:	4b0b      	ldr	r3, [pc, #44]	@ (8003e40 <setupRx1+0x40>)
 8003e12:	89db      	ldrh	r3, [r3, #14]
 8003e14:	2101      	movs	r1, #1
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe fa49 	bl	80022ae <setNocrc>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	461a      	mov	r2, r3
 8003e20:	4b07      	ldr	r3, [pc, #28]	@ (8003e40 <setupRx1+0x40>)
 8003e22:	81da      	strh	r2, [r3, #14]
    LMIC.dataLen = 0;
 8003e24:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <setupRx1+0x40>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.osjob.func = func;
 8003e2c:	4a04      	ldr	r2, [pc, #16]	@ (8003e40 <setupRx1+0x40>)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	61d3      	str	r3, [r2, #28]
    os_radio(RADIO_RX);
 8003e32:	2002      	movs	r0, #2
 8003e34:	f002 fa96 	bl	8006364 <os_radio>
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	20000260 	.word	0x20000260

08003e44 <txDone>:


// Called by HAL once TX complete and delivers exact end of TX time stamp in LMIC.rxtime
static void txDone (ostime_t delay, osjobcb_t func) {
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b082      	sub	sp, #8
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE|OP_PINGINI)) == (OP_TRACK|OP_PINGABLE) ) {
 8003e4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ed8 <txDone+0x94>)
 8003e50:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e54:	461a      	mov	r2, r3
 8003e56:	f240 6302 	movw	r3, #1538	@ 0x602
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	f240 4202 	movw	r2, #1026	@ 0x402
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10b      	bne.n	8003e7c <txDone+0x38>
        rxschedInit(&LMIC.ping);    // note: reuses LMIC.frame buffer!
 8003e64:	481d      	ldr	r0, [pc, #116]	@ (8003edc <txDone+0x98>)
 8003e66:	f7fe feab 	bl	8002bc0 <rxschedInit>
        LMIC.opmode |= OP_PINGINI;
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ed8 <txDone+0x94>)
 8003e6c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003e70:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	4b18      	ldr	r3, [pc, #96]	@ (8003ed8 <txDone+0x94>)
 8003e78:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setRx1Params();
    // LMIC.rxsyms carries the TX datarate (can be != LMIC.datarate [confirm retries etc.])
    // Setup receive - LMIC.rxtime is preloaded with 1.5 symbols offset to tune
    // into the middle of the 8 symbols preamble.
#if defined(CFG_eu868)
    if( /* TX datarate */LMIC.rxsyms == DR_FSK ) {
 8003e7c:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <txDone+0x94>)
 8003e7e:	7c1b      	ldrb	r3, [r3, #16]
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	d10a      	bne.n	8003e9a <txDone+0x56>
        LMIC.rxtime = LMIC.txend + delay - PRERX_FSK*us2osticksRound(160);
 8003e84:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <txDone+0x94>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3b05      	subs	r3, #5
 8003e8e:	4a12      	ldr	r2, [pc, #72]	@ (8003ed8 <txDone+0x94>)
 8003e90:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = RXLEN_FSK;
 8003e92:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <txDone+0x94>)
 8003e94:	2208      	movs	r2, #8
 8003e96:	741a      	strb	r2, [r3, #16]
 8003e98:	e012      	b.n	8003ec0 <txDone+0x7c>
    }
    else
#endif
    {
        LMIC.rxtime = LMIC.txend + delay + (PAMBL_SYMS-MINRX_SYMS)*dr2hsym(LMIC.dndr);
 8003e9a:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <txDone+0x94>)
 8003e9c:	681a      	ldr	r2, [r3, #0]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	18d1      	adds	r1, r2, r3
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <txDone+0x94>)
 8003ea4:	7c5b      	ldrb	r3, [r3, #17]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8003ee0 <txDone+0x9c>)
 8003eaa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003eae:	4613      	mov	r3, r2
 8003eb0:	005b      	lsls	r3, r3, #1
 8003eb2:	4413      	add	r3, r2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <txDone+0x94>)
 8003eb8:	6053      	str	r3, [r2, #4]
        LMIC.rxsyms = MINRX_SYMS;
 8003eba:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <txDone+0x94>)
 8003ebc:	2205      	movs	r2, #5
 8003ebe:	741a      	strb	r2, [r3, #16]
    }
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, func);
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <txDone+0x94>)
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	3b40      	subs	r3, #64	@ 0x40
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	4806      	ldr	r0, [pc, #24]	@ (8003ee4 <txDone+0xa0>)
 8003ecc:	f001 fc8e 	bl	80057ec <os_setTimedCallback>
}
 8003ed0:	bf00      	nop
 8003ed2:	3708      	adds	r7, #8
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000260 	.word	0x20000260
 8003edc:	20000394 	.word	0x20000394
 8003ee0:	08010a20 	.word	0x08010a20
 8003ee4:	20000274 	.word	0x20000274

08003ee8 <onJoinFailed>:


// ======================================== Join frames


static void onJoinFailed (xref2osjob_t osjob) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
    // Notify app - must call LMIC_reset() to stop joining
    // otherwise join procedure continues.
    reportEvent(EV_JOIN_FAILED);
 8003ef0:	2008      	movs	r0, #8
 8003ef2:	f7ff faef 	bl	80034d4 <reportEvent>
}
 8003ef6:	bf00      	nop
 8003ef8:	3708      	adds	r7, #8
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
	...

08003f00 <processJoinAccept>:


static bit_t processJoinAccept (void) {
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
    ASSERT(LMIC.txrxFlags != TXRX_DNW1 || LMIC.dataLen != 0);
 8003f06:	4b99      	ldr	r3, [pc, #612]	@ (800416c <processJoinAccept+0x26c>)
 8003f08:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d106      	bne.n	8003f1e <processJoinAccept+0x1e>
 8003f10:	4b96      	ldr	r3, [pc, #600]	@ (800416c <processJoinAccept+0x26c>)
 8003f12:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <processJoinAccept+0x1e>
 8003f1a:	f7fe f8cb 	bl	80020b4 <hal_failed>
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 8003f1e:	4b93      	ldr	r3, [pc, #588]	@ (800416c <processJoinAccept+0x26c>)
 8003f20:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d101      	bne.n	8003f30 <processJoinAccept+0x30>
 8003f2c:	f7fe f8c2 	bl	80020b4 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8003f30:	4b8e      	ldr	r3, [pc, #568]	@ (800416c <processJoinAccept+0x26c>)
 8003f32:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d14c      	bne.n	8003fd4 <processJoinAccept+0xd4>
      nojoinframe:
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <processJoinAccept+0x40>
                           e_.info   = dlen < 4 ? 0 : mic,
                           e_.info2  = hdr + (dlen<<8)));
      badframe:
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto nojoinframe;
 8003f3e:	bf00      	nop
        if( (LMIC.opmode & OP_JOINING) == 0 ) {
 8003f40:	4b8a      	ldr	r3, [pc, #552]	@ (800416c <processJoinAccept+0x26c>)
 8003f42:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d123      	bne.n	8003f96 <processJoinAccept+0x96>
            ASSERT((LMIC.opmode & OP_REJOIN) != 0);
 8003f4e:	4b87      	ldr	r3, [pc, #540]	@ (800416c <processJoinAccept+0x26c>)
 8003f50:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f54:	f003 0320 	and.w	r3, r3, #32
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <processJoinAccept+0x60>
 8003f5c:	f7fe f8aa 	bl	80020b4 <hal_failed>
            LMIC.opmode &= ~(OP_REJOIN|OP_TXRXPEND);
 8003f60:	4b82      	ldr	r3, [pc, #520]	@ (800416c <processJoinAccept+0x26c>)
 8003f62:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f66:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	4b7f      	ldr	r3, [pc, #508]	@ (800416c <processJoinAccept+0x26c>)
 8003f6e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            if( LMIC.rejoinCnt < 10 )
 8003f72:	4b7e      	ldr	r3, [pc, #504]	@ (800416c <processJoinAccept+0x26c>)
 8003f74:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003f78:	2b09      	cmp	r3, #9
 8003f7a:	d807      	bhi.n	8003f8c <processJoinAccept+0x8c>
                LMIC.rejoinCnt++;
 8003f7c:	4b7b      	ldr	r3, [pc, #492]	@ (800416c <processJoinAccept+0x26c>)
 8003f7e:	f893 30b2 	ldrb.w	r3, [r3, #178]	@ 0xb2
 8003f82:	3301      	adds	r3, #1
 8003f84:	b2da      	uxtb	r2, r3
 8003f86:	4b79      	ldr	r3, [pc, #484]	@ (800416c <processJoinAccept+0x26c>)
 8003f88:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
            reportEvent(EV_REJOIN_FAILED);
 8003f8c:	2009      	movs	r0, #9
 8003f8e:	f7ff faa1 	bl	80034d4 <reportEvent>
            return 1;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e0e6      	b.n	8004164 <processJoinAccept+0x264>
        LMIC.opmode &= ~OP_TXRXPEND;
 8003f96:	4b75      	ldr	r3, [pc, #468]	@ (800416c <processJoinAccept+0x26c>)
 8003f98:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8003f9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003fa0:	b29a      	uxth	r2, r3
 8003fa2:	4b72      	ldr	r3, [pc, #456]	@ (800416c <processJoinAccept+0x26c>)
 8003fa4:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        ostime_t delay = nextJoinState();
 8003fa8:	f7ff fa22 	bl	80033f0 <nextJoinState>
 8003fac:	6078      	str	r0, [r7, #4]
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003fae:	f001 fbb3 	bl	8005718 <os_getTime>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	18d1      	adds	r1, r2, r3
                            (delay&1) != 0
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f003 0301 	and.w	r3, r3, #1
        os_setTimedCallback(&LMIC.osjob, os_getTime()+delay,
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <processJoinAccept+0xc6>
 8003fc2:	4b6b      	ldr	r3, [pc, #428]	@ (8004170 <processJoinAccept+0x270>)
 8003fc4:	e000      	b.n	8003fc8 <processJoinAccept+0xc8>
 8003fc6:	4b6b      	ldr	r3, [pc, #428]	@ (8004174 <processJoinAccept+0x274>)
 8003fc8:	461a      	mov	r2, r3
 8003fca:	486b      	ldr	r0, [pc, #428]	@ (8004178 <processJoinAccept+0x278>)
 8003fcc:	f001 fc0e 	bl	80057ec <os_setTimedCallback>
        return 1;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0c7      	b.n	8004164 <processJoinAccept+0x264>
    u1_t hdr  = LMIC.frame[0];
 8003fd4:	4b65      	ldr	r3, [pc, #404]	@ (800416c <processJoinAccept+0x26c>)
 8003fd6:	f893 3148 	ldrb.w	r3, [r3, #328]	@ 0x148
 8003fda:	757b      	strb	r3, [r7, #21]
    u1_t dlen = LMIC.dataLen;
 8003fdc:	4b63      	ldr	r3, [pc, #396]	@ (800416c <processJoinAccept+0x26c>)
 8003fde:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8003fe2:	75fb      	strb	r3, [r7, #23]
    u4_t mic  = os_rlsbf4(&LMIC.frame[dlen-4]); // safe before modified by encrypt!
 8003fe4:	7dfb      	ldrb	r3, [r7, #23]
 8003fe6:	3b04      	subs	r3, #4
 8003fe8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003fec:	4a5f      	ldr	r2, [pc, #380]	@ (800416c <processJoinAccept+0x26c>)
 8003fee:	4413      	add	r3, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f7fe fa1b 	bl	800242c <os_rlsbf4>
 8003ff6:	6138      	str	r0, [r7, #16]
    if( (dlen != LEN_JA && dlen != LEN_JAEXT)
 8003ff8:	7dfb      	ldrb	r3, [r7, #23]
 8003ffa:	2b11      	cmp	r3, #17
 8003ffc:	d002      	beq.n	8004004 <processJoinAccept+0x104>
 8003ffe:	7dfb      	ldrb	r3, [r7, #23]
 8004000:	2b21      	cmp	r3, #33	@ 0x21
 8004002:	d104      	bne.n	800400e <processJoinAccept+0x10e>
        || (hdr & (HDR_FTYPE|HDR_MAJOR)) != (HDR_FTYPE_JACC|HDR_MAJOR_V1) ) {
 8004004:	7d7b      	ldrb	r3, [r7, #21]
 8004006:	f003 03e3 	and.w	r3, r3, #227	@ 0xe3
 800400a:	2b20      	cmp	r3, #32
 800400c:	d00b      	beq.n	8004026 <processJoinAccept+0x126>
      badframe:
 800400e:	bf00      	nop
 8004010:	e000      	b.n	8004014 <processJoinAccept+0x114>
    }
    aes_encrypt(LMIC.frame+1, dlen-1);
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
        EV(specCond, ERR, (e_.reason = EV::specCond_t::JOIN_BAD_MIC,
                           e_.info   = mic));
        goto badframe;
 8004012:	bf00      	nop
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8004014:	4b55      	ldr	r3, [pc, #340]	@ (800416c <processJoinAccept+0x26c>)
 8004016:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	2b00      	cmp	r3, #0
 8004020:	d08d      	beq.n	8003f3e <processJoinAccept+0x3e>
            return 0;
 8004022:	2300      	movs	r3, #0
 8004024:	e09e      	b.n	8004164 <processJoinAccept+0x264>
    aes_encrypt(LMIC.frame+1, dlen-1);
 8004026:	4a55      	ldr	r2, [pc, #340]	@ (800417c <processJoinAccept+0x27c>)
 8004028:	7dfb      	ldrb	r3, [r7, #23]
 800402a:	3b01      	subs	r3, #1
 800402c:	4619      	mov	r1, r3
 800402e:	4610      	mov	r0, r2
 8004030:	f7fe fb9e 	bl	8002770 <aes_encrypt>
    if( !aes_verifyMic0(LMIC.frame, dlen-4) ) {
 8004034:	7dfb      	ldrb	r3, [r7, #23]
 8004036:	3b04      	subs	r3, #4
 8004038:	4619      	mov	r1, r3
 800403a:	4851      	ldr	r0, [pc, #324]	@ (8004180 <processJoinAccept+0x280>)
 800403c:	f7fe fb76 	bl	800272c <aes_verifyMic0>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d0e5      	beq.n	8004012 <processJoinAccept+0x112>
    }

    u4_t addr = os_rlsbf4(LMIC.frame+OFF_JA_DEVADDR);
 8004046:	4b4f      	ldr	r3, [pc, #316]	@ (8004184 <processJoinAccept+0x284>)
 8004048:	4618      	mov	r0, r3
 800404a:	f7fe f9ef 	bl	800242c <os_rlsbf4>
 800404e:	60f8      	str	r0, [r7, #12]
    LMIC.devaddr = addr;
 8004050:	4a46      	ldr	r2, [pc, #280]	@ (800416c <processJoinAccept+0x26c>)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114
    LMIC.netid = os_rlsbf4(&LMIC.frame[OFF_JA_NETID]) & 0xFFFFFF;
 8004058:	484b      	ldr	r0, [pc, #300]	@ (8004188 <processJoinAccept+0x288>)
 800405a:	f7fe f9e7 	bl	800242c <os_rlsbf4>
 800405e:	4603      	mov	r3, r0
 8004060:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004064:	4a41      	ldr	r2, [pc, #260]	@ (800416c <processJoinAccept+0x26c>)
 8004066:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8

#if defined(CFG_eu868)
    initDefaultChannels(0);
 800406a:	2000      	movs	r0, #0
 800406c:	f7fe ff12 	bl	8002e94 <initDefaultChannels>
#endif
    if( dlen > LEN_JA ) {
 8004070:	7dfb      	ldrb	r3, [r7, #23]
 8004072:	2b11      	cmp	r3, #17
 8004074:	d920      	bls.n	80040b8 <processJoinAccept+0x1b8>
#if defined(CFG_us915)
        goto badframe;
#endif
        dlen = OFF_CFLIST;
 8004076:	230d      	movs	r3, #13
 8004078:	75fb      	strb	r3, [r7, #23]
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 800407a:	2303      	movs	r3, #3
 800407c:	75bb      	strb	r3, [r7, #22]
 800407e:	e018      	b.n	80040b2 <processJoinAccept+0x1b2>
            u4_t freq = convFreq(&LMIC.frame[dlen]);
 8004080:	7dfb      	ldrb	r3, [r7, #23]
 8004082:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004086:	4a39      	ldr	r2, [pc, #228]	@ (800416c <processJoinAccept+0x26c>)
 8004088:	4413      	add	r3, r2
 800408a:	4618      	mov	r0, r3
 800408c:	f7ff f802 	bl	8003094 <convFreq>
 8004090:	60b8      	str	r0, [r7, #8]
            if( freq )
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d006      	beq.n	80040a6 <processJoinAccept+0x1a6>
                LMIC_setupChannel(chidx, freq, 0, -1);
 8004098:	7db8      	ldrb	r0, [r7, #22]
 800409a:	f04f 33ff 	mov.w	r3, #4294967295
 800409e:	2200      	movs	r2, #0
 80040a0:	68b9      	ldr	r1, [r7, #8]
 80040a2:	f7fe ff7d 	bl	8002fa0 <LMIC_setupChannel>
        for( u1_t chidx=3; chidx<8; chidx++, dlen+=3 ) {
 80040a6:	7dbb      	ldrb	r3, [r7, #22]
 80040a8:	3301      	adds	r3, #1
 80040aa:	75bb      	strb	r3, [r7, #22]
 80040ac:	7dfb      	ldrb	r3, [r7, #23]
 80040ae:	3303      	adds	r3, #3
 80040b0:	75fb      	strb	r3, [r7, #23]
 80040b2:	7dbb      	ldrb	r3, [r7, #22]
 80040b4:	2b07      	cmp	r3, #7
 80040b6:	d9e3      	bls.n	8004080 <processJoinAccept+0x180>
        }
    }

    // already incremented when JOIN REQ got sent off
    aes_sessKeys(LMIC.devNonce-1, &LMIC.frame[OFF_JA_ARTNONCE], LMIC.nwkKey, LMIC.artKey);
 80040b8:	4b2c      	ldr	r3, [pc, #176]	@ (800416c <processJoinAccept+0x26c>)
 80040ba:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80040be:	3b01      	subs	r3, #1
 80040c0:	b298      	uxth	r0, r3
 80040c2:	4b32      	ldr	r3, [pc, #200]	@ (800418c <processJoinAccept+0x28c>)
 80040c4:	4a32      	ldr	r2, [pc, #200]	@ (8004190 <processJoinAccept+0x290>)
 80040c6:	492d      	ldr	r1, [pc, #180]	@ (800417c <processJoinAccept+0x27c>)
 80040c8:	f7fe fbac 	bl	8002824 <aes_sessKeys>
                        e_.mic     = mic,
                        e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                      ? EV::joininfo_t::REJOIN_ACCEPT
                                      : EV::joininfo_t::ACCEPT)));
    
    ASSERT((LMIC.opmode & (OP_JOINING|OP_REJOIN))!=0);
 80040cc:	4b27      	ldr	r3, [pc, #156]	@ (800416c <processJoinAccept+0x26c>)
 80040ce:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80040d2:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d101      	bne.n	80040de <processJoinAccept+0x1de>
 80040da:	f7fd ffeb 	bl	80020b4 <hal_failed>
    if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 80040de:	4b23      	ldr	r3, [pc, #140]	@ (800416c <processJoinAccept+0x26c>)
 80040e0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80040e4:	f003 0320 	and.w	r3, r3, #32
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00e      	beq.n	800410a <processJoinAccept+0x20a>
        // Lower DR every try below current UP DR
        LMIC.datarate = lowerDR(LMIC.datarate, LMIC.rejoinCnt);
 80040ec:	4b1f      	ldr	r3, [pc, #124]	@ (800416c <processJoinAccept+0x26c>)
 80040ee:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 80040f2:	4a1e      	ldr	r2, [pc, #120]	@ (800416c <processJoinAccept+0x26c>)
 80040f4:	f892 20b2 	ldrb.w	r2, [r2, #178]	@ 0xb2
 80040f8:	4611      	mov	r1, r2
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7fe f968 	bl	80023d0 <lowerDR>
 8004100:	4603      	mov	r3, r0
 8004102:	461a      	mov	r2, r3
 8004104:	4b19      	ldr	r3, [pc, #100]	@ (800416c <processJoinAccept+0x26c>)
 8004106:	f883 20b0 	strb.w	r2, [r3, #176]	@ 0xb0
    }
    LMIC.opmode &= ~(OP_JOINING|OP_TRACK|OP_REJOIN|OP_TXRXPEND|OP_PINGINI) | OP_NEXTCHNL;
 800410a:	4b18      	ldr	r3, [pc, #96]	@ (800416c <processJoinAccept+0x26c>)
 800410c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004110:	f423 7329 	bic.w	r3, r3, #676	@ 0x2a4
 8004114:	f023 0302 	bic.w	r3, r3, #2
 8004118:	b29a      	uxth	r2, r3
 800411a:	4b14      	ldr	r3, [pc, #80]	@ (800416c <processJoinAccept+0x26c>)
 800411c:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.txCnt = 0;
 8004120:	4b12      	ldr	r3, [pc, #72]	@ (800416c <processJoinAccept+0x26c>)
 8004122:	2200      	movs	r2, #0
 8004124:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    stateJustJoined();
 8004128:	f7ff f9f2 	bl	8003510 <stateJustJoined>
    LMIC.dn2Dr = LMIC.frame[OFF_JA_DLSET] & 0x0F;
 800412c:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <processJoinAccept+0x26c>)
 800412e:	f893 3153 	ldrb.w	r3, [r3, #339]	@ 0x153
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	b2da      	uxtb	r2, r3
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <processJoinAccept+0x26c>)
 800413a:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.rxDelay = LMIC.frame[OFF_JA_RXDLY];
 800413e:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <processJoinAccept+0x26c>)
 8004140:	f893 2154 	ldrb.w	r2, [r3, #340]	@ 0x154
 8004144:	4b09      	ldr	r3, [pc, #36]	@ (800416c <processJoinAccept+0x26c>)
 8004146:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    if (LMIC.rxDelay == 0) LMIC.rxDelay = 1;   
 800414a:	4b08      	ldr	r3, [pc, #32]	@ (800416c <processJoinAccept+0x26c>)
 800414c:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <processJoinAccept+0x25c>
 8004154:	4b05      	ldr	r3, [pc, #20]	@ (800416c <processJoinAccept+0x26c>)
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    reportEvent(EV_JOINED);
 800415c:	2006      	movs	r0, #6
 800415e:	f7ff f9b9 	bl	80034d4 <reportEvent>
    return 1;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000260 	.word	0x20000260
 8004170:	08003ee9 	.word	0x08003ee9
 8004174:	080034c1 	.word	0x080034c1
 8004178:	20000274 	.word	0x20000274
 800417c:	200003a9 	.word	0x200003a9
 8004180:	200003a8 	.word	0x200003a8
 8004184:	200003af 	.word	0x200003af
 8004188:	200003ac 	.word	0x200003ac
 800418c:	20000364 	.word	0x20000364
 8004190:	20000354 	.word	0x20000354

08004194 <processRx2Jacc>:


static void processRx2Jacc (xref2osjob_t osjob) {
 8004194:	b580      	push	{r7, lr}
 8004196:	b082      	sub	sp, #8
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 )
 800419c:	4b07      	ldr	r3, [pc, #28]	@ (80041bc <processRx2Jacc+0x28>)
 800419e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d103      	bne.n	80041ae <processRx2Jacc+0x1a>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 80041a6:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <processRx2Jacc+0x28>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
    processJoinAccept();
 80041ae:	f7ff fea7 	bl	8003f00 <processJoinAccept>
}
 80041b2:	bf00      	nop
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}
 80041ba:	bf00      	nop
 80041bc:	20000260 	.word	0x20000260

080041c0 <setupRx2Jacc>:


static void setupRx2Jacc (xref2osjob_t osjob) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b082      	sub	sp, #8
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2Jacc);
 80041c8:	4b04      	ldr	r3, [pc, #16]	@ (80041dc <setupRx2Jacc+0x1c>)
 80041ca:	4a05      	ldr	r2, [pc, #20]	@ (80041e0 <setupRx2Jacc+0x20>)
 80041cc:	61da      	str	r2, [r3, #28]
    setupRx2();
 80041ce:	f7ff fdcf 	bl	8003d70 <setupRx2>
}
 80041d2:	bf00      	nop
 80041d4:	3708      	adds	r7, #8
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	bf00      	nop
 80041dc:	20000260 	.word	0x20000260
 80041e0:	08004195 	.word	0x08004195

080041e4 <processRx1Jacc>:


static void processRx1Jacc (xref2osjob_t osjob) {
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processJoinAccept() )
 80041ec:	4b08      	ldr	r3, [pc, #32]	@ (8004210 <processRx1Jacc+0x2c>)
 80041ee:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d004      	beq.n	8004200 <processRx1Jacc+0x1c>
 80041f6:	f7ff fe83 	bl	8003f00 <processJoinAccept>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d103      	bne.n	8004208 <processRx1Jacc+0x24>
        schedRx2(DELAY_JACC2_osticks, FUNC_ADDR(setupRx2Jacc));
 8004200:	4904      	ldr	r1, [pc, #16]	@ (8004214 <processRx1Jacc+0x30>)
 8004202:	4805      	ldr	r0, [pc, #20]	@ (8004218 <processRx1Jacc+0x34>)
 8004204:	f7ff fdd4 	bl	8003db0 <schedRx2>
}
 8004208:	bf00      	nop
 800420a:	3708      	adds	r7, #8
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	20000260 	.word	0x20000260
 8004214:	080041c1 	.word	0x080041c1
 8004218:	0002ee00 	.word	0x0002ee00

0800421c <setupRx1Jacc>:


static void setupRx1Jacc (xref2osjob_t osjob) {
 800421c:	b580      	push	{r7, lr}
 800421e:	b082      	sub	sp, #8
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1Jacc));
 8004224:	4803      	ldr	r0, [pc, #12]	@ (8004234 <setupRx1Jacc+0x18>)
 8004226:	f7ff fdeb 	bl	8003e00 <setupRx1>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
 8004232:	bf00      	nop
 8004234:	080041e5 	.word	0x080041e5

08004238 <jreqDone>:


static void jreqDone (xref2osjob_t osjob) {
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
    txDone(DELAY_JACC1_osticks, FUNC_ADDR(setupRx1Jacc));
 8004240:	4903      	ldr	r1, [pc, #12]	@ (8004250 <jreqDone+0x18>)
 8004242:	4804      	ldr	r0, [pc, #16]	@ (8004254 <jreqDone+0x1c>)
 8004244:	f7ff fdfe 	bl	8003e44 <txDone>
}
 8004248:	bf00      	nop
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	0800421d 	.word	0x0800421d
 8004254:	00027100 	.word	0x00027100

08004258 <processRx2DnDataDelay>:
// ======================================== Data frames

// Fwd decl.
static bit_t processDnData(void);

static void processRx2DnDataDelay (xref2osjob_t osjob) {
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
    processDnData();
 8004260:	f000 fbc6 	bl	80049f0 <processDnData>
}
 8004264:	bf00      	nop
 8004266:	3708      	adds	r7, #8
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <processRx2DnData>:

static void processRx2DnData (xref2osjob_t osjob) {
 800426c:	b590      	push	{r4, r7, lr}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 ) {
 8004274:	4b0f      	ldr	r3, [pc, #60]	@ (80042b4 <processRx2DnData+0x48>)
 8004276:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800427a:	2b00      	cmp	r3, #0
 800427c:	d115      	bne.n	80042aa <processRx2DnData+0x3e>
        LMIC.txrxFlags = 0;  // nothing in 1st/2nd DN slot
 800427e:	4b0d      	ldr	r3, [pc, #52]	@ (80042b4 <processRx2DnData+0x48>)
 8004280:	2200      	movs	r2, #0
 8004282:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        // Delay callback processing to avoid up TX while gateway is txing our missed frame! 
        // Since DNW2 uses SF12 by default we wait 3 secs.
        os_setTimedCallback(&LMIC.osjob,
                            (os_getTime() + DNW2_SAFETY_ZONE + rndDelay(2)),
 8004286:	f001 fa47 	bl	8005718 <os_getTime>
 800428a:	4603      	mov	r3, r0
 800428c:	f503 34bb 	add.w	r4, r3, #95744	@ 0x17600
 8004290:	f504 7480 	add.w	r4, r4, #256	@ 0x100
 8004294:	2002      	movs	r0, #2
 8004296:	f7fe fd4f 	bl	8002d38 <rndDelay>
 800429a:	4603      	mov	r3, r0
        os_setTimedCallback(&LMIC.osjob,
 800429c:	4423      	add	r3, r4
 800429e:	4a06      	ldr	r2, [pc, #24]	@ (80042b8 <processRx2DnData+0x4c>)
 80042a0:	4619      	mov	r1, r3
 80042a2:	4806      	ldr	r0, [pc, #24]	@ (80042bc <processRx2DnData+0x50>)
 80042a4:	f001 faa2 	bl	80057ec <os_setTimedCallback>
                            FUNC_ADDR(processRx2DnDataDelay));
        return;
 80042a8:	e001      	b.n	80042ae <processRx2DnData+0x42>
    }
    processDnData();
 80042aa:	f000 fba1 	bl	80049f0 <processDnData>
}
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bd90      	pop	{r4, r7, pc}
 80042b4:	20000260 	.word	0x20000260
 80042b8:	08004259 	.word	0x08004259
 80042bc:	20000274 	.word	0x20000274

080042c0 <setupRx2DnData>:


static void setupRx2DnData (xref2osjob_t osjob) {
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b082      	sub	sp, #8
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processRx2DnData);
 80042c8:	4b04      	ldr	r3, [pc, #16]	@ (80042dc <setupRx2DnData+0x1c>)
 80042ca:	4a05      	ldr	r2, [pc, #20]	@ (80042e0 <setupRx2DnData+0x20>)
 80042cc:	61da      	str	r2, [r3, #28]
    setupRx2();
 80042ce:	f7ff fd4f 	bl	8003d70 <setupRx2>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000260 	.word	0x20000260
 80042e0:	0800426d 	.word	0x0800426d

080042e4 <processRx1DnData>:


static void processRx1DnData (xref2osjob_t osjob) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b082      	sub	sp, #8
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen == 0 || !processDnData() )
 80042ec:	4b0d      	ldr	r3, [pc, #52]	@ (8004324 <processRx1DnData+0x40>)
 80042ee:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <processRx1DnData+0x1c>
 80042f6:	f000 fb7b 	bl	80049f0 <processDnData>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10c      	bne.n	800431a <processRx1DnData+0x36>
        schedRx2(sec2osticks(LMIC.rxDelay + (int)DELAY_EXTDNW2), FUNC_ADDR(setupRx2DnData));
 8004300:	4b08      	ldr	r3, [pc, #32]	@ (8004324 <processRx1DnData+0x40>)
 8004302:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004306:	3301      	adds	r3, #1
 8004308:	461a      	mov	r2, r3
 800430a:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	4905      	ldr	r1, [pc, #20]	@ (8004328 <processRx1DnData+0x44>)
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff fd4b 	bl	8003db0 <schedRx2>
}
 800431a:	bf00      	nop
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	20000260 	.word	0x20000260
 8004328:	080042c1 	.word	0x080042c1

0800432c <setupRx1DnData>:


static void setupRx1DnData (xref2osjob_t osjob) {
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
    setupRx1(FUNC_ADDR(processRx1DnData));
 8004334:	4803      	ldr	r0, [pc, #12]	@ (8004344 <setupRx1DnData+0x18>)
 8004336:	f7ff fd63 	bl	8003e00 <setupRx1>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	080042e5 	.word	0x080042e5

08004348 <updataDone>:


static void updataDone (xref2osjob_t osjob) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
    txDone(sec2osticks(LMIC.rxDelay), FUNC_ADDR(setupRx1DnData));
 8004350:	4b07      	ldr	r3, [pc, #28]	@ (8004370 <updataDone+0x28>)
 8004352:	f893 3123 	ldrb.w	r3, [r3, #291]	@ 0x123
 8004356:	461a      	mov	r2, r3
 8004358:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	4904      	ldr	r1, [pc, #16]	@ (8004374 <updataDone+0x2c>)
 8004362:	4618      	mov	r0, r3
 8004364:	f7ff fd6e 	bl	8003e44 <txDone>
}
 8004368:	bf00      	nop
 800436a:	3708      	adds	r7, #8
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000260 	.word	0x20000260
 8004374:	0800432d 	.word	0x0800432d

08004378 <buildDataFrame>:

// ======================================== 


static void buildDataFrame (void) {
 8004378:	b590      	push	{r4, r7, lr}
 800437a:	b087      	sub	sp, #28
 800437c:	af02      	add	r7, sp, #8
    bit_t txdata = ((LMIC.opmode & (OP_TXDATA|OP_POLL)) != OP_POLL);
 800437e:	4ba3      	ldr	r3, [pc, #652]	@ (800460c <buildDataFrame+0x294>)
 8004380:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004384:	f003 0318 	and.w	r3, r3, #24
 8004388:	2b10      	cmp	r3, #16
 800438a:	bf14      	ite	ne
 800438c:	2301      	movne	r3, #1
 800438e:	2300      	moveq	r3, #0
 8004390:	b2db      	uxtb	r3, r3
 8004392:	73fb      	strb	r3, [r7, #15]
    u1_t dlen = txdata ? LMIC.pendTxLen : 0;
 8004394:	7bfb      	ldrb	r3, [r7, #15]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d003      	beq.n	80043a2 <buildDataFrame+0x2a>
 800439a:	4b9c      	ldr	r3, [pc, #624]	@ (800460c <buildDataFrame+0x294>)
 800439c:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80043a0:	e000      	b.n	80043a4 <buildDataFrame+0x2c>
 80043a2:	2300      	movs	r3, #0
 80043a4:	71bb      	strb	r3, [r7, #6]

    // Piggyback MAC options
    // Prioritize by importance
    int  end = OFF_DAT_OPTS;
 80043a6:	2308      	movs	r3, #8
 80043a8:	60bb      	str	r3, [r7, #8]
    if( (LMIC.opmode & (OP_TRACK|OP_PINGABLE)) == (OP_TRACK|OP_PINGABLE) ) {
 80043aa:	4b98      	ldr	r3, [pc, #608]	@ (800460c <buildDataFrame+0x294>)
 80043ac:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80043b0:	461a      	mov	r2, r3
 80043b2:	f240 4302 	movw	r3, #1026	@ 0x402
 80043b6:	4013      	ands	r3, r2
 80043b8:	f240 4202 	movw	r2, #1026	@ 0x402
 80043bc:	4293      	cmp	r3, r2
 80043be:	d11c      	bne.n	80043fa <buildDataFrame+0x82>
        // Indicate pingability in every UP frame
        LMIC.frame[end] = MCMD_PING_IND;
 80043c0:	4a92      	ldr	r2, [pc, #584]	@ (800460c <buildDataFrame+0x294>)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80043ca:	2210      	movs	r2, #16
 80043cc:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ping.dr | (LMIC.ping.intvExp<<4);
 80043ce:	4b8f      	ldr	r3, [pc, #572]	@ (800460c <buildDataFrame+0x294>)
 80043d0:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 80043d4:	b25a      	sxtb	r2, r3
 80043d6:	4b8d      	ldr	r3, [pc, #564]	@ (800460c <buildDataFrame+0x294>)
 80043d8:	f893 3135 	ldrb.w	r3, [r3, #309]	@ 0x135
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	b25b      	sxtb	r3, r3
 80043e0:	4313      	orrs	r3, r2
 80043e2:	b25a      	sxtb	r2, r3
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	3301      	adds	r3, #1
 80043e8:	b2d1      	uxtb	r1, r2
 80043ea:	4a88      	ldr	r2, [pc, #544]	@ (800460c <buildDataFrame+0x294>)
 80043ec:	4413      	add	r3, r2
 80043ee:	460a      	mov	r2, r1
 80043f0:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	3302      	adds	r3, #2
 80043f8:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.dutyCapAns ) {
 80043fa:	4b84      	ldr	r3, [pc, #528]	@ (800460c <buildDataFrame+0x294>)
 80043fc:	f893 3129 	ldrb.w	r3, [r3, #297]	@ 0x129
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <buildDataFrame+0xa8>
        LMIC.frame[end] = MCMD_DCAP_ANS;
 8004404:	4a81      	ldr	r2, [pc, #516]	@ (800460c <buildDataFrame+0x294>)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4413      	add	r3, r2
 800440a:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800440e:	2204      	movs	r2, #4
 8004410:	701a      	strb	r2, [r3, #0]
        end += 1;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	3301      	adds	r3, #1
 8004416:	60bb      	str	r3, [r7, #8]
        LMIC.dutyCapAns = 0;
 8004418:	4b7c      	ldr	r3, [pc, #496]	@ (800460c <buildDataFrame+0x294>)
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2129 	strb.w	r2, [r3, #297]	@ 0x129
    }
    if( LMIC.dn2Ans ) {
 8004420:	4b7a      	ldr	r3, [pc, #488]	@ (800460c <buildDataFrame+0x294>)
 8004422:	f893 3130 	ldrb.w	r3, [r3, #304]	@ 0x130
 8004426:	2b00      	cmp	r3, #0
 8004428:	d01a      	beq.n	8004460 <buildDataFrame+0xe8>
        LMIC.frame[end+0] = MCMD_DN2P_ANS;
 800442a:	4a78      	ldr	r2, [pc, #480]	@ (800460c <buildDataFrame+0x294>)
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	4413      	add	r3, r2
 8004430:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004434:	2205      	movs	r2, #5
 8004436:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.dn2Ans & ~MCMD_DN2P_ANS_RFU;
 8004438:	4b74      	ldr	r3, [pc, #464]	@ (800460c <buildDataFrame+0x294>)
 800443a:	f893 2130 	ldrb.w	r2, [r3, #304]	@ 0x130
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	3301      	adds	r3, #1
 8004442:	f002 0203 	and.w	r2, r2, #3
 8004446:	b2d1      	uxtb	r1, r2
 8004448:	4a70      	ldr	r2, [pc, #448]	@ (800460c <buildDataFrame+0x294>)
 800444a:	4413      	add	r3, r2
 800444c:	460a      	mov	r2, r1
 800444e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	3302      	adds	r3, #2
 8004456:	60bb      	str	r3, [r7, #8]
        LMIC.dn2Ans = 0;
 8004458:	4b6c      	ldr	r3, [pc, #432]	@ (800460c <buildDataFrame+0x294>)
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
    }
    if( LMIC.devsAns ) {  // answer to device status
 8004460:	4b6a      	ldr	r3, [pc, #424]	@ (800460c <buildDataFrame+0x294>)
 8004462:	f893 3126 	ldrb.w	r3, [r3, #294]	@ 0x126
 8004466:	2b00      	cmp	r3, #0
 8004468:	d021      	beq.n	80044ae <buildDataFrame+0x136>
        LMIC.frame[end+0] = MCMD_DEVS_ANS;
 800446a:	4a68      	ldr	r2, [pc, #416]	@ (800460c <buildDataFrame+0x294>)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4413      	add	r3, r2
 8004470:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004474:	2206      	movs	r2, #6
 8004476:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = os_getBattLevel();
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	1c5c      	adds	r4, r3, #1
 800447c:	f7fe f869 	bl	8002552 <os_getBattLevel>
 8004480:	4603      	mov	r3, r0
 8004482:	461a      	mov	r2, r3
 8004484:	4b61      	ldr	r3, [pc, #388]	@ (800460c <buildDataFrame+0x294>)
 8004486:	4423      	add	r3, r4
 8004488:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        LMIC.frame[end+2] = LMIC.margin;
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	3302      	adds	r3, #2
 8004490:	4a5e      	ldr	r2, [pc, #376]	@ (800460c <buildDataFrame+0x294>)
 8004492:	f892 1124 	ldrb.w	r1, [r2, #292]	@ 0x124
 8004496:	4a5d      	ldr	r2, [pc, #372]	@ (800460c <buildDataFrame+0x294>)
 8004498:	4413      	add	r3, r2
 800449a:	460a      	mov	r2, r1
 800449c:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 3;
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3303      	adds	r3, #3
 80044a4:	60bb      	str	r3, [r7, #8]
        LMIC.devsAns = 0;
 80044a6:	4b59      	ldr	r3, [pc, #356]	@ (800460c <buildDataFrame+0x294>)
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2126 	strb.w	r2, [r3, #294]	@ 0x126
    }
    if( LMIC.ladrAns ) {  // answer to ADR change
 80044ae:	4b57      	ldr	r3, [pc, #348]	@ (800460c <buildDataFrame+0x294>)
 80044b0:	f893 3125 	ldrb.w	r3, [r3, #293]	@ 0x125
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d01a      	beq.n	80044ee <buildDataFrame+0x176>
        LMIC.frame[end+0] = MCMD_LADR_ANS;
 80044b8:	4a54      	ldr	r2, [pc, #336]	@ (800460c <buildDataFrame+0x294>)
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80044c2:	2203      	movs	r2, #3
 80044c4:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.ladrAns & ~MCMD_LADR_ANS_RFU;
 80044c6:	4b51      	ldr	r3, [pc, #324]	@ (800460c <buildDataFrame+0x294>)
 80044c8:	f893 2125 	ldrb.w	r2, [r3, #293]	@ 0x125
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	3301      	adds	r3, #1
 80044d0:	f002 0207 	and.w	r2, r2, #7
 80044d4:	b2d1      	uxtb	r1, r2
 80044d6:	4a4d      	ldr	r2, [pc, #308]	@ (800460c <buildDataFrame+0x294>)
 80044d8:	4413      	add	r3, r2
 80044da:	460a      	mov	r2, r1
 80044dc:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	3302      	adds	r3, #2
 80044e4:	60bb      	str	r3, [r7, #8]
        LMIC.ladrAns = 0;
 80044e6:	4b49      	ldr	r3, [pc, #292]	@ (800460c <buildDataFrame+0x294>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2125 	strb.w	r2, [r3, #293]	@ 0x125
    }
    if( LMIC.bcninfoTries > 0 ) {
 80044ee:	4b47      	ldr	r3, [pc, #284]	@ (800460c <buildDataFrame+0x294>)
 80044f0:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d009      	beq.n	800450c <buildDataFrame+0x194>
        LMIC.frame[end] = MCMD_BCNI_REQ;
 80044f8:	4a44      	ldr	r2, [pc, #272]	@ (800460c <buildDataFrame+0x294>)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4413      	add	r3, r2
 80044fe:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004502:	2212      	movs	r2, #18
 8004504:	701a      	strb	r2, [r3, #0]
        end += 1;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	3301      	adds	r3, #1
 800450a:	60bb      	str	r3, [r7, #8]
    }
    if( LMIC.adrChanged ) {
 800450c:	4b3f      	ldr	r3, [pc, #252]	@ (800460c <buildDataFrame+0x294>)
 800450e:	f893 3122 	ldrb.w	r3, [r3, #290]	@ 0x122
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <buildDataFrame+0x1b8>
        if( LMIC.adrAckReq < 0 )
 8004516:	4b3d      	ldr	r3, [pc, #244]	@ (800460c <buildDataFrame+0x294>)
 8004518:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 800451c:	2b00      	cmp	r3, #0
 800451e:	da03      	bge.n	8004528 <buildDataFrame+0x1b0>
            LMIC.adrAckReq = 0;
 8004520:	4b3a      	ldr	r3, [pc, #232]	@ (800460c <buildDataFrame+0x294>)
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.adrChanged = 0;
 8004528:	4b38      	ldr	r3, [pc, #224]	@ (800460c <buildDataFrame+0x294>)
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
    }
    if( LMIC.pingSetAns != 0 ) {
 8004530:	4b36      	ldr	r3, [pc, #216]	@ (800460c <buildDataFrame+0x294>)
 8004532:	f893 3133 	ldrb.w	r3, [r3, #307]	@ 0x133
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01a      	beq.n	8004570 <buildDataFrame+0x1f8>
        LMIC.frame[end+0] = MCMD_PING_ANS;
 800453a:	4a34      	ldr	r2, [pc, #208]	@ (800460c <buildDataFrame+0x294>)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	4413      	add	r3, r2
 8004540:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004544:	2211      	movs	r2, #17
 8004546:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.pingSetAns & ~MCMD_PING_ANS_RFU;
 8004548:	4b30      	ldr	r3, [pc, #192]	@ (800460c <buildDataFrame+0x294>)
 800454a:	f893 2133 	ldrb.w	r2, [r3, #307]	@ 0x133
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3301      	adds	r3, #1
 8004552:	f002 0201 	and.w	r2, r2, #1
 8004556:	b2d1      	uxtb	r1, r2
 8004558:	4a2c      	ldr	r2, [pc, #176]	@ (800460c <buildDataFrame+0x294>)
 800455a:	4413      	add	r3, r2
 800455c:	460a      	mov	r2, r1
 800455e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	3302      	adds	r3, #2
 8004566:	60bb      	str	r3, [r7, #8]
        LMIC.pingSetAns = 0;
 8004568:	4b28      	ldr	r3, [pc, #160]	@ (800460c <buildDataFrame+0x294>)
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2133 	strb.w	r2, [r3, #307]	@ 0x133
    }
    if( LMIC.snchAns ) {
 8004570:	4b26      	ldr	r3, [pc, #152]	@ (800460c <buildDataFrame+0x294>)
 8004572:	f893 312a 	ldrb.w	r3, [r3, #298]	@ 0x12a
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01a      	beq.n	80045b0 <buildDataFrame+0x238>
        LMIC.frame[end+0] = MCMD_SNCH_ANS;
 800457a:	4a24      	ldr	r2, [pc, #144]	@ (800460c <buildDataFrame+0x294>)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	4413      	add	r3, r2
 8004580:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8004584:	2207      	movs	r2, #7
 8004586:	701a      	strb	r2, [r3, #0]
        LMIC.frame[end+1] = LMIC.snchAns & ~MCMD_SNCH_ANS_RFU;
 8004588:	4b20      	ldr	r3, [pc, #128]	@ (800460c <buildDataFrame+0x294>)
 800458a:	f893 212a 	ldrb.w	r2, [r3, #298]	@ 0x12a
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	3301      	adds	r3, #1
 8004592:	f002 0203 	and.w	r2, r2, #3
 8004596:	b2d1      	uxtb	r1, r2
 8004598:	4a1c      	ldr	r2, [pc, #112]	@ (800460c <buildDataFrame+0x294>)
 800459a:	4413      	add	r3, r2
 800459c:	460a      	mov	r2, r1
 800459e:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
        end += 2;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	3302      	adds	r3, #2
 80045a6:	60bb      	str	r3, [r7, #8]
        LMIC.snchAns = 0;
 80045a8:	4b18      	ldr	r3, [pc, #96]	@ (800460c <buildDataFrame+0x294>)
 80045aa:	2200      	movs	r2, #0
 80045ac:	f883 212a 	strb.w	r2, [r3, #298]	@ 0x12a
    }
    ASSERT(end <= OFF_DAT_OPTS+16);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	2b18      	cmp	r3, #24
 80045b4:	dd01      	ble.n	80045ba <buildDataFrame+0x242>
 80045b6:	f7fd fd7d 	bl	80020b4 <hal_failed>

    u1_t flen = end + (txdata ? 5+dlen : 4);
 80045ba:	7bfb      	ldrb	r3, [r7, #15]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <buildDataFrame+0x250>
 80045c0:	79bb      	ldrb	r3, [r7, #6]
 80045c2:	3305      	adds	r3, #5
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	e000      	b.n	80045ca <buildDataFrame+0x252>
 80045c8:	2304      	movs	r3, #4
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	4413      	add	r3, r2
 80045d0:	71fb      	strb	r3, [r7, #7]
    if( flen > MAX_LEN_FRAME ) {
 80045d2:	79fb      	ldrb	r3, [r7, #7]
 80045d4:	2b40      	cmp	r3, #64	@ 0x40
 80045d6:	d905      	bls.n	80045e4 <buildDataFrame+0x26c>
        // Options and payload too big - delay payload
        txdata = 0;
 80045d8:	2300      	movs	r3, #0
 80045da:	73fb      	strb	r3, [r7, #15]
        flen = end+4;
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	3304      	adds	r3, #4
 80045e2:	71fb      	strb	r3, [r7, #7]
    }
    LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DAUP | HDR_MAJOR_V1;
 80045e4:	4b09      	ldr	r3, [pc, #36]	@ (800460c <buildDataFrame+0x294>)
 80045e6:	2240      	movs	r2, #64	@ 0x40
 80045e8:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 80045ec:	4b07      	ldr	r3, [pc, #28]	@ (800460c <buildDataFrame+0x294>)
 80045ee:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 80045f2:	4b06      	ldr	r3, [pc, #24]	@ (800460c <buildDataFrame+0x294>)
 80045f4:	f893 3127 	ldrb.w	r3, [r3, #295]	@ 0x127
                              | (LMIC.adrAckReq >= 0 ? FCT_ADRARQ : 0)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	b25b      	sxtb	r3, r3
 80045fe:	4a03      	ldr	r2, [pc, #12]	@ (800460c <buildDataFrame+0x294>)
 8004600:	f992 2121 	ldrsb.w	r2, [r2, #289]	@ 0x121
 8004604:	2a00      	cmp	r2, #0
 8004606:	db03      	blt.n	8004610 <buildDataFrame+0x298>
 8004608:	2240      	movs	r2, #64	@ 0x40
 800460a:	e002      	b.n	8004612 <buildDataFrame+0x29a>
 800460c:	20000260 	.word	0x20000260
 8004610:	2200      	movs	r2, #0
 8004612:	4313      	orrs	r3, r2
 8004614:	b25a      	sxtb	r2, r3
                              | (end-OFF_DAT_OPTS));
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	3b08      	subs	r3, #8
 800461c:	b2db      	uxtb	r3, r3
 800461e:	b25b      	sxtb	r3, r3
 8004620:	4313      	orrs	r3, r2
 8004622:	b25b      	sxtb	r3, r3
 8004624:	b2da      	uxtb	r2, r3
    LMIC.frame[OFF_DAT_FCT] = (LMIC.dnConf | LMIC.adrEnabled
 8004626:	4b40      	ldr	r3, [pc, #256]	@ (8004728 <buildDataFrame+0x3b0>)
 8004628:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
    os_wlsbf4(LMIC.frame+OFF_DAT_ADDR,  LMIC.devaddr);
 800462c:	4a3f      	ldr	r2, [pc, #252]	@ (800472c <buildDataFrame+0x3b4>)
 800462e:	4b3e      	ldr	r3, [pc, #248]	@ (8004728 <buildDataFrame+0x3b0>)
 8004630:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004634:	4619      	mov	r1, r3
 8004636:	4610      	mov	r0, r2
 8004638:	f7fd ff49 	bl	80024ce <os_wlsbf4>

    if( LMIC.txCnt == 0 ) {
 800463c:	4b3a      	ldr	r3, [pc, #232]	@ (8004728 <buildDataFrame+0x3b0>)
 800463e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004642:	2b00      	cmp	r3, #0
 8004644:	d106      	bne.n	8004654 <buildDataFrame+0x2dc>
        LMIC.seqnoUp += 1;
 8004646:	4b38      	ldr	r3, [pc, #224]	@ (8004728 <buildDataFrame+0x3b0>)
 8004648:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800464c:	3301      	adds	r3, #1
 800464e:	4a36      	ldr	r2, [pc, #216]	@ (8004728 <buildDataFrame+0x3b0>)
 8004650:	f8c2 311c 	str.w	r3, [r2, #284]	@ 0x11c
                           e_.info   = LMIC.seqnoUp-1,
                           e_.info2  = ((LMIC.txCnt+1) |
                                        (DRADJUST[LMIC.txCnt+1] << 8) |
                                        ((LMIC.datarate|DR_PAGE)<<16))));
    }
    os_wlsbf2(LMIC.frame+OFF_DAT_SEQNO, LMIC.seqnoUp-1);
 8004654:	4a36      	ldr	r2, [pc, #216]	@ (8004730 <buildDataFrame+0x3b8>)
 8004656:	4b34      	ldr	r3, [pc, #208]	@ (8004728 <buildDataFrame+0x3b0>)
 8004658:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 800465c:	b29b      	uxth	r3, r3
 800465e:	3b01      	subs	r3, #1
 8004660:	b29b      	uxth	r3, r3
 8004662:	4619      	mov	r1, r3
 8004664:	4610      	mov	r0, r2
 8004666:	f7fd ff1b 	bl	80024a0 <os_wlsbf2>

    // Clear pending DN confirmation
    LMIC.dnConf = 0;
 800466a:	4b2f      	ldr	r3, [pc, #188]	@ (8004728 <buildDataFrame+0x3b0>)
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120

    if( txdata ) {
 8004672:	7bfb      	ldrb	r3, [r7, #15]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d03e      	beq.n	80046f6 <buildDataFrame+0x37e>
        if( LMIC.pendTxConf ) {
 8004678:	4b2b      	ldr	r3, [pc, #172]	@ (8004728 <buildDataFrame+0x3b0>)
 800467a:	f893 30bb 	ldrb.w	r3, [r3, #187]	@ 0xbb
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00c      	beq.n	800469c <buildDataFrame+0x324>
            // Confirmed only makes sense if we have a payload (or at least a port)
            LMIC.frame[OFF_DAT_HDR] = HDR_FTYPE_DCUP | HDR_MAJOR_V1;
 8004682:	4b29      	ldr	r3, [pc, #164]	@ (8004728 <buildDataFrame+0x3b0>)
 8004684:	2280      	movs	r2, #128	@ 0x80
 8004686:	f883 2148 	strb.w	r2, [r3, #328]	@ 0x148
            if( LMIC.txCnt == 0 ) LMIC.txCnt = 1;
 800468a:	4b27      	ldr	r3, [pc, #156]	@ (8004728 <buildDataFrame+0x3b0>)
 800468c:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004690:	2b00      	cmp	r3, #0
 8004692:	d103      	bne.n	800469c <buildDataFrame+0x324>
 8004694:	4b24      	ldr	r3, [pc, #144]	@ (8004728 <buildDataFrame+0x3b0>)
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        }
        LMIC.frame[end] = LMIC.pendTxPort;
 800469c:	4b22      	ldr	r3, [pc, #136]	@ (8004728 <buildDataFrame+0x3b0>)
 800469e:	f893 10ba 	ldrb.w	r1, [r3, #186]	@ 0xba
 80046a2:	4a21      	ldr	r2, [pc, #132]	@ (8004728 <buildDataFrame+0x3b0>)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80046ac:	460a      	mov	r2, r1
 80046ae:	701a      	strb	r2, [r3, #0]
        os_copyMem(LMIC.frame+end+1, LMIC.pendTxData, dlen);
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	3301      	adds	r3, #1
 80046b4:	4a1f      	ldr	r2, [pc, #124]	@ (8004734 <buildDataFrame+0x3bc>)
 80046b6:	4413      	add	r3, r2
 80046b8:	79ba      	ldrb	r2, [r7, #6]
 80046ba:	491f      	ldr	r1, [pc, #124]	@ (8004738 <buildDataFrame+0x3c0>)
 80046bc:	4618      	mov	r0, r3
 80046be:	f009 ff6e 	bl	800e59e <memcpy>
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80046c2:	4b19      	ldr	r3, [pc, #100]	@ (8004728 <buildDataFrame+0x3b0>)
 80046c4:	f893 30ba 	ldrb.w	r3, [r3, #186]	@ 0xba
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <buildDataFrame+0x358>
 80046cc:	481b      	ldr	r0, [pc, #108]	@ (800473c <buildDataFrame+0x3c4>)
 80046ce:	e000      	b.n	80046d2 <buildDataFrame+0x35a>
 80046d0:	481b      	ldr	r0, [pc, #108]	@ (8004740 <buildDataFrame+0x3c8>)
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <buildDataFrame+0x3b0>)
 80046d4:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                   LMIC.devaddr, LMIC.seqnoUp-1,
 80046d8:	4b13      	ldr	r3, [pc, #76]	@ (8004728 <buildDataFrame+0x3b0>)
 80046da:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80046de:	1e5c      	subs	r4, r3, #1
                   /*up*/0, LMIC.frame+end+1, dlen);
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	3301      	adds	r3, #1
        aes_cipher(LMIC.pendTxPort==0 ? LMIC.nwkKey : LMIC.artKey,
 80046e4:	4a13      	ldr	r2, [pc, #76]	@ (8004734 <buildDataFrame+0x3bc>)
 80046e6:	4413      	add	r3, r2
 80046e8:	79ba      	ldrb	r2, [r7, #6]
 80046ea:	9201      	str	r2, [sp, #4]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	2300      	movs	r3, #0
 80046f0:	4622      	mov	r2, r4
 80046f2:	f7fe f853 	bl	800279c <aes_cipher>
    }
    aes_appendMic(LMIC.nwkKey, LMIC.devaddr, LMIC.seqnoUp-1, /*up*/0, LMIC.frame, flen-4);
 80046f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <buildDataFrame+0x3b0>)
 80046f8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80046fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004728 <buildDataFrame+0x3b0>)
 80046fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004702:	1e5a      	subs	r2, r3, #1
 8004704:	79fb      	ldrb	r3, [r7, #7]
 8004706:	3b04      	subs	r3, #4
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	4b0a      	ldr	r3, [pc, #40]	@ (8004734 <buildDataFrame+0x3bc>)
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	2300      	movs	r3, #0
 8004710:	480a      	ldr	r0, [pc, #40]	@ (800473c <buildDataFrame+0x3c4>)
 8004712:	f7fd ffc5 	bl	80026a0 <aes_appendMic>
                       e_.fct     = LMIC.frame[LORA::OFF_DAT_FCT],
                       e_.port    = LMIC.pendTxPort,
                       e_.plen    = txdata ? dlen : 0,
                       e_.opts.length = end-LORA::OFF_DAT_OPTS,
                       memcpy(&e_.opts[0], LMIC.frame+LORA::OFF_DAT_OPTS, end-LORA::OFF_DAT_OPTS)));
    LMIC.dataLen = flen;
 8004716:	4a04      	ldr	r2, [pc, #16]	@ (8004728 <buildDataFrame+0x3b0>)
 8004718:	79fb      	ldrb	r3, [r7, #7]
 800471a:	f882 3147 	strb.w	r3, [r2, #327]	@ 0x147
}
 800471e:	bf00      	nop
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	bd90      	pop	{r4, r7, pc}
 8004726:	bf00      	nop
 8004728:	20000260 	.word	0x20000260
 800472c:	200003a9 	.word	0x200003a9
 8004730:	200003ae 	.word	0x200003ae
 8004734:	200003a8 	.word	0x200003a8
 8004738:	2000031d 	.word	0x2000031d
 800473c:	20000354 	.word	0x20000354
 8004740:	20000364 	.word	0x20000364

08004744 <onBcnRx>:


// Callback from HAL during scan mode or when job timer expires.
static void onBcnRx (xref2osjob_t job) {
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
    // If we arrive via job timer make sure to put radio to rest.
    os_radio(RADIO_RST);
 800474c:	2000      	movs	r0, #0
 800474e:	f001 fe09 	bl	8006364 <os_radio>
    os_clearCallback(&LMIC.osjob);
 8004752:	4823      	ldr	r0, [pc, #140]	@ (80047e0 <onBcnRx+0x9c>)
 8004754:	f001 f806 	bl	8005764 <os_clearCallback>
    if( LMIC.dataLen == 0 ) {
 8004758:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <onBcnRx+0xa0>)
 800475a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800475e:	2b00      	cmp	r3, #0
 8004760:	d10c      	bne.n	800477c <onBcnRx+0x38>
        // Nothing received - timeout
        LMIC.opmode &= ~(OP_SCAN | OP_TRACK);
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <onBcnRx+0xa0>)
 8004764:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004768:	f023 0303 	bic.w	r3, r3, #3
 800476c:	b29a      	uxth	r2, r3
 800476e:	4b1d      	ldr	r3, [pc, #116]	@ (80047e4 <onBcnRx+0xa0>)
 8004770:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        reportEvent(EV_SCAN_TIMEOUT);
 8004774:	2001      	movs	r0, #1
 8004776:	f7fe fead 	bl	80034d4 <reportEvent>
        return;
 800477a:	e02d      	b.n	80047d8 <onBcnRx+0x94>
    }
    if( decodeBeacon() <= 0 ) {
 800477c:	f7fe ff2e 	bl	80035dc <decodeBeacon>
 8004780:	4603      	mov	r3, r0
 8004782:	2b00      	cmp	r3, #0
 8004784:	dc0f      	bgt.n	80047a6 <onBcnRx+0x62>
        // Something is wrong with the beacon - continue scan
        LMIC.dataLen = 0;
 8004786:	4b17      	ldr	r3, [pc, #92]	@ (80047e4 <onBcnRx+0xa0>)
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        os_radio(RADIO_RXON);
 800478e:	2003      	movs	r0, #3
 8004790:	f001 fde8 	bl	8006364 <os_radio>
        os_setTimedCallback(&LMIC.osjob, LMIC.bcninfo.txtime, FUNC_ADDR(onBcnRx));
 8004794:	4b13      	ldr	r3, [pc, #76]	@ (80047e4 <onBcnRx+0xa0>)
 8004796:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 800479a:	4a13      	ldr	r2, [pc, #76]	@ (80047e8 <onBcnRx+0xa4>)
 800479c:	4619      	mov	r1, r3
 800479e:	4810      	ldr	r0, [pc, #64]	@ (80047e0 <onBcnRx+0x9c>)
 80047a0:	f001 f824 	bl	80057ec <os_setTimedCallback>
        return;
 80047a4:	e018      	b.n	80047d8 <onBcnRx+0x94>
    }
    // Found our 1st beacon
    // We don't have a previous beacon to calc some drift - assume
    // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
    calcBcnRxWindowFromMillis(13,1);
 80047a6:	2101      	movs	r1, #1
 80047a8:	200d      	movs	r0, #13
 80047aa:	f7fe f983 	bl	8002ab4 <calcBcnRxWindowFromMillis>
    LMIC.opmode &= ~OP_SCAN;          // turn SCAN off
 80047ae:	4b0d      	ldr	r3, [pc, #52]	@ (80047e4 <onBcnRx+0xa0>)
 80047b0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80047b4:	f023 0301 	bic.w	r3, r3, #1
 80047b8:	b29a      	uxth	r2, r3
 80047ba:	4b0a      	ldr	r3, [pc, #40]	@ (80047e4 <onBcnRx+0xa0>)
 80047bc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.opmode |=  OP_TRACK;         // auto enable tracking
 80047c0:	4b08      	ldr	r3, [pc, #32]	@ (80047e4 <onBcnRx+0xa0>)
 80047c2:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80047c6:	f043 0302 	orr.w	r3, r3, #2
 80047ca:	b29a      	uxth	r2, r3
 80047cc:	4b05      	ldr	r3, [pc, #20]	@ (80047e4 <onBcnRx+0xa0>)
 80047ce:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    reportEvent(EV_BEACON_FOUND);    // can be disabled in callback
 80047d2:	2002      	movs	r0, #2
 80047d4:	f7fe fe7e 	bl	80034d4 <reportEvent>
}
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	20000274 	.word	0x20000274
 80047e4:	20000260 	.word	0x20000260
 80047e8:	08004745 	.word	0x08004745

080047ec <startScan>:
// Enable receiver to listen to incoming beacons
// netid defines when scan stops (any or specific beacon)
// This mode ends with events: EV_SCAN_TIMEOUT/EV_SCAN_BEACON
// Implicitely cancels any pending TX/RX transaction.
// Also cancels an onpoing joining procedure.
static void startScan (void) {
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
    ASSERT(LMIC.devaddr!=0 && (LMIC.opmode & OP_JOINING)==0);
 80047f0:	4b27      	ldr	r3, [pc, #156]	@ (8004890 <startScan+0xa4>)
 80047f2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d006      	beq.n	8004808 <startScan+0x1c>
 80047fa:	4b25      	ldr	r3, [pc, #148]	@ (8004890 <startScan+0xa4>)
 80047fc:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004800:	f003 0304 	and.w	r3, r3, #4
 8004804:	2b00      	cmp	r3, #0
 8004806:	d001      	beq.n	800480c <startScan+0x20>
 8004808:	f7fd fc54 	bl	80020b4 <hal_failed>
    if( (LMIC.opmode & OP_SHUTDOWN) != 0 )
 800480c:	4b20      	ldr	r3, [pc, #128]	@ (8004890 <startScan+0xa4>)
 800480e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d137      	bne.n	800488a <startScan+0x9e>
        return;
    // Cancel onging TX/RX transaction
    LMIC.txCnt = LMIC.dnConf = LMIC.bcninfo.flags = 0;
 800481a:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <startScan+0xa4>)
 800481c:	2200      	movs	r2, #0
 800481e:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
 8004822:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <startScan+0xa4>)
 8004824:	f893 2196 	ldrb.w	r2, [r3, #406]	@ 0x196
 8004828:	4b19      	ldr	r3, [pc, #100]	@ (8004890 <startScan+0xa4>)
 800482a:	f883 2120 	strb.w	r2, [r3, #288]	@ 0x120
 800482e:	4b18      	ldr	r3, [pc, #96]	@ (8004890 <startScan+0xa4>)
 8004830:	f893 2120 	ldrb.w	r2, [r3, #288]	@ 0x120
 8004834:	4b16      	ldr	r3, [pc, #88]	@ (8004890 <startScan+0xa4>)
 8004836:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    LMIC.opmode = (LMIC.opmode | OP_SCAN) & ~(OP_TXRXPEND);
 800483a:	4b15      	ldr	r3, [pc, #84]	@ (8004890 <startScan+0xa4>)
 800483c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	b29b      	uxth	r3, r3
 8004846:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800484a:	b29a      	uxth	r2, r3
 800484c:	4b10      	ldr	r3, [pc, #64]	@ (8004890 <startScan+0xa4>)
 800484e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    setBcnRxParams();
 8004852:	f7fe fd71 	bl	8003338 <setBcnRxParams>
    LMIC.rxtime = LMIC.bcninfo.txtime = os_getTime() + sec2osticks(BCN_INTV_sec+1);
 8004856:	f000 ff5f 	bl	8005718 <os_getTime>
 800485a:	4603      	mov	r3, r0
 800485c:	f503 137b 	add.w	r3, r3, #4112384	@ 0x3ec000
 8004860:	f503 5374 	add.w	r3, r3, #15616	@ 0x3d00
 8004864:	4a0a      	ldr	r2, [pc, #40]	@ (8004890 <startScan+0xa4>)
 8004866:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
 800486a:	4b09      	ldr	r3, [pc, #36]	@ (8004890 <startScan+0xa4>)
 800486c:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004870:	4a07      	ldr	r2, [pc, #28]	@ (8004890 <startScan+0xa4>)
 8004872:	6053      	str	r3, [r2, #4]
    os_setTimedCallback(&LMIC.osjob, LMIC.rxtime, FUNC_ADDR(onBcnRx));
 8004874:	4b06      	ldr	r3, [pc, #24]	@ (8004890 <startScan+0xa4>)
 8004876:	685b      	ldr	r3, [r3, #4]
 8004878:	4a06      	ldr	r2, [pc, #24]	@ (8004894 <startScan+0xa8>)
 800487a:	4619      	mov	r1, r3
 800487c:	4806      	ldr	r0, [pc, #24]	@ (8004898 <startScan+0xac>)
 800487e:	f000 ffb5 	bl	80057ec <os_setTimedCallback>
    os_radio(RADIO_RXON);
 8004882:	2003      	movs	r0, #3
 8004884:	f001 fd6e 	bl	8006364 <os_radio>
 8004888:	e000      	b.n	800488c <startScan+0xa0>
        return;
 800488a:	bf00      	nop
}
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	20000260 	.word	0x20000260
 8004894:	08004745 	.word	0x08004745
 8004898:	20000274 	.word	0x20000274

0800489c <buildJoinRequest>:
//
// Join stuff
//
// ================================================================================

static void buildJoinRequest (u1_t ftype) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	4603      	mov	r3, r0
 80048a4:	71fb      	strb	r3, [r7, #7]
    // Do not use pendTxData since we might have a pending
    // user level frame in there. Use RX holding area instead.
    xref2u1_t d = LMIC.frame;
 80048a6:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <buildJoinRequest+0x64>)
 80048a8:	60fb      	str	r3, [r7, #12]
    d[OFF_JR_HDR] = ftype;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	79fa      	ldrb	r2, [r7, #7]
 80048ae:	701a      	strb	r2, [r3, #0]
    os_getArtEui(d + OFF_JR_ARTEUI);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3301      	adds	r3, #1
 80048b4:	4618      	mov	r0, r3
 80048b6:	f000 fd33 	bl	8005320 <os_getArtEui>
    os_getDevEui(d + OFF_JR_DEVEUI);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3309      	adds	r3, #9
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fd42 	bl	8005348 <os_getDevEui>
    os_wlsbf2(d + OFF_JR_DEVNONCE, LMIC.devNonce);
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3311      	adds	r3, #17
 80048c8:	4a0e      	ldr	r2, [pc, #56]	@ (8004904 <buildJoinRequest+0x68>)
 80048ca:	f8b2 20f2 	ldrh.w	r2, [r2, #242]	@ 0xf2
 80048ce:	4611      	mov	r1, r2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7fd fde5 	bl	80024a0 <os_wlsbf2>
    aes_appendMic0(d, OFF_JR_MIC);
 80048d6:	2113      	movs	r1, #19
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7fd ff09 	bl	80026f0 <aes_appendMic0>
                      e_.oldaddr = LMIC.devaddr,
                      e_.mic     = Base::lsbf4(&d[LORA::OFF_JR_MIC]),
                      e_.reason  = ((LMIC.opmode & OP_REJOIN) != 0
                                    ? EV::joininfo_t::REJOIN_REQUEST
                                    : EV::joininfo_t::REQUEST)));
    LMIC.dataLen = LEN_JR;
 80048de:	4b09      	ldr	r3, [pc, #36]	@ (8004904 <buildJoinRequest+0x68>)
 80048e0:	2217      	movs	r2, #23
 80048e2:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
    LMIC.devNonce++;
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <buildJoinRequest+0x68>)
 80048e8:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80048ec:	3301      	adds	r3, #1
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	4b04      	ldr	r3, [pc, #16]	@ (8004904 <buildJoinRequest+0x68>)
 80048f2:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    DO_DEVDB(LMIC.devNonce,devNonce);
}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200003a8 	.word	0x200003a8
 8004904:	20000260 	.word	0x20000260

08004908 <startJoining>:

static void startJoining (xref2osjob_t osjob) {
 8004908:	b580      	push	{r7, lr}
 800490a:	b082      	sub	sp, #8
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
    reportEvent(EV_JOINING);
 8004910:	2005      	movs	r0, #5
 8004912:	f7fe fddf 	bl	80034d4 <reportEvent>
}
 8004916:	bf00      	nop
 8004918:	3708      	adds	r7, #8
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
	...

08004920 <LMIC_startJoining>:

// Start join procedure if not already joined.
bit_t LMIC_startJoining (void) {
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
    if( LMIC.devaddr == 0 ) {
 8004924:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004926:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800492a:	2b00      	cmp	r3, #0
 800492c:	d138      	bne.n	80049a0 <LMIC_startJoining+0x80>
        // There should be no TX/RX going on
        ASSERT((LMIC.opmode & (OP_POLL|OP_TXRXPEND)) == 0);
 800492e:	4b1e      	ldr	r3, [pc, #120]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004930:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004934:	f003 0390 	and.w	r3, r3, #144	@ 0x90
 8004938:	2b00      	cmp	r3, #0
 800493a:	d001      	beq.n	8004940 <LMIC_startJoining+0x20>
 800493c:	f7fd fbba 	bl	80020b4 <hal_failed>
        // Lift any previous duty limitation
        LMIC.globalDutyRate = 0;
 8004940:	4b19      	ldr	r3, [pc, #100]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004942:	2200      	movs	r2, #0
 8004944:	f883 20a3 	strb.w	r2, [r3, #163]	@ 0xa3
        // Cancel scanning
        LMIC.opmode &= ~(OP_SCAN|OP_REJOIN|OP_LINKDEAD|OP_NEXTCHNL);
 8004948:	4b17      	ldr	r3, [pc, #92]	@ (80049a8 <LMIC_startJoining+0x88>)
 800494a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800494e:	f423 53c1 	bic.w	r3, r3, #6176	@ 0x1820
 8004952:	f023 0301 	bic.w	r3, r3, #1
 8004956:	b29a      	uxth	r2, r3
 8004958:	4b13      	ldr	r3, [pc, #76]	@ (80049a8 <LMIC_startJoining+0x88>)
 800495a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // Setup state
        LMIC.rejoinCnt = LMIC.txCnt = LMIC.pendTxConf = 0;
 800495e:	4b12      	ldr	r3, [pc, #72]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004960:	2200      	movs	r2, #0
 8004962:	f883 20bb 	strb.w	r2, [r3, #187]	@ 0xbb
 8004966:	4b10      	ldr	r3, [pc, #64]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004968:	f893 20bb 	ldrb.w	r2, [r3, #187]	@ 0xbb
 800496c:	4b0e      	ldr	r3, [pc, #56]	@ (80049a8 <LMIC_startJoining+0x88>)
 800496e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
 8004972:	4b0d      	ldr	r3, [pc, #52]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004974:	f893 2144 	ldrb.w	r2, [r3, #324]	@ 0x144
 8004978:	4b0b      	ldr	r3, [pc, #44]	@ (80049a8 <LMIC_startJoining+0x88>)
 800497a:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
        initJoinLoop();
 800497e:	f7fe fd01 	bl	8003384 <initJoinLoop>
        LMIC.opmode |= OP_JOINING;
 8004982:	4b09      	ldr	r3, [pc, #36]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004984:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004988:	f043 0304 	orr.w	r3, r3, #4
 800498c:	b29a      	uxth	r2, r3
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <LMIC_startJoining+0x88>)
 8004990:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        // reportEvent will call engineUpdate which then starts sending JOIN REQUESTS
        os_setCallback(&LMIC.osjob, FUNC_ADDR(startJoining));
 8004994:	4905      	ldr	r1, [pc, #20]	@ (80049ac <LMIC_startJoining+0x8c>)
 8004996:	4806      	ldr	r0, [pc, #24]	@ (80049b0 <LMIC_startJoining+0x90>)
 8004998:	f000 ff02 	bl	80057a0 <os_setCallback>
        return 1;
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <LMIC_startJoining+0x82>
    }
    return 0; // already joined
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	20000260 	.word	0x20000260
 80049ac:	08004909 	.word	0x08004909
 80049b0:	20000274 	.word	0x20000274

080049b4 <processPingRx>:
//
//
//
// ================================================================================

static void processPingRx (xref2osjob_t osjob) {
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
    if( LMIC.dataLen != 0 ) {
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <processPingRx+0x38>)
 80049be:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00c      	beq.n	80049e0 <processPingRx+0x2c>
        LMIC.txrxFlags = TXRX_PING;
 80049c6:	4b09      	ldr	r3, [pc, #36]	@ (80049ec <processPingRx+0x38>)
 80049c8:	2204      	movs	r2, #4
 80049ca:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( decodeFrame() ) {
 80049ce:	f7fe fe99 	bl	8003704 <decodeFrame>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d003      	beq.n	80049e0 <processPingRx+0x2c>
            reportEvent(EV_RXCOMPLETE);
 80049d8:	200d      	movs	r0, #13
 80049da:	f7fe fd7b 	bl	80034d4 <reportEvent>
            return;
 80049de:	e001      	b.n	80049e4 <processPingRx+0x30>
        }
    }
    // Pick next ping slot
    engineUpdate();
 80049e0:	f000 fa2a 	bl	8004e38 <engineUpdate>
}
 80049e4:	3708      	adds	r7, #8
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20000260 	.word	0x20000260

080049f0 <processDnData>:


static bit_t processDnData (void) {
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
    ASSERT((LMIC.opmode & OP_TXRXPEND)!=0);
 80049f4:	4b76      	ldr	r3, [pc, #472]	@ (8004bd0 <processDnData+0x1e0>)
 80049f6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80049fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <processDnData+0x16>
 8004a02:	f7fd fb57 	bl	80020b4 <hal_failed>

    if( LMIC.dataLen == 0 ) {
 8004a06:	4b72      	ldr	r3, [pc, #456]	@ (8004bd0 <processDnData+0x1e0>)
 8004a08:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f040 80ce 	bne.w	8004bae <processDnData+0x1be>
      norx:
 8004a12:	bf00      	nop
 8004a14:	e000      	b.n	8004a18 <processDnData+0x28>
        return 1;
    }
    if( !decodeFrame() ) {
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
            return 0;
        goto norx;
 8004a16:	bf00      	nop
        if( LMIC.txCnt != 0 ) {
 8004a18:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <processDnData+0x1e0>)
 8004a1a:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d038      	beq.n	8004a94 <processDnData+0xa4>
            if( LMIC.txCnt < TXCONF_ATTEMPTS ) {
 8004a22:	4b6b      	ldr	r3, [pc, #428]	@ (8004bd0 <processDnData+0x1e0>)
 8004a24:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004a28:	2b07      	cmp	r3, #7
 8004a2a:	d82e      	bhi.n	8004a8a <processDnData+0x9a>
                LMIC.txCnt += 1;
 8004a2c:	4b68      	ldr	r3, [pc, #416]	@ (8004bd0 <processDnData+0x1e0>)
 8004a2e:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004a32:	3301      	adds	r3, #1
 8004a34:	b2da      	uxtb	r2, r3
 8004a36:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <processDnData+0x1e0>)
 8004a38:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
                setDrTxpow(DRCHG_NOACK, lowerDR(LMIC.datarate, DRADJUST[LMIC.txCnt]), KEEP_TXPOW);
 8004a3c:	4b64      	ldr	r3, [pc, #400]	@ (8004bd0 <processDnData+0x1e0>)
 8004a3e:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004a42:	4a63      	ldr	r2, [pc, #396]	@ (8004bd0 <processDnData+0x1e0>)
 8004a44:	f892 2144 	ldrb.w	r2, [r2, #324]	@ 0x144
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4a62      	ldr	r2, [pc, #392]	@ (8004bd4 <processDnData+0x1e4>)
 8004a4c:	5c52      	ldrb	r2, [r2, r1]
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4618      	mov	r0, r3
 8004a52:	f7fd fcbd 	bl	80023d0 <lowerDR>
 8004a56:	4603      	mov	r3, r0
 8004a58:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	2002      	movs	r0, #2
 8004a60:	f7fe f9ea 	bl	8002e38 <setDrTxpow>
                txDelay(LMIC.rxtime, RETRY_PERIOD_secs);
 8004a64:	4b5a      	ldr	r3, [pc, #360]	@ (8004bd0 <processDnData+0x1e0>)
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2103      	movs	r1, #3
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe f9a2 	bl	8002db4 <txDelay>
                LMIC.opmode &= ~OP_TXRXPEND;
 8004a70:	4b57      	ldr	r3, [pc, #348]	@ (8004bd0 <processDnData+0x1e0>)
 8004a72:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004a76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	4b54      	ldr	r3, [pc, #336]	@ (8004bd0 <processDnData+0x1e0>)
 8004a7e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
                engineUpdate();
 8004a82:	f000 f9d9 	bl	8004e38 <engineUpdate>
                return 1;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e09f      	b.n	8004bca <processDnData+0x1da>
            LMIC.txrxFlags = TXRX_NACK | TXRX_NOPORT;
 8004a8a:	4b51      	ldr	r3, [pc, #324]	@ (8004bd0 <processDnData+0x1e0>)
 8004a8c:	2260      	movs	r2, #96	@ 0x60
 8004a8e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
 8004a92:	e003      	b.n	8004a9c <processDnData+0xac>
            LMIC.txrxFlags = TXRX_NOPORT;
 8004a94:	4b4e      	ldr	r3, [pc, #312]	@ (8004bd0 <processDnData+0x1e0>)
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
        if( LMIC.adrAckReq != LINK_CHECK_OFF )
 8004a9c:	4b4c      	ldr	r3, [pc, #304]	@ (8004bd0 <processDnData+0x1e0>)
 8004a9e:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004aa2:	f113 0f80 	cmn.w	r3, #128	@ 0x80
 8004aa6:	d009      	beq.n	8004abc <processDnData+0xcc>
            LMIC.adrAckReq += 1;
 8004aa8:	4b49      	ldr	r3, [pc, #292]	@ (8004bd0 <processDnData+0x1e0>)
 8004aaa:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	3301      	adds	r3, #1
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	b25a      	sxtb	r2, r3
 8004ab6:	4b46      	ldr	r3, [pc, #280]	@ (8004bd0 <processDnData+0x1e0>)
 8004ab8:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
        LMIC.dataBeg = LMIC.dataLen = 0;
 8004abc:	4b44      	ldr	r3, [pc, #272]	@ (8004bd0 <processDnData+0x1e0>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8004ac4:	4b42      	ldr	r3, [pc, #264]	@ (8004bd0 <processDnData+0x1e0>)
 8004ac6:	f893 2147 	ldrb.w	r2, [r3, #327]	@ 0x147
 8004aca:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <processDnData+0x1e0>)
 8004acc:	f883 2146 	strb.w	r2, [r3, #326]	@ 0x146
 8004ad0:	e000      	b.n	8004ad4 <processDnData+0xe4>
    }
    goto txcomplete;
 8004ad2:	bf00      	nop
        LMIC.opmode &= ~(OP_TXDATA|OP_TXRXPEND);
 8004ad4:	4b3e      	ldr	r3, [pc, #248]	@ (8004bd0 <processDnData+0x1e0>)
 8004ad6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ada:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004ade:	b29a      	uxth	r2, r3
 8004ae0:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd0 <processDnData+0x1e0>)
 8004ae2:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( (LMIC.txrxFlags & (TXRX_DNW1|TXRX_DNW2|TXRX_PING)) != 0  &&  (LMIC.opmode & OP_LINKDEAD) != 0 ) {
 8004ae6:	4b3a      	ldr	r3, [pc, #232]	@ (8004bd0 <processDnData+0x1e0>)
 8004ae8:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004aec:	f003 0307 	and.w	r3, r3, #7
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <processDnData+0x12a>
 8004af4:	4b36      	ldr	r3, [pc, #216]	@ (8004bd0 <processDnData+0x1e0>)
 8004af6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d00b      	beq.n	8004b1a <processDnData+0x12a>
            LMIC.opmode &= ~OP_LINKDEAD;
 8004b02:	4b33      	ldr	r3, [pc, #204]	@ (8004bd0 <processDnData+0x1e0>)
 8004b04:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b0c:	b29a      	uxth	r2, r3
 8004b0e:	4b30      	ldr	r3, [pc, #192]	@ (8004bd0 <processDnData+0x1e0>)
 8004b10:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_ALIVE);
 8004b14:	200f      	movs	r0, #15
 8004b16:	f7fe fcdd 	bl	80034d4 <reportEvent>
        reportEvent(EV_TXCOMPLETE);
 8004b1a:	200a      	movs	r0, #10
 8004b1c:	f7fe fcda 	bl	80034d4 <reportEvent>
        if( LMIC.adrAckReq > LINK_CHECK_DEAD ) {
 8004b20:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <processDnData+0x1e0>)
 8004b22:	f993 3121 	ldrsb.w	r3, [r3, #289]	@ 0x121
 8004b26:	2b18      	cmp	r3, #24
 8004b28:	dd1c      	ble.n	8004b64 <processDnData+0x174>
            setDrTxpow(DRCHG_NOADRACK, decDR((dr_t)LMIC.datarate), KEEP_TXPOW);
 8004b2a:	4b29      	ldr	r3, [pc, #164]	@ (8004bd0 <processDnData+0x1e0>)
 8004b2c:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fd fc1f 	bl	8002374 <decDR>
 8004b36:	4603      	mov	r3, r0
 8004b38:	f06f 027f 	mvn.w	r2, #127	@ 0x7f
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	2003      	movs	r0, #3
 8004b40:	f7fe f97a 	bl	8002e38 <setDrTxpow>
            LMIC.adrAckReq = LINK_CHECK_CONT;
 8004b44:	4b22      	ldr	r3, [pc, #136]	@ (8004bd0 <processDnData+0x1e0>)
 8004b46:	220c      	movs	r2, #12
 8004b48:	f883 2121 	strb.w	r2, [r3, #289]	@ 0x121
            LMIC.opmode |= OP_REJOIN|OP_LINKDEAD;
 8004b4c:	4b20      	ldr	r3, [pc, #128]	@ (8004bd0 <processDnData+0x1e0>)
 8004b4e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b52:	f443 5381 	orr.w	r3, r3, #4128	@ 0x1020
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	4b1d      	ldr	r3, [pc, #116]	@ (8004bd0 <processDnData+0x1e0>)
 8004b5a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LINK_DEAD);
 8004b5e:	200e      	movs	r0, #14
 8004b60:	f7fe fcb8 	bl	80034d4 <reportEvent>
        if( LMIC.bcninfoTries > 0 ) {
 8004b64:	4b1a      	ldr	r3, [pc, #104]	@ (8004bd0 <processDnData+0x1e0>)
 8004b66:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d01d      	beq.n	8004baa <processDnData+0x1ba>
            if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004b6e:	4b18      	ldr	r3, [pc, #96]	@ (8004bd0 <processDnData+0x1e0>)
 8004b70:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <processDnData+0x19c>
                reportEvent(EV_BEACON_FOUND);
 8004b7c:	2002      	movs	r0, #2
 8004b7e:	f7fe fca9 	bl	80034d4 <reportEvent>
                LMIC.bcninfoTries = 0;
 8004b82:	4b13      	ldr	r3, [pc, #76]	@ (8004bd0 <processDnData+0x1e0>)
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004b8a:	e00e      	b.n	8004baa <processDnData+0x1ba>
            else if( --LMIC.bcninfoTries == 0 ) {
 8004b8c:	4b10      	ldr	r3, [pc, #64]	@ (8004bd0 <processDnData+0x1e0>)
 8004b8e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004b92:	3b01      	subs	r3, #1
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	4b0e      	ldr	r3, [pc, #56]	@ (8004bd0 <processDnData+0x1e0>)
 8004b98:	f883 2132 	strb.w	r2, [r3, #306]	@ 0x132
 8004b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004bd0 <processDnData+0x1e0>)
 8004b9e:	f893 3132 	ldrb.w	r3, [r3, #306]	@ 0x132
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d101      	bne.n	8004baa <processDnData+0x1ba>
                startScan();   // NWK did not answer - try scan
 8004ba6:	f7ff fe21 	bl	80047ec <startScan>
        return 1;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e00d      	b.n	8004bca <processDnData+0x1da>
    if( !decodeFrame() ) {
 8004bae:	f7fe fda9 	bl	8003704 <decodeFrame>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d18c      	bne.n	8004ad2 <processDnData+0xe2>
        if( (LMIC.txrxFlags & TXRX_DNW1) != 0 )
 8004bb8:	4b05      	ldr	r3, [pc, #20]	@ (8004bd0 <processDnData+0x1e0>)
 8004bba:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f43f af27 	beq.w	8004a16 <processDnData+0x26>
            return 0;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000260 	.word	0x20000260
 8004bd4:	08010a14 	.word	0x08010a14

08004bd8 <processBeacon>:


static void processBeacon (xref2osjob_t osjob) {
 8004bd8:	b590      	push	{r4, r7, lr}
 8004bda:	b087      	sub	sp, #28
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
    ostime_t lasttx = LMIC.bcninfo.txtime;   // save here - decodeBeacon might overwrite
 8004be0:	4b81      	ldr	r3, [pc, #516]	@ (8004de8 <processBeacon+0x210>)
 8004be2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004be6:	60fb      	str	r3, [r7, #12]
    u1_t flags = LMIC.bcninfo.flags;
 8004be8:	4b7f      	ldr	r3, [pc, #508]	@ (8004de8 <processBeacon+0x210>)
 8004bea:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004bee:	72fb      	strb	r3, [r7, #11]
    ev_t ev;

    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8004de8 <processBeacon+0x210>)
 8004bf2:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 8087 	beq.w	8004d0a <processBeacon+0x132>
 8004bfc:	f7fe fcee 	bl	80035dc <decodeBeacon>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	f340 8081 	ble.w	8004d0a <processBeacon+0x132>
        ev = EV_BEACON_TRACKED;
 8004c08:	2304      	movs	r3, #4
 8004c0a:	75fb      	strb	r3, [r7, #23]
        if( (flags & (BCN_PARTIAL|BCN_FULL)) == 0 ) {
 8004c0c:	7afb      	ldrb	r3, [r7, #11]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <processBeacon+0x48>
            // We don't have a previous beacon to calc some drift - assume
            // an max error of 13ms = 128sec*100ppm which is roughly +/-100ppm
            calcBcnRxWindowFromMillis(13,0);
 8004c16:	2100      	movs	r1, #0
 8004c18:	200d      	movs	r0, #13
 8004c1a:	f7fd ff4b 	bl	8002ab4 <calcBcnRxWindowFromMillis>
            goto rev;
 8004c1e:	e0d2      	b.n	8004dc6 <processBeacon+0x1ee>
        }
        // We have a previous BEACON to calculate some drift
        s2_t drift = BCN_INTV_osticks - (LMIC.bcninfo.txtime - lasttx);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	4b70      	ldr	r3, [pc, #448]	@ (8004de8 <processBeacon+0x210>)
 8004c26:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	b29b      	uxth	r3, r3
 8004c30:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	82bb      	strh	r3, [r7, #20]
        if( LMIC.missedBcns > 0 ) {
 8004c38:	4b6b      	ldr	r3, [pc, #428]	@ (8004de8 <processBeacon+0x210>)
 8004c3a:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d013      	beq.n	8004c6a <processBeacon+0x92>
            drift = LMIC.drift + (drift - LMIC.drift) / (LMIC.missedBcns+1);
 8004c42:	4b69      	ldr	r3, [pc, #420]	@ (8004de8 <processBeacon+0x210>)
 8004c44:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004c48:	b29a      	uxth	r2, r3
 8004c4a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004c4e:	4966      	ldr	r1, [pc, #408]	@ (8004de8 <processBeacon+0x210>)
 8004c50:	f9b1 10b4 	ldrsh.w	r1, [r1, #180]	@ 0xb4
 8004c54:	1a59      	subs	r1, r3, r1
 8004c56:	4b64      	ldr	r3, [pc, #400]	@ (8004de8 <processBeacon+0x210>)
 8004c58:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	fb91 f3f3 	sdiv	r3, r1, r3
 8004c62:	b29b      	uxth	r3, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	b29b      	uxth	r3, r3
 8004c68:	82bb      	strh	r3, [r7, #20]
        }
        if( (LMIC.bcninfo.flags & BCN_NODRIFT) == 0 ) {
 8004c6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004de8 <processBeacon+0x210>)
 8004c6c:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d127      	bne.n	8004cc8 <processBeacon+0xf0>
            s2_t diff = LMIC.drift - drift;
 8004c78:	4b5b      	ldr	r3, [pc, #364]	@ (8004de8 <processBeacon+0x210>)
 8004c7a:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	8abb      	ldrh	r3, [r7, #20]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	827b      	strh	r3, [r7, #18]
            if( diff < 0 ) diff = -diff;
 8004c88:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	da03      	bge.n	8004c98 <processBeacon+0xc0>
 8004c90:	8a7b      	ldrh	r3, [r7, #18]
 8004c92:	425b      	negs	r3, r3
 8004c94:	b29b      	uxth	r3, r3
 8004c96:	827b      	strh	r3, [r7, #18]
            LMIC.lastDriftDiff = diff;
 8004c98:	4a53      	ldr	r2, [pc, #332]	@ (8004de8 <processBeacon+0x210>)
 8004c9a:	8a7b      	ldrh	r3, [r7, #18]
 8004c9c:	f8a2 30b6 	strh.w	r3, [r2, #182]	@ 0xb6
            if( LMIC.maxDriftDiff < diff )
 8004ca0:	4b51      	ldr	r3, [pc, #324]	@ (8004de8 <processBeacon+0x210>)
 8004ca2:	f9b3 30b8 	ldrsh.w	r3, [r3, #184]	@ 0xb8
 8004ca6:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	dd03      	ble.n	8004cb6 <processBeacon+0xde>
                LMIC.maxDriftDiff = diff;
 8004cae:	4a4e      	ldr	r2, [pc, #312]	@ (8004de8 <processBeacon+0x210>)
 8004cb0:	8a7b      	ldrh	r3, [r7, #18]
 8004cb2:	f8a2 30b8 	strh.w	r3, [r2, #184]	@ 0xb8
            LMIC.bcninfo.flags &= ~BCN_NODDIFF;
 8004cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8004de8 <processBeacon+0x210>)
 8004cb8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004cbc:	f023 0308 	bic.w	r3, r3, #8
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	4b49      	ldr	r3, [pc, #292]	@ (8004de8 <processBeacon+0x210>)
 8004cc4:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        }
        LMIC.drift = drift;
 8004cc8:	4a47      	ldr	r2, [pc, #284]	@ (8004de8 <processBeacon+0x210>)
 8004cca:	8abb      	ldrh	r3, [r7, #20]
 8004ccc:	f8a2 30b4 	strh.w	r3, [r2, #180]	@ 0xb4
        LMIC.missedBcns = LMIC.rejoinCnt = 0;
 8004cd0:	4b45      	ldr	r3, [pc, #276]	@ (8004de8 <processBeacon+0x210>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 20b2 	strb.w	r2, [r3, #178]	@ 0xb2
 8004cd8:	4b43      	ldr	r3, [pc, #268]	@ (8004de8 <processBeacon+0x210>)
 8004cda:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004cde:	4b42      	ldr	r3, [pc, #264]	@ (8004de8 <processBeacon+0x210>)
 8004ce0:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        LMIC.bcninfo.flags &= ~BCN_NODRIFT;
 8004ce4:	4b40      	ldr	r3, [pc, #256]	@ (8004de8 <processBeacon+0x210>)
 8004ce6:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004cea:	f023 0304 	bic.w	r3, r3, #4
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	4b3d      	ldr	r3, [pc, #244]	@ (8004de8 <processBeacon+0x210>)
 8004cf2:	f883 2196 	strb.w	r2, [r3, #406]	@ 0x196
        EV(devCond,INFO,(e_.reason = EV::devCond_t::CLOCK_DRIFT,
                         e_.eui    = MAIN::CDEV->getEui(),
                         e_.info   = drift,
                         e_.info2  = /*occasion BEACON*/0));
        ASSERT((LMIC.bcninfo.flags & (BCN_PARTIAL|BCN_FULL)) != 0);
 8004cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8004de8 <processBeacon+0x210>)
 8004cf8:	f893 3196 	ldrb.w	r3, [r3, #406]	@ 0x196
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d14c      	bne.n	8004d9e <processBeacon+0x1c6>
 8004d04:	f7fd f9d6 	bl	80020b4 <hal_failed>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004d08:	e049      	b.n	8004d9e <processBeacon+0x1c6>
    } else {
        ev = EV_BEACON_MISSED;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	75fb      	strb	r3, [r7, #23]
        LMIC.bcninfo.txtime += BCN_INTV_osticks - LMIC.drift;
 8004d0e:	4b36      	ldr	r3, [pc, #216]	@ (8004de8 <processBeacon+0x210>)
 8004d10:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 8004d14:	4b34      	ldr	r3, [pc, #208]	@ (8004de8 <processBeacon+0x210>)
 8004d16:	f9b3 30b4 	ldrsh.w	r3, [r3, #180]	@ 0xb4
 8004d1a:	f5c3 137a 	rsb	r3, r3, #4096000	@ 0x3e8000
 8004d1e:	4413      	add	r3, r2
 8004d20:	4a31      	ldr	r2, [pc, #196]	@ (8004de8 <processBeacon+0x210>)
 8004d22:	f8c2 3190 	str.w	r3, [r2, #400]	@ 0x190
        LMIC.bcninfo.time   += BCN_INTV_sec;
 8004d26:	4b30      	ldr	r3, [pc, #192]	@ (8004de8 <processBeacon+0x210>)
 8004d28:	f8d3 3198 	ldr.w	r3, [r3, #408]	@ 0x198
 8004d2c:	3380      	adds	r3, #128	@ 0x80
 8004d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8004de8 <processBeacon+0x210>)
 8004d30:	f8c2 3198 	str.w	r3, [r2, #408]	@ 0x198
        LMIC.missedBcns++;
 8004d34:	4b2c      	ldr	r3, [pc, #176]	@ (8004de8 <processBeacon+0x210>)
 8004d36:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	b2da      	uxtb	r2, r3
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004de8 <processBeacon+0x210>)
 8004d40:	f883 2131 	strb.w	r2, [r3, #305]	@ 0x131
        // Delay any possible TX after surmised beacon - it's there although we missed it
        txDelay(LMIC.bcninfo.txtime + BCN_RESERVE_osticks, 4);
 8004d44:	4b28      	ldr	r3, [pc, #160]	@ (8004de8 <processBeacon+0x210>)
 8004d46:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004d4a:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004d4e:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004d52:	2104      	movs	r1, #4
 8004d54:	4618      	mov	r0, r3
 8004d56:	f7fe f82d 	bl	8002db4 <txDelay>
        if( LMIC.missedBcns > MAX_MISSED_BCNS )
 8004d5a:	4b23      	ldr	r3, [pc, #140]	@ (8004de8 <processBeacon+0x210>)
 8004d5c:	f893 3131 	ldrb.w	r3, [r3, #305]	@ 0x131
 8004d60:	2b14      	cmp	r3, #20
 8004d62:	d908      	bls.n	8004d76 <processBeacon+0x19e>
            LMIC.opmode |= OP_REJOIN;  // try if we can roam to another network
 8004d64:	4b20      	ldr	r3, [pc, #128]	@ (8004de8 <processBeacon+0x210>)
 8004d66:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004d6a:	f043 0320 	orr.w	r3, r3, #32
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <processBeacon+0x210>)
 8004d72:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
        if( LMIC.bcnRxsyms > MAX_RXSYMS ) {
 8004d76:	4b1c      	ldr	r3, [pc, #112]	@ (8004de8 <processBeacon+0x210>)
 8004d78:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8004d7c:	2b64      	cmp	r3, #100	@ 0x64
 8004d7e:	d90f      	bls.n	8004da0 <processBeacon+0x1c8>
            LMIC.opmode &= ~(OP_TRACK|OP_PINGABLE|OP_PINGINI|OP_REJOIN);
 8004d80:	4b19      	ldr	r3, [pc, #100]	@ (8004de8 <processBeacon+0x210>)
 8004d82:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004d86:	f423 63c4 	bic.w	r3, r3, #1568	@ 0x620
 8004d8a:	f023 0302 	bic.w	r3, r3, #2
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	4b15      	ldr	r3, [pc, #84]	@ (8004de8 <processBeacon+0x210>)
 8004d92:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            reportEvent(EV_LOST_TSYNC);
 8004d96:	200b      	movs	r0, #11
 8004d98:	f7fe fb9c 	bl	80034d4 <reportEvent>
            return;
 8004d9c:	e021      	b.n	8004de2 <processBeacon+0x20a>
    if( LMIC.dataLen != 0 && decodeBeacon() >= 1 ) {
 8004d9e:	bf00      	nop
        }
    }
    LMIC.bcnRxtime = LMIC.bcninfo.txtime + BCN_INTV_osticks - calcRxWindow(0,DR_BCN);
 8004da0:	4b11      	ldr	r3, [pc, #68]	@ (8004de8 <processBeacon+0x210>)
 8004da2:	f8d3 3190 	ldr.w	r3, [r3, #400]	@ 0x190
 8004da6:	f503 147a 	add.w	r4, r3, #4096000	@ 0x3e8000
 8004daa:	2103      	movs	r1, #3
 8004dac:	2000      	movs	r0, #0
 8004dae:	f7fd fe2d 	bl	8002a0c <calcRxWindow>
 8004db2:	4603      	mov	r3, r0
 8004db4:	1ae3      	subs	r3, r4, r3
 8004db6:	4a0c      	ldr	r2, [pc, #48]	@ (8004de8 <processBeacon+0x210>)
 8004db8:	f8c2 318c 	str.w	r3, [r2, #396]	@ 0x18c
    LMIC.bcnRxsyms = LMIC.rxsyms;    
 8004dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004de8 <processBeacon+0x210>)
 8004dbe:	7c1a      	ldrb	r2, [r3, #16]
 8004dc0:	4b09      	ldr	r3, [pc, #36]	@ (8004de8 <processBeacon+0x210>)
 8004dc2:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  rev:
#if CFG_us915
    LMIC.bcnChnl = (LMIC.bcnChnl+1) & 7;
#endif
    if( (LMIC.opmode & OP_PINGINI) != 0 )
 8004dc6:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <processBeacon+0x210>)
 8004dc8:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <processBeacon+0x202>
        rxschedInit(&LMIC.ping);  // note: reuses LMIC.frame buffer!
 8004dd4:	4805      	ldr	r0, [pc, #20]	@ (8004dec <processBeacon+0x214>)
 8004dd6:	f7fd fef3 	bl	8002bc0 <rxschedInit>
    reportEvent(ev);
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	4618      	mov	r0, r3
 8004dde:	f7fe fb79 	bl	80034d4 <reportEvent>
}
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd90      	pop	{r4, r7, pc}
 8004de8:	20000260 	.word	0x20000260
 8004dec:	20000394 	.word	0x20000394

08004df0 <startRxBcn>:


static void startRxBcn (xref2osjob_t osjob) {
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8004df8:	4b04      	ldr	r3, [pc, #16]	@ (8004e0c <startRxBcn+0x1c>)
 8004dfa:	4a05      	ldr	r2, [pc, #20]	@ (8004e10 <startRxBcn+0x20>)
 8004dfc:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004dfe:	2002      	movs	r0, #2
 8004e00:	f001 fab0 	bl	8006364 <os_radio>
}
 8004e04:	bf00      	nop
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	20000260 	.word	0x20000260
 8004e10:	08004bd9 	.word	0x08004bd9

08004e14 <startRxPing>:


static void startRxPing (xref2osjob_t osjob) {
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
    LMIC.osjob.func = FUNC_ADDR(processPingRx);
 8004e1c:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <startRxPing+0x1c>)
 8004e1e:	4a05      	ldr	r2, [pc, #20]	@ (8004e34 <startRxPing+0x20>)
 8004e20:	61da      	str	r2, [r3, #28]
    os_radio(RADIO_RX);
 8004e22:	2002      	movs	r0, #2
 8004e24:	f001 fa9e 	bl	8006364 <os_radio>
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000260 	.word	0x20000260
 8004e34:	080049b5 	.word	0x080049b5

08004e38 <engineUpdate>:


// Decide what to do next for the MAC layer of a device
static void engineUpdate (void) {
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
    // Check for ongoing state: scan or TX/RX transaction
    if( (LMIC.opmode & (OP_SCAN|OP_TXRXPEND|OP_SHUTDOWN)) != 0 ) 
 8004e3e:	4b90      	ldr	r3, [pc, #576]	@ (8005080 <engineUpdate+0x248>)
 8004e40:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e44:	f003 03c1 	and.w	r3, r3, #193	@ 0xc1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	f040 81ab 	bne.w	80051a4 <engineUpdate+0x36c>
        return;

    if( LMIC.devaddr == 0 && (LMIC.opmode & OP_JOINING) == 0 ) {
 8004e4e:	4b8c      	ldr	r3, [pc, #560]	@ (8005080 <engineUpdate+0x248>)
 8004e50:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d109      	bne.n	8004e6c <engineUpdate+0x34>
 8004e58:	4b89      	ldr	r3, [pc, #548]	@ (8005080 <engineUpdate+0x248>)
 8004e5a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e5e:	f003 0304 	and.w	r3, r3, #4
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d102      	bne.n	8004e6c <engineUpdate+0x34>
        LMIC_startJoining();
 8004e66:	f7ff fd5b 	bl	8004920 <LMIC_startJoining>
        return;
 8004e6a:	e19e      	b.n	80051aa <engineUpdate+0x372>
    }

    ostime_t now    = os_getTime();
 8004e6c:	f000 fc54 	bl	8005718 <os_getTime>
 8004e70:	60b8      	str	r0, [r7, #8]
    ostime_t rxtime = 0;
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
    ostime_t txbeg  = 0;
 8004e76:	2300      	movs	r3, #0
 8004e78:	613b      	str	r3, [r7, #16]

    if( (LMIC.opmode & OP_TRACK) != 0 ) {
 8004e7a:	4b81      	ldr	r3, [pc, #516]	@ (8005080 <engineUpdate+0x248>)
 8004e7c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00f      	beq.n	8004ea8 <engineUpdate+0x70>
        // We are tracking a beacon
        ASSERT( now + RX_RAMPUP - LMIC.bcnRxtime <= 0 );
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8004e8e:	4b7c      	ldr	r3, [pc, #496]	@ (8005080 <engineUpdate+0x248>)
 8004e90:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	dd01      	ble.n	8004e9e <engineUpdate+0x66>
 8004e9a:	f7fd f90b 	bl	80020b4 <hal_failed>
        rxtime = LMIC.bcnRxtime - RX_RAMPUP;
 8004e9e:	4b78      	ldr	r3, [pc, #480]	@ (8005080 <engineUpdate+0x248>)
 8004ea0:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8004ea4:	3b40      	subs	r3, #64	@ 0x40
 8004ea6:	617b      	str	r3, [r7, #20]
    }

    if( (LMIC.opmode & (OP_JOINING|OP_REJOIN|OP_TXDATA|OP_POLL)) != 0 ) {
 8004ea8:	4b75      	ldr	r3, [pc, #468]	@ (8005080 <engineUpdate+0x248>)
 8004eaa:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004eae:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80f2 	beq.w	800509c <engineUpdate+0x264>
        // Need to TX some data...
        // Assuming txChnl points to channel which first becomes available again.
        bit_t jacc = ((LMIC.opmode & (OP_JOINING|OP_REJOIN)) != 0 ? 1 : 0);
 8004eb8:	4b71      	ldr	r3, [pc, #452]	@ (8005080 <engineUpdate+0x248>)
 8004eba:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ebe:	f003 0324 	and.w	r3, r3, #36	@ 0x24
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	bf14      	ite	ne
 8004ec6:	2301      	movne	r3, #1
 8004ec8:	2300      	moveq	r3, #0
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	71fb      	strb	r3, [r7, #7]
        // Find next suitable channel and return availability time
        if( (LMIC.opmode & OP_NEXTCHNL) != 0 ) {
 8004ece:	4b6c      	ldr	r3, [pc, #432]	@ (8005080 <engineUpdate+0x248>)
 8004ed0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d012      	beq.n	8004f02 <engineUpdate+0xca>
            txbeg = LMIC.txend = nextTx(now);
 8004edc:	68b8      	ldr	r0, [r7, #8]
 8004ede:	f7fe f98f 	bl	8003200 <nextTx>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	4a66      	ldr	r2, [pc, #408]	@ (8005080 <engineUpdate+0x248>)
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	4b65      	ldr	r3, [pc, #404]	@ (8005080 <engineUpdate+0x248>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	613b      	str	r3, [r7, #16]
            LMIC.opmode &= ~OP_NEXTCHNL;
 8004eee:	4b64      	ldr	r3, [pc, #400]	@ (8005080 <engineUpdate+0x248>)
 8004ef0:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004ef4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004ef8:	b29a      	uxth	r2, r3
 8004efa:	4b61      	ldr	r3, [pc, #388]	@ (8005080 <engineUpdate+0x248>)
 8004efc:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8004f00:	e002      	b.n	8004f08 <engineUpdate+0xd0>
        } else {
            txbeg = LMIC.txend;
 8004f02:	4b5f      	ldr	r3, [pc, #380]	@ (8005080 <engineUpdate+0x248>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	613b      	str	r3, [r7, #16]
        }
        // Delayed TX or waiting for duty cycle?
        if( (LMIC.globalDutyRate != 0 || (LMIC.opmode & OP_RNDTX) != 0)  &&  (txbeg - LMIC.globalDutyAvail) < 0 )
 8004f08:	4b5d      	ldr	r3, [pc, #372]	@ (8005080 <engineUpdate+0x248>)
 8004f0a:	f893 30a3 	ldrb.w	r3, [r3, #163]	@ 0xa3
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d106      	bne.n	8004f20 <engineUpdate+0xe8>
 8004f12:	4b5b      	ldr	r3, [pc, #364]	@ (8005080 <engineUpdate+0x248>)
 8004f14:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <engineUpdate+0xfe>
 8004f20:	4b57      	ldr	r3, [pc, #348]	@ (8005080 <engineUpdate+0x248>)
 8004f22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	1ad3      	subs	r3, r2, r3
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	da03      	bge.n	8004f36 <engineUpdate+0xfe>
            txbeg = LMIC.globalDutyAvail;
 8004f2e:	4b54      	ldr	r3, [pc, #336]	@ (8005080 <engineUpdate+0x248>)
 8004f30:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004f34:	613b      	str	r3, [r7, #16]
        // If we're tracking a beacon...
        // then make sure TX-RX transaction is complete before beacon
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004f36:	4b52      	ldr	r3, [pc, #328]	@ (8005080 <engineUpdate+0x248>)
 8004f38:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d017      	beq.n	8004f74 <engineUpdate+0x13c>
            txbeg + (jacc ? JOIN_GUARD_osticks : TXRX_GUARD_osticks) - rxtime > 0 ) {
 8004f44:	79fb      	ldrb	r3, [r7, #7]
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d001      	beq.n	8004f4e <engineUpdate+0x116>
 8004f4a:	4a4e      	ldr	r2, [pc, #312]	@ (8005084 <engineUpdate+0x24c>)
 8004f4c:	e000      	b.n	8004f50 <engineUpdate+0x118>
 8004f4e:	4a4e      	ldr	r2, [pc, #312]	@ (8005088 <engineUpdate+0x250>)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	441a      	add	r2, r3
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	1ad3      	subs	r3, r2, r3
        if( (LMIC.opmode & OP_TRACK) != 0 &&
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	dd0b      	ble.n	8004f74 <engineUpdate+0x13c>
            // Not enough time to complete TX-RX before beacon - postpone after beacon.
            // In order to avoid clustering of postponed TX right after beacon randomize start!
            txDelay(rxtime + BCN_RESERVE_osticks, 16);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f503 3384 	add.w	r3, r3, #67584	@ 0x10800
 8004f62:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 8004f66:	2110      	movs	r1, #16
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fd ff23 	bl	8002db4 <txDelay>
            txbeg = 0;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	613b      	str	r3, [r7, #16]
            goto checkrx;
 8004f72:	e09b      	b.n	80050ac <engineUpdate+0x274>
        }
        // Earliest possible time vs overhead to setup radio
        if( txbeg - (now + TX_RAMPUP) < 0 ) {
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	3340      	adds	r3, #64	@ 0x40
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	1ad3      	subs	r3, r2, r3
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	da70      	bge.n	8005062 <engineUpdate+0x22a>
            // We could send right now!
        txbeg = now;
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	613b      	str	r3, [r7, #16]
            dr_t txdr = (dr_t)LMIC.datarate;
 8004f84:	4b3e      	ldr	r3, [pc, #248]	@ (8005080 <engineUpdate+0x248>)
 8004f86:	f893 30b0 	ldrb.w	r3, [r3, #176]	@ 0xb0
 8004f8a:	73fb      	strb	r3, [r7, #15]
            if( jacc ) {
 8004f8c:	79fb      	ldrb	r3, [r7, #7]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d01d      	beq.n	8004fce <engineUpdate+0x196>
                u1_t ftype;
                if( (LMIC.opmode & OP_REJOIN) != 0 ) {
 8004f92:	4b3b      	ldr	r3, [pc, #236]	@ (8005080 <engineUpdate+0x248>)
 8004f94:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8004f98:	f003 0320 	and.w	r3, r3, #32
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00c      	beq.n	8004fba <engineUpdate+0x182>
                    txdr = lowerDR(txdr, LMIC.rejoinCnt);
 8004fa0:	4b37      	ldr	r3, [pc, #220]	@ (8005080 <engineUpdate+0x248>)
 8004fa2:	f893 20b2 	ldrb.w	r2, [r3, #178]	@ 0xb2
 8004fa6:	7bfb      	ldrb	r3, [r7, #15]
 8004fa8:	4611      	mov	r1, r2
 8004faa:	4618      	mov	r0, r3
 8004fac:	f7fd fa10 	bl	80023d0 <lowerDR>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	73fb      	strb	r3, [r7, #15]
                    ftype = HDR_FTYPE_REJOIN;
 8004fb4:	23c0      	movs	r3, #192	@ 0xc0
 8004fb6:	73bb      	strb	r3, [r7, #14]
 8004fb8:	e001      	b.n	8004fbe <engineUpdate+0x186>
                } else {
                    ftype = HDR_FTYPE_JREQ;
 8004fba:	2300      	movs	r3, #0
 8004fbc:	73bb      	strb	r3, [r7, #14]
                }
                buildJoinRequest(ftype);
 8004fbe:	7bbb      	ldrb	r3, [r7, #14]
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f7ff fc6b 	bl	800489c <buildJoinRequest>
                LMIC.osjob.func = FUNC_ADDR(jreqDone);
 8004fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8005080 <engineUpdate+0x248>)
 8004fc8:	4a30      	ldr	r2, [pc, #192]	@ (800508c <engineUpdate+0x254>)
 8004fca:	61da      	str	r2, [r3, #28]
 8004fcc:	e01d      	b.n	800500a <engineUpdate+0x1d2>
            } else {
                if( LMIC.seqnoDn >= 0xFFFFFF80 ) {
 8004fce:	4b2c      	ldr	r3, [pc, #176]	@ (8005080 <engineUpdate+0x248>)
 8004fd0:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8004fd4:	f113 0f81 	cmn.w	r3, #129	@ 0x81
 8004fd8:	d907      	bls.n	8004fea <engineUpdate+0x1b2>
                                        e_.eui    = MAIN::CDEV->getEui(),
                                        e_.info   = LMIC.seqnoDn, 
                                        e_.info2  = 0));
                    // Device has to react! NWK will not roll over and just stop sending.
                    // Thus, we have N frames to detect a possible lock up.
                  reset:
 8004fda:	bf00      	nop
 8004fdc:	e000      	b.n	8004fe0 <engineUpdate+0x1a8>
                    EV(specCond, ERR, (e_.reason = EV::specCond_t::UPSEQNO_ROLL_OVER,
                                       e_.eui    = MAIN::CDEV->getEui(),
                                       e_.info2  = LMIC.seqnoUp));
                    // Do not run RESET event callback from here!
                    // App code might do some stuff after send unaware of RESET.
                    goto reset;
 8004fde:	bf00      	nop
                    os_setCallback(&LMIC.osjob, FUNC_ADDR(runReset));
 8004fe0:	492b      	ldr	r1, [pc, #172]	@ (8005090 <engineUpdate+0x258>)
 8004fe2:	482c      	ldr	r0, [pc, #176]	@ (8005094 <engineUpdate+0x25c>)
 8004fe4:	f000 fbdc 	bl	80057a0 <os_setCallback>
                    return;
 8004fe8:	e0df      	b.n	80051aa <engineUpdate+0x372>
                if( (LMIC.txCnt==0 && LMIC.seqnoUp == 0xFFFFFFFF) ) {
 8004fea:	4b25      	ldr	r3, [pc, #148]	@ (8005080 <engineUpdate+0x248>)
 8004fec:	f893 3144 	ldrb.w	r3, [r3, #324]	@ 0x144
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d105      	bne.n	8005000 <engineUpdate+0x1c8>
 8004ff4:	4b22      	ldr	r3, [pc, #136]	@ (8005080 <engineUpdate+0x248>)
 8004ff6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8004ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffe:	d0ee      	beq.n	8004fde <engineUpdate+0x1a6>
                }
                buildDataFrame();
 8005000:	f7ff f9ba 	bl	8004378 <buildDataFrame>
                LMIC.osjob.func = FUNC_ADDR(updataDone);
 8005004:	4b1e      	ldr	r3, [pc, #120]	@ (8005080 <engineUpdate+0x248>)
 8005006:	4a24      	ldr	r2, [pc, #144]	@ (8005098 <engineUpdate+0x260>)
 8005008:	61da      	str	r2, [r3, #28]
            }
            LMIC.rps    = setCr(updr2rps(txdr), (cr_t)LMIC.errcr);
 800500a:	7bfb      	ldrb	r3, [r7, #15]
 800500c:	4618      	mov	r0, r3
 800500e:	f7fd f98b 	bl	8002328 <updr2rps>
 8005012:	4603      	mov	r3, r0
 8005014:	461a      	mov	r2, r3
 8005016:	4b1a      	ldr	r3, [pc, #104]	@ (8005080 <engineUpdate+0x248>)
 8005018:	f893 30b1 	ldrb.w	r3, [r3, #177]	@ 0xb1
 800501c:	4619      	mov	r1, r3
 800501e:	4610      	mov	r0, r2
 8005020:	f7fd f91c 	bl	800225c <setCr>
 8005024:	4603      	mov	r3, r0
 8005026:	461a      	mov	r2, r3
 8005028:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <engineUpdate+0x248>)
 800502a:	81da      	strh	r2, [r3, #14]
            LMIC.dndr   = txdr;  // carry TX datarate (can be != LMIC.datarate) over to txDone/setupRx1
 800502c:	4a14      	ldr	r2, [pc, #80]	@ (8005080 <engineUpdate+0x248>)
 800502e:	7bfb      	ldrb	r3, [r7, #15]
 8005030:	7453      	strb	r3, [r2, #17]
            LMIC.opmode = (LMIC.opmode & ~(OP_POLL|OP_RNDTX)) | OP_TXRXPEND | OP_NEXTCHNL;
 8005032:	4b13      	ldr	r3, [pc, #76]	@ (8005080 <engineUpdate+0x248>)
 8005034:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005038:	b21b      	sxth	r3, r3
 800503a:	f423 6319 	bic.w	r3, r3, #2448	@ 0x990
 800503e:	b21b      	sxth	r3, r3
 8005040:	f443 6308 	orr.w	r3, r3, #2176	@ 0x880
 8005044:	b21b      	sxth	r3, r3
 8005046:	b29a      	uxth	r2, r3
 8005048:	4b0d      	ldr	r3, [pc, #52]	@ (8005080 <engineUpdate+0x248>)
 800504a:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
            updateTx(txbeg);
 800504e:	6938      	ldr	r0, [r7, #16]
 8005050:	f7fe f88c 	bl	800316c <updateTx>
            reportEvent(EV_TXSTART);
 8005054:	2011      	movs	r0, #17
 8005056:	f7fe fa3d 	bl	80034d4 <reportEvent>
            os_radio(RADIO_TX);
 800505a:	2001      	movs	r0, #1
 800505c:	f001 f982 	bl	8006364 <os_radio>
            return;
 8005060:	e0a3      	b.n	80051aa <engineUpdate+0x372>
        }
        // Cannot yet TX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 8005062:	4b07      	ldr	r3, [pc, #28]	@ (8005080 <engineUpdate+0x248>)
 8005064:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 808c 	beq.w	800518a <engineUpdate+0x352>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
        // Consider RX tasks
        if( txbeg == 0 ) // zero indicates no TX pending
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d119      	bne.n	80050ac <engineUpdate+0x274>
            txbeg += 1;  // TX delayed by one tick (insignificant amount of time)
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	3301      	adds	r3, #1
 800507c:	613b      	str	r3, [r7, #16]
 800507e:	e015      	b.n	80050ac <engineUpdate+0x274>
 8005080:	20000260 	.word	0x20000260
 8005084:	00046500 	.word	0x00046500
 8005088:	0002ee00 	.word	0x0002ee00
 800508c:	08004239 	.word	0x08004239
 8005090:	080034f3 	.word	0x080034f3
 8005094:	20000274 	.word	0x20000274
 8005098:	08004349 	.word	0x08004349
    } else {
        // No TX pending - no scheduled RX
        if( (LMIC.opmode & OP_TRACK) == 0 )
 800509c:	4b44      	ldr	r3, [pc, #272]	@ (80051b0 <engineUpdate+0x378>)
 800509e:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d07e      	beq.n	80051a8 <engineUpdate+0x370>
            return;
    }

    // Are we pingable?
  checkrx:
 80050aa:	bf00      	nop
    if( (LMIC.opmode & OP_PINGINI) != 0 ) {
 80050ac:	4b40      	ldr	r3, [pc, #256]	@ (80051b0 <engineUpdate+0x378>)
 80050ae:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80050b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d041      	beq.n	800513e <engineUpdate+0x306>
        // One more RX slot in this beacon period?
        if( rxschedNext(&LMIC.ping, now+RX_RAMPUP) ) {
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	3340      	adds	r3, #64	@ 0x40
 80050be:	4619      	mov	r1, r3
 80050c0:	483c      	ldr	r0, [pc, #240]	@ (80051b4 <engineUpdate+0x37c>)
 80050c2:	f7fd fdeb 	bl	8002c9c <rxschedNext>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d038      	beq.n	800513e <engineUpdate+0x306>
            if( txbeg != 0  &&  (txbeg - LMIC.ping.rxtime) < 0 )
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d006      	beq.n	80050e0 <engineUpdate+0x2a8>
 80050d2:	4b37      	ldr	r3, [pc, #220]	@ (80051b0 <engineUpdate+0x378>)
 80050d4:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b00      	cmp	r3, #0
 80050de:	db56      	blt.n	800518e <engineUpdate+0x356>
                goto txdelay;
            LMIC.rxsyms  = LMIC.ping.rxsyms;
 80050e0:	4b33      	ldr	r3, [pc, #204]	@ (80051b0 <engineUpdate+0x378>)
 80050e2:	f893 2137 	ldrb.w	r2, [r3, #311]	@ 0x137
 80050e6:	4b32      	ldr	r3, [pc, #200]	@ (80051b0 <engineUpdate+0x378>)
 80050e8:	741a      	strb	r2, [r3, #16]
            LMIC.rxtime  = LMIC.ping.rxtime;
 80050ea:	4b31      	ldr	r3, [pc, #196]	@ (80051b0 <engineUpdate+0x378>)
 80050ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 80050f0:	4a2f      	ldr	r2, [pc, #188]	@ (80051b0 <engineUpdate+0x378>)
 80050f2:	6053      	str	r3, [r2, #4]
            LMIC.freq    = LMIC.ping.freq;
 80050f4:	4b2e      	ldr	r3, [pc, #184]	@ (80051b0 <engineUpdate+0x378>)
 80050f6:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 80050fa:	4a2d      	ldr	r2, [pc, #180]	@ (80051b0 <engineUpdate+0x378>)
 80050fc:	6093      	str	r3, [r2, #8]
            LMIC.rps     = dndr2rps(LMIC.ping.dr);
 80050fe:	4b2c      	ldr	r3, [pc, #176]	@ (80051b0 <engineUpdate+0x378>)
 8005100:	f893 3134 	ldrb.w	r3, [r3, #308]	@ 0x134
 8005104:	4618      	mov	r0, r3
 8005106:	f7fd f921 	bl	800234c <dndr2rps>
 800510a:	4603      	mov	r3, r0
 800510c:	461a      	mov	r2, r3
 800510e:	4b28      	ldr	r3, [pc, #160]	@ (80051b0 <engineUpdate+0x378>)
 8005110:	81da      	strh	r2, [r3, #14]
            LMIC.dataLen = 0;
 8005112:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <engineUpdate+0x378>)
 8005114:	2200      	movs	r2, #0
 8005116:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            ASSERT(LMIC.rxtime - now+RX_RAMPUP >= 0 );
 800511a:	4b25      	ldr	r3, [pc, #148]	@ (80051b0 <engineUpdate+0x378>)
 800511c:	685a      	ldr	r2, [r3, #4]
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	1ad3      	subs	r3, r2, r3
 8005122:	f113 0f40 	cmn.w	r3, #64	@ 0x40
 8005126:	da01      	bge.n	800512c <engineUpdate+0x2f4>
 8005128:	f7fc ffc4 	bl	80020b4 <hal_failed>
            os_setTimedCallback(&LMIC.osjob, LMIC.rxtime - RX_RAMPUP, FUNC_ADDR(startRxPing));
 800512c:	4b20      	ldr	r3, [pc, #128]	@ (80051b0 <engineUpdate+0x378>)
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	3b40      	subs	r3, #64	@ 0x40
 8005132:	4a21      	ldr	r2, [pc, #132]	@ (80051b8 <engineUpdate+0x380>)
 8005134:	4619      	mov	r1, r3
 8005136:	4821      	ldr	r0, [pc, #132]	@ (80051bc <engineUpdate+0x384>)
 8005138:	f000 fb58 	bl	80057ec <os_setTimedCallback>
            return;
 800513c:	e035      	b.n	80051aa <engineUpdate+0x372>
        }
        // no - just wait for the beacon
    }

    if( txbeg != 0  &&  (txbeg - rxtime) < 0 )
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <engineUpdate+0x316>
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	db21      	blt.n	8005192 <engineUpdate+0x35a>
        goto txdelay;

    setBcnRxParams();
 800514e:	f7fe f8f3 	bl	8003338 <setBcnRxParams>
    LMIC.rxsyms = LMIC.bcnRxsyms;
 8005152:	4b17      	ldr	r3, [pc, #92]	@ (80051b0 <engineUpdate+0x378>)
 8005154:	f893 2189 	ldrb.w	r2, [r3, #393]	@ 0x189
 8005158:	4b15      	ldr	r3, [pc, #84]	@ (80051b0 <engineUpdate+0x378>)
 800515a:	741a      	strb	r2, [r3, #16]
    LMIC.rxtime = LMIC.bcnRxtime;
 800515c:	4b14      	ldr	r3, [pc, #80]	@ (80051b0 <engineUpdate+0x378>)
 800515e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8005162:	4a13      	ldr	r2, [pc, #76]	@ (80051b0 <engineUpdate+0x378>)
 8005164:	6053      	str	r3, [r2, #4]
    if( now - rxtime >= 0 ) {
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	db06      	blt.n	800517e <engineUpdate+0x346>
        LMIC.osjob.func = FUNC_ADDR(processBeacon);
 8005170:	4b0f      	ldr	r3, [pc, #60]	@ (80051b0 <engineUpdate+0x378>)
 8005172:	4a13      	ldr	r2, [pc, #76]	@ (80051c0 <engineUpdate+0x388>)
 8005174:	61da      	str	r2, [r3, #28]
        os_radio(RADIO_RX);
 8005176:	2002      	movs	r0, #2
 8005178:	f001 f8f4 	bl	8006364 <os_radio>
        return;
 800517c:	e015      	b.n	80051aa <engineUpdate+0x372>
    }
    os_setTimedCallback(&LMIC.osjob, rxtime, FUNC_ADDR(startRxBcn));
 800517e:	4a11      	ldr	r2, [pc, #68]	@ (80051c4 <engineUpdate+0x38c>)
 8005180:	6979      	ldr	r1, [r7, #20]
 8005182:	480e      	ldr	r0, [pc, #56]	@ (80051bc <engineUpdate+0x384>)
 8005184:	f000 fb32 	bl	80057ec <os_setTimedCallback>
    return;
 8005188:	e00f      	b.n	80051aa <engineUpdate+0x372>
            goto txdelay; // We don't track the beacon - nothing else to do - so wait for the time to TX
 800518a:	bf00      	nop
 800518c:	e002      	b.n	8005194 <engineUpdate+0x35c>
                goto txdelay;
 800518e:	bf00      	nop
 8005190:	e000      	b.n	8005194 <engineUpdate+0x35c>
        goto txdelay;
 8005192:	bf00      	nop
  txdelay:
    EV(devCond, INFO, (e_.reason = EV::devCond_t::TX_DELAY,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = osticks2ms(txbeg-now),
                       e_.info2  = LMIC.seqnoUp-1));
    os_setTimedCallback(&LMIC.osjob, txbeg-TX_RAMPUP, FUNC_ADDR(runEngineUpdate));
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	3b40      	subs	r3, #64	@ 0x40
 8005198:	4a0b      	ldr	r2, [pc, #44]	@ (80051c8 <engineUpdate+0x390>)
 800519a:	4619      	mov	r1, r3
 800519c:	4807      	ldr	r0, [pc, #28]	@ (80051bc <engineUpdate+0x384>)
 800519e:	f000 fb25 	bl	80057ec <os_setTimedCallback>
 80051a2:	e002      	b.n	80051aa <engineUpdate+0x372>
        return;
 80051a4:	bf00      	nop
 80051a6:	e000      	b.n	80051aa <engineUpdate+0x372>
            return;
 80051a8:	bf00      	nop
}
 80051aa:	3718      	adds	r7, #24
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	20000260 	.word	0x20000260
 80051b4:	20000394 	.word	0x20000394
 80051b8:	08004e15 	.word	0x08004e15
 80051bc:	20000274 	.word	0x20000274
 80051c0:	08004bd9 	.word	0x08004bd9
 80051c4:	08004df1 	.word	0x08004df1
 80051c8:	080034c1 	.word	0x080034c1

080051cc <LMIC_reset>:
    os_radio(RADIO_RST);
    LMIC.opmode |= OP_SHUTDOWN;
}


void LMIC_reset (void) {
 80051cc:	b598      	push	{r3, r4, r7, lr}
 80051ce:	af00      	add	r7, sp, #0
    EV(devCond, INFO, (e_.reason = EV::devCond_t::LMIC_EV,
                       e_.eui    = MAIN::CDEV->getEui(),
                       e_.info   = EV_RESET));
    os_radio(RADIO_RST);
 80051d0:	2000      	movs	r0, #0
 80051d2:	f001 f8c7 	bl	8006364 <os_radio>
    os_clearCallback(&LMIC.osjob);
 80051d6:	4821      	ldr	r0, [pc, #132]	@ (800525c <LMIC_reset+0x90>)
 80051d8:	f000 fac4 	bl	8005764 <os_clearCallback>

    os_clearMem((xref2u1_t)&LMIC,SIZEOFEXPR(LMIC));
 80051dc:	f44f 72d6 	mov.w	r2, #428	@ 0x1ac
 80051e0:	2100      	movs	r1, #0
 80051e2:	481f      	ldr	r0, [pc, #124]	@ (8005260 <LMIC_reset+0x94>)
 80051e4:	f009 f95f 	bl	800e4a6 <memset>
    LMIC.devaddr      =  0;
 80051e8:	4b1d      	ldr	r3, [pc, #116]	@ (8005260 <LMIC_reset+0x94>)
 80051ea:	2200      	movs	r2, #0
 80051ec:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    LMIC.devNonce     =  os_getRndU2();
 80051f0:	f000 ffbc 	bl	800616c <radio_rand1>
 80051f4:	4603      	mov	r3, r0
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	b21c      	sxth	r4, r3
 80051fa:	f000 ffb7 	bl	800616c <radio_rand1>
 80051fe:	4603      	mov	r3, r0
 8005200:	b21b      	sxth	r3, r3
 8005202:	4323      	orrs	r3, r4
 8005204:	b21b      	sxth	r3, r3
 8005206:	b29a      	uxth	r2, r3
 8005208:	4b15      	ldr	r3, [pc, #84]	@ (8005260 <LMIC_reset+0x94>)
 800520a:	f8a3 20f2 	strh.w	r2, [r3, #242]	@ 0xf2
    LMIC.opmode       =  OP_NONE;
 800520e:	4b14      	ldr	r3, [pc, #80]	@ (8005260 <LMIC_reset+0x94>)
 8005210:	2200      	movs	r2, #0
 8005212:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    LMIC.errcr        =  CR_4_5;
 8005216:	4b12      	ldr	r3, [pc, #72]	@ (8005260 <LMIC_reset+0x94>)
 8005218:	2200      	movs	r2, #0
 800521a:	f883 20b1 	strb.w	r2, [r3, #177]	@ 0xb1
    LMIC.adrEnabled   =  FCT_ADREN;
 800521e:	4b10      	ldr	r3, [pc, #64]	@ (8005260 <LMIC_reset+0x94>)
 8005220:	2280      	movs	r2, #128	@ 0x80
 8005222:	f883 2127 	strb.w	r2, [r3, #295]	@ 0x127
    LMIC.dn2Dr        =  DR_DNW2;   // we need this for 2nd DN window of join accept
 8005226:	4b0e      	ldr	r3, [pc, #56]	@ (8005260 <LMIC_reset+0x94>)
 8005228:	2200      	movs	r2, #0
 800522a:	f883 212b 	strb.w	r2, [r3, #299]	@ 0x12b
    LMIC.dn2Freq      =  FREQ_DNW2; // ditto
 800522e:	4b0c      	ldr	r3, [pc, #48]	@ (8005260 <LMIC_reset+0x94>)
 8005230:	4a0c      	ldr	r2, [pc, #48]	@ (8005264 <LMIC_reset+0x98>)
 8005232:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
    LMIC.rxDelay      =  DELAY_DNW1;
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <LMIC_reset+0x94>)
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
    LMIC.ping.freq    =  FREQ_PING; // defaults for ping
 800523e:	4b08      	ldr	r3, [pc, #32]	@ (8005260 <LMIC_reset+0x94>)
 8005240:	4a08      	ldr	r2, [pc, #32]	@ (8005264 <LMIC_reset+0x98>)
 8005242:	f8c3 2140 	str.w	r2, [r3, #320]	@ 0x140
    LMIC.ping.dr      =  DR_PING;   // ditto
 8005246:	4b06      	ldr	r3, [pc, #24]	@ (8005260 <LMIC_reset+0x94>)
 8005248:	2203      	movs	r2, #3
 800524a:	f883 2134 	strb.w	r2, [r3, #308]	@ 0x134
    LMIC.ping.intvExp =  0xFF;
 800524e:	4b04      	ldr	r3, [pc, #16]	@ (8005260 <LMIC_reset+0x94>)
 8005250:	22ff      	movs	r2, #255	@ 0xff
 8005252:	f883 2135 	strb.w	r2, [r3, #309]	@ 0x135
    DO_DEVDB(LMIC.dn2Dr,        dn2Dr);
    DO_DEVDB(LMIC.dn2Freq,      dn2Freq);
    DO_DEVDB(LMIC.ping.freq,    pingFreq);
    DO_DEVDB(LMIC.ping.dr,      pingDr);
    DO_DEVDB(LMIC.ping.intvExp, pingIntvExp);
}
 8005256:	bf00      	nop
 8005258:	bd98      	pop	{r3, r4, r7, pc}
 800525a:	bf00      	nop
 800525c:	20000274 	.word	0x20000274
 8005260:	20000260 	.word	0x20000260
 8005264:	33d3e608 	.word	0x33d3e608

08005268 <LMIC_init>:


void LMIC_init (void) {
 8005268:	b480      	push	{r7}
 800526a:	af00      	add	r7, sp, #0
    LMIC.opmode = OP_SHUTDOWN;
 800526c:	4b04      	ldr	r3, [pc, #16]	@ (8005280 <LMIC_init+0x18>)
 800526e:	2240      	movs	r2, #64	@ 0x40
 8005270:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
}
 8005274:	bf00      	nop
 8005276:	46bd      	mov	sp, r7
 8005278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527c:	4770      	bx	lr
 800527e:	bf00      	nop
 8005280:	20000260 	.word	0x20000260

08005284 <LMIC_setTxData>:
    os_radio(RADIO_RST);
    engineUpdate();
}


void LMIC_setTxData (void) {
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
    LMIC.opmode |= OP_TXDATA;
 8005288:	4b0b      	ldr	r3, [pc, #44]	@ (80052b8 <LMIC_setTxData+0x34>)
 800528a:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 800528e:	f043 0308 	orr.w	r3, r3, #8
 8005292:	b29a      	uxth	r2, r3
 8005294:	4b08      	ldr	r3, [pc, #32]	@ (80052b8 <LMIC_setTxData+0x34>)
 8005296:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
    if( (LMIC.opmode & OP_JOINING) == 0 )
 800529a:	4b07      	ldr	r3, [pc, #28]	@ (80052b8 <LMIC_setTxData+0x34>)
 800529c:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	@ 0xac
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d103      	bne.n	80052b0 <LMIC_setTxData+0x2c>
        LMIC.txCnt = 0;             // cancel any ongoing TX/RX retries
 80052a8:	4b03      	ldr	r3, [pc, #12]	@ (80052b8 <LMIC_setTxData+0x34>)
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
    engineUpdate();
 80052b0:	f7ff fdc2 	bl	8004e38 <engineUpdate>
}
 80052b4:	bf00      	nop
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	20000260 	.word	0x20000260

080052bc <LMIC_setTxData2>:


//
int LMIC_setTxData2 (u1_t port, xref2u1_t data, u1_t dlen, u1_t confirmed) {
 80052bc:	b580      	push	{r7, lr}
 80052be:	b082      	sub	sp, #8
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6039      	str	r1, [r7, #0]
 80052c4:	4611      	mov	r1, r2
 80052c6:	461a      	mov	r2, r3
 80052c8:	4603      	mov	r3, r0
 80052ca:	71fb      	strb	r3, [r7, #7]
 80052cc:	460b      	mov	r3, r1
 80052ce:	71bb      	strb	r3, [r7, #6]
 80052d0:	4613      	mov	r3, r2
 80052d2:	717b      	strb	r3, [r7, #5]
    if( dlen > SIZEOFEXPR(LMIC.pendTxData) )
 80052d4:	79bb      	ldrb	r3, [r7, #6]
 80052d6:	2b34      	cmp	r3, #52	@ 0x34
 80052d8:	d902      	bls.n	80052e0 <LMIC_setTxData2+0x24>
        return -2;
 80052da:	f06f 0301 	mvn.w	r3, #1
 80052de:	e017      	b.n	8005310 <LMIC_setTxData2+0x54>
    if( data != (xref2u1_t)0 )
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d005      	beq.n	80052f2 <LMIC_setTxData2+0x36>
        os_copyMem(LMIC.pendTxData, data, dlen);
 80052e6:	79bb      	ldrb	r3, [r7, #6]
 80052e8:	461a      	mov	r2, r3
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	480a      	ldr	r0, [pc, #40]	@ (8005318 <LMIC_setTxData2+0x5c>)
 80052ee:	f009 f956 	bl	800e59e <memcpy>
    LMIC.pendTxConf = confirmed;
 80052f2:	4a0a      	ldr	r2, [pc, #40]	@ (800531c <LMIC_setTxData2+0x60>)
 80052f4:	797b      	ldrb	r3, [r7, #5]
 80052f6:	f882 30bb 	strb.w	r3, [r2, #187]	@ 0xbb
    LMIC.pendTxPort = port;
 80052fa:	4a08      	ldr	r2, [pc, #32]	@ (800531c <LMIC_setTxData2+0x60>)
 80052fc:	79fb      	ldrb	r3, [r7, #7]
 80052fe:	f882 30ba 	strb.w	r3, [r2, #186]	@ 0xba
    LMIC.pendTxLen  = dlen;
 8005302:	4a06      	ldr	r2, [pc, #24]	@ (800531c <LMIC_setTxData2+0x60>)
 8005304:	79bb      	ldrb	r3, [r7, #6]
 8005306:	f882 30bc 	strb.w	r3, [r2, #188]	@ 0xbc
    LMIC_setTxData();
 800530a:	f7ff ffbb 	bl	8005284 <LMIC_setTxData>
    return 0;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3708      	adds	r7, #8
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}
 8005318:	2000031d 	.word	0x2000031d
 800531c:	20000260 	.word	0x20000260

08005320 <os_getArtEui>:
	os_setTimedCallback(j, os_getTime()+sec2osticks(1), hellofunc);
}


// provide application router ID (8 bytes, LSBF)
void os_getArtEui (u1_t* buf) {
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	memcpy(buf, APPEUI, 8);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4906      	ldr	r1, [pc, #24]	@ (8005344 <os_getArtEui+0x24>)
 800532c:	461a      	mov	r2, r3
 800532e:	460b      	mov	r3, r1
 8005330:	cb03      	ldmia	r3!, {r0, r1}
 8005332:	6010      	str	r0, [r2, #0]
 8005334:	6051      	str	r1, [r2, #4]
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	08010a70 	.word	0x08010a70

08005348 <os_getDevEui>:
// provide device ID (8 bytes, LSBF)
void os_getDevEui (u1_t* buf) {
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVEUI, 8);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4906      	ldr	r1, [pc, #24]	@ (800536c <os_getDevEui+0x24>)
 8005354:	461a      	mov	r2, r3
 8005356:	460b      	mov	r3, r1
 8005358:	cb03      	ldmia	r3!, {r0, r1}
 800535a:	6010      	str	r0, [r2, #0]
 800535c:	6051      	str	r1, [r2, #4]
}
 800535e:	bf00      	nop
 8005360:	370c      	adds	r7, #12
 8005362:	46bd      	mov	sp, r7
 8005364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	08010a78 	.word	0x08010a78

08005370 <os_getDevKey>:
// provide device key (16 bytes)
void os_getDevKey (u1_t* buf) {
 8005370:	b4b0      	push	{r4, r5, r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
	memcpy(buf, DEVKEY, 16);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a06      	ldr	r2, [pc, #24]	@ (8005394 <os_getDevKey+0x24>)
 800537c:	461c      	mov	r4, r3
 800537e:	4615      	mov	r5, r2
 8005380:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005382:	6020      	str	r0, [r4, #0]
 8005384:	6061      	str	r1, [r4, #4]
 8005386:	60a2      	str	r2, [r4, #8]
 8005388:	60e3      	str	r3, [r4, #12]
}
 800538a:	bf00      	nop
 800538c:	370c      	adds	r7, #12
 800538e:	46bd      	mov	sp, r7
 8005390:	bcb0      	pop	{r4, r5, r7}
 8005392:	4770      	bx	lr
 8005394:	08010a80 	.word	0x08010a80

08005398 <initsensor>:
void initsensor(){
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
	HAL_ADC_Init(&hadc1);
 800539c:	4802      	ldr	r0, [pc, #8]	@ (80053a8 <initsensor+0x10>)
 800539e:	f004 f8cf 	bl	8009540 <HAL_ADC_Init>
// Here you init your sensors
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	200000e0 	.word	0x200000e0

080053ac <initfunc>:



void initfunc (osjob_t* j) {
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
	// intialize sensor hardware
	initsensor();
 80053b4:	f7ff fff0 	bl	8005398 <initsensor>
	// reset MAC state
	LMIC_reset();
 80053b8:	f7ff ff08 	bl	80051cc <LMIC_reset>
	// start joining
	LMIC_startJoining();
 80053bc:	f7ff fab0 	bl	8004920 <LMIC_startJoining>
	// init done - onEvent() callback will be invoked...
}
 80053c0:	bf00      	nop
 80053c2:	3708      	adds	r7, #8
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <reportfunc>:


static osjob_t reportjob;
// report sensor value every minute
//remplacer ce qui suis avec fonction librairie cayenne
static void reportfunc (osjob_t* j) {
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
	bme68x_start(&data, &hi2c1);
 80053d0:	491f      	ldr	r1, [pc, #124]	@ (8005450 <reportfunc+0x88>)
 80053d2:	4820      	ldr	r0, [pc, #128]	@ (8005454 <reportfunc+0x8c>)
 80053d4:	f003 fb2e 	bl	8008a34 <bme68x_start>

		if (bme68x_single_measure(&data) == 0)
 80053d8:	481e      	ldr	r0, [pc, #120]	@ (8005454 <reportfunc+0x8c>)
 80053da:	f003 fb7b 	bl	8008ad4 <bme68x_single_measure>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d124      	bne.n	800542e <reportfunc+0x66>
		{

			// Measurement is successful, so continue with IAQ
			data.iaq_score = bme68x_iaq(); // Calculate IAQ
 80053e4:	f003 fdf2 	bl	8008fcc <bme68x_iaq>
 80053e8:	eef0 7a40 	vmov.f32	s15, s0
 80053ec:	4b19      	ldr	r3, [pc, #100]	@ (8005454 <reportfunc+0x8c>)
 80053ee:	edc3 7a02 	vstr	s15, [r3, #8]


			//data.temperature, data.pressure, data.humidity, data.iaq_score, data.gas_resistance;
			temp = data.temperature;
 80053f2:	4b18      	ldr	r3, [pc, #96]	@ (8005454 <reportfunc+0x8c>)
 80053f4:	edd3 7a03 	vldr	s15, [r3, #12]
 80053f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053fc:	ee17 2a90 	vmov	r2, s15
 8005400:	4b15      	ldr	r3, [pc, #84]	@ (8005458 <reportfunc+0x90>)
 8005402:	601a      	str	r2, [r3, #0]

			cayenne_lpp_reset(&lpp);
 8005404:	4815      	ldr	r0, [pc, #84]	@ (800545c <reportfunc+0x94>)
 8005406:	f7fc fb1b 	bl	8001a40 <cayenne_lpp_reset>

			cayenne_lpp_add_temperature(&lpp, 1, data.temperature);
 800540a:	4b12      	ldr	r3, [pc, #72]	@ (8005454 <reportfunc+0x8c>)
 800540c:	edd3 7a03 	vldr	s15, [r3, #12]
 8005410:	eeb0 0a67 	vmov.f32	s0, s15
 8005414:	2101      	movs	r1, #1
 8005416:	4811      	ldr	r0, [pc, #68]	@ (800545c <reportfunc+0x94>)
 8005418:	f7fc fb24 	bl	8001a64 <cayenne_lpp_add_temperature>

			LMIC_setTxData2(1, getBuffer(&lpp), 42, 0);
 800541c:	480f      	ldr	r0, [pc, #60]	@ (800545c <reportfunc+0x94>)
 800541e:	f7fc fb7f 	bl	8001b20 <getBuffer>
 8005422:	4601      	mov	r1, r0
 8005424:	2300      	movs	r3, #0
 8005426:	222a      	movs	r2, #42	@ 0x2a
 8005428:	2001      	movs	r0, #1
 800542a:	f7ff ff47 	bl	80052bc <LMIC_setTxData2>
		}



		// reschedule job in 60 seconds
		os_setTimedCallback(j, os_getTime()+sec2osticks(15), reportfunc);
 800542e:	f000 f973 	bl	8005718 <os_getTime>
 8005432:	4603      	mov	r3, r0
 8005434:	f503 23ea 	add.w	r3, r3, #479232	@ 0x75000
 8005438:	f503 7340 	add.w	r3, r3, #768	@ 0x300
 800543c:	4a08      	ldr	r2, [pc, #32]	@ (8005460 <reportfunc+0x98>)
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f000 f9d3 	bl	80057ec <os_setTimedCallback>
}
 8005446:	bf00      	nop
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
 800544e:	bf00      	nop
 8005450:	2000020c 	.word	0x2000020c
 8005454:	20000438 	.word	0x20000438
 8005458:	20000454 	.word	0x20000454
 800545c:	2000040c 	.word	0x2000040c
 8005460:	080053c9 	.word	0x080053c9

08005464 <onEvent>:


//////////////////////////////////////////////////
// LMIC EVENT CALLBACK
//////////////////////////////////////////////////
void onEvent (ev_t ev) {
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	71fb      	strb	r3, [r7, #7]
	debug_event(ev);
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	4618      	mov	r0, r3
 8005472:	f7fc fbf9 	bl	8001c68 <debug_event>
	switch(ev) {
 8005476:	79fb      	ldrb	r3, [r7, #7]
 8005478:	3b01      	subs	r3, #1
 800547a:	2b0e      	cmp	r3, #14
 800547c:	d87a      	bhi.n	8005574 <onEvent+0x110>
 800547e:	a201      	add	r2, pc, #4	@ (adr r2, 8005484 <onEvent+0x20>)
 8005480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005484:	080054df 	.word	0x080054df
 8005488:	080054e7 	.word	0x080054e7
 800548c:	080054ef 	.word	0x080054ef
 8005490:	080054f7 	.word	0x080054f7
 8005494:	080054c1 	.word	0x080054c1
 8005498:	080054c9 	.word	0x080054c9
 800549c:	080054ff 	.word	0x080054ff
 80054a0:	080054d7 	.word	0x080054d7
 80054a4:	08005507 	.word	0x08005507
 80054a8:	0800550f 	.word	0x0800550f
 80054ac:	0800554d 	.word	0x0800554d
 80054b0:	08005555 	.word	0x08005555
 80054b4:	0800555d 	.word	0x0800555d
 80054b8:	08005565 	.word	0x08005565
 80054bc:	0800556d 	.word	0x0800556d
	// network joined, session established
		case EV_JOINING:
			debug_str("try joining\r\n");
 80054c0:	4832      	ldr	r0, [pc, #200]	@ (800558c <onEvent+0x128>)
 80054c2:	f7fc fba6 	bl	8001c12 <debug_str>
//			blinkfunc(&blinkjob);
			break;
 80054c6:	e05d      	b.n	8005584 <onEvent+0x120>
		case EV_JOINED:
			// kick-off periodic sensor job
			reportfunc(&reportjob);
 80054c8:	4831      	ldr	r0, [pc, #196]	@ (8005590 <onEvent+0x12c>)
 80054ca:	f7ff ff7d 	bl	80053c8 <reportfunc>
			debug_led(1);
 80054ce:	2001      	movs	r0, #1
 80054d0:	f7fc fb3c 	bl	8001b4c <debug_led>
			break;
 80054d4:	e056      	b.n	8005584 <onEvent+0x120>
		case EV_JOIN_FAILED:
			debug_str("join failed\r\n");
 80054d6:	482f      	ldr	r0, [pc, #188]	@ (8005594 <onEvent+0x130>)
 80054d8:	f7fc fb9b 	bl	8001c12 <debug_str>
			break;
 80054dc:	e052      	b.n	8005584 <onEvent+0x120>
		case EV_SCAN_TIMEOUT:
			debug_str("EV_SCAN_TIMEOUT\r\n");
 80054de:	482e      	ldr	r0, [pc, #184]	@ (8005598 <onEvent+0x134>)
 80054e0:	f7fc fb97 	bl	8001c12 <debug_str>
			break;
 80054e4:	e04e      	b.n	8005584 <onEvent+0x120>
		case EV_BEACON_FOUND:
			debug_str("EV_BEACON_FOUND\r\n");
 80054e6:	482d      	ldr	r0, [pc, #180]	@ (800559c <onEvent+0x138>)
 80054e8:	f7fc fb93 	bl	8001c12 <debug_str>
			break;
 80054ec:	e04a      	b.n	8005584 <onEvent+0x120>
		case EV_BEACON_MISSED:
			debug_str("EV_BEACON_MISSED\r\n");
 80054ee:	482c      	ldr	r0, [pc, #176]	@ (80055a0 <onEvent+0x13c>)
 80054f0:	f7fc fb8f 	bl	8001c12 <debug_str>
			break;
 80054f4:	e046      	b.n	8005584 <onEvent+0x120>
		case EV_BEACON_TRACKED:
			debug_str("EV_BEACON_TRACKED\r\n");
 80054f6:	482b      	ldr	r0, [pc, #172]	@ (80055a4 <onEvent+0x140>)
 80054f8:	f7fc fb8b 	bl	8001c12 <debug_str>
			break;
 80054fc:	e042      	b.n	8005584 <onEvent+0x120>
		case EV_RFU1:
			debug_str("EV_RFU1\r\n");
 80054fe:	482a      	ldr	r0, [pc, #168]	@ (80055a8 <onEvent+0x144>)
 8005500:	f7fc fb87 	bl	8001c12 <debug_str>
			break;
 8005504:	e03e      	b.n	8005584 <onEvent+0x120>
		case EV_REJOIN_FAILED:
			debug_str("EV_REJOIN_FAILED\r\n");
 8005506:	4829      	ldr	r0, [pc, #164]	@ (80055ac <onEvent+0x148>)
 8005508:	f7fc fb83 	bl	8001c12 <debug_str>
			break;
 800550c:	e03a      	b.n	8005584 <onEvent+0x120>
		case EV_TXCOMPLETE:
			debug_str("EV_TXCOMPLETE (includes waiting for RX windows)\r\n");
 800550e:	4828      	ldr	r0, [pc, #160]	@ (80055b0 <onEvent+0x14c>)
 8005510:	f7fc fb7f 	bl	8001c12 <debug_str>
			if (LMIC.txrxFlags & TXRX_ACK)
 8005514:	4b27      	ldr	r3, [pc, #156]	@ (80055b4 <onEvent+0x150>)
 8005516:	f893 3145 	ldrb.w	r3, [r3, #325]	@ 0x145
 800551a:	b25b      	sxtb	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	da02      	bge.n	8005526 <onEvent+0xc2>
				debug_str("Received ack\r\n");
 8005520:	4825      	ldr	r0, [pc, #148]	@ (80055b8 <onEvent+0x154>)
 8005522:	f7fc fb76 	bl	8001c12 <debug_str>
			if (LMIC.dataLen) {
 8005526:	4b23      	ldr	r3, [pc, #140]	@ (80055b4 <onEvent+0x150>)
 8005528:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800552c:	2b00      	cmp	r3, #0
 800552e:	d028      	beq.n	8005582 <onEvent+0x11e>
				debug_str("Received ");
 8005530:	4822      	ldr	r0, [pc, #136]	@ (80055bc <onEvent+0x158>)
 8005532:	f7fc fb6e 	bl	8001c12 <debug_str>
				debug_val("Data length", LMIC.dataLen);
 8005536:	4b1f      	ldr	r3, [pc, #124]	@ (80055b4 <onEvent+0x150>)
 8005538:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800553c:	4619      	mov	r1, r3
 800553e:	4820      	ldr	r0, [pc, #128]	@ (80055c0 <onEvent+0x15c>)
 8005540:	f7fc fb7c 	bl	8001c3c <debug_val>
				debug_str(" bytes of payload\r\n");
 8005544:	481f      	ldr	r0, [pc, #124]	@ (80055c4 <onEvent+0x160>)
 8005546:	f7fc fb64 	bl	8001c12 <debug_str>
			}
			break;
 800554a:	e01a      	b.n	8005582 <onEvent+0x11e>
		case EV_LOST_TSYNC:
			debug_str("EV_LOST_TSYNC\r\n");
 800554c:	481e      	ldr	r0, [pc, #120]	@ (80055c8 <onEvent+0x164>)
 800554e:	f7fc fb60 	bl	8001c12 <debug_str>
			break;
 8005552:	e017      	b.n	8005584 <onEvent+0x120>
		case EV_RESET:
			debug_str("EV_RESET\r\n");
 8005554:	481d      	ldr	r0, [pc, #116]	@ (80055cc <onEvent+0x168>)
 8005556:	f7fc fb5c 	bl	8001c12 <debug_str>
			break;
 800555a:	e013      	b.n	8005584 <onEvent+0x120>
		case EV_RXCOMPLETE:
			// data received in ping slot
			debug_str("EV_RXCOMPLETE \r\n");
 800555c:	481c      	ldr	r0, [pc, #112]	@ (80055d0 <onEvent+0x16c>)
 800555e:	f7fc fb58 	bl	8001c12 <debug_str>
			break;
 8005562:	e00f      	b.n	8005584 <onEvent+0x120>
		case EV_LINK_DEAD:
			debug_str("EV_LINK_DEAD \r\n");
 8005564:	481b      	ldr	r0, [pc, #108]	@ (80055d4 <onEvent+0x170>)
 8005566:	f7fc fb54 	bl	8001c12 <debug_str>
			break;
 800556a:	e00b      	b.n	8005584 <onEvent+0x120>
		case EV_LINK_ALIVE:
			debug_str("EV_LINK_ALIVE \r\n");
 800556c:	481a      	ldr	r0, [pc, #104]	@ (80055d8 <onEvent+0x174>)
 800556e:	f7fc fb50 	bl	8001c12 <debug_str>
			break;
 8005572:	e007      	b.n	8005584 <onEvent+0x120>
		default:
			debug_str("Unknown event \r \n");
 8005574:	4819      	ldr	r0, [pc, #100]	@ (80055dc <onEvent+0x178>)
 8005576:	f7fc fb4c 	bl	8001c12 <debug_str>
			reportfunc(&reportjob);
 800557a:	4805      	ldr	r0, [pc, #20]	@ (8005590 <onEvent+0x12c>)
 800557c:	f7ff ff24 	bl	80053c8 <reportfunc>
			break;
 8005580:	e000      	b.n	8005584 <onEvent+0x120>
			break;
 8005582:	bf00      	nop
	}
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	0800f698 	.word	0x0800f698
 8005590:	20000458 	.word	0x20000458
 8005594:	0800f6a8 	.word	0x0800f6a8
 8005598:	0800f6b8 	.word	0x0800f6b8
 800559c:	0800f6cc 	.word	0x0800f6cc
 80055a0:	0800f6e0 	.word	0x0800f6e0
 80055a4:	0800f6f4 	.word	0x0800f6f4
 80055a8:	0800f708 	.word	0x0800f708
 80055ac:	0800f714 	.word	0x0800f714
 80055b0:	0800f728 	.word	0x0800f728
 80055b4:	20000260 	.word	0x20000260
 80055b8:	0800f75c 	.word	0x0800f75c
 80055bc:	0800f76c 	.word	0x0800f76c
 80055c0:	0800f778 	.word	0x0800f778
 80055c4:	0800f784 	.word	0x0800f784
 80055c8:	0800f798 	.word	0x0800f798
 80055cc:	0800f7a8 	.word	0x0800f7a8
 80055d0:	0800f7b4 	.word	0x0800f7b4
 80055d4:	0800f7c8 	.word	0x0800f7c8
 80055d8:	0800f7d8 	.word	0x0800f7d8
 80055dc:	0800f7ec 	.word	0x0800f7ec

080055e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80055e6:	f003 fd60 	bl	80090aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80055ea:	f000 f82b 	bl	8005644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80055ee:	f7fc fb59 	bl	8001ca4 <MX_GPIO_Init>
  MX_TIM7_Init();
 80055f2:	f001 f8af 	bl	8006754 <MX_TIM7_Init>
  MX_ADC1_Init();
 80055f6:	f7fb fc21 	bl	8000e3c <MX_ADC1_Init>
  MX_I2C1_Init();
 80055fa:	f7fc fd63 	bl	80020c4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80055fe:	f001 f907 	bl	8006810 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8005602:	f000 fedb 	bl	80063bc <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8005606:	480c      	ldr	r0, [pc, #48]	@ (8005638 <main+0x58>)
 8005608:	f007 fe80 	bl	800d30c <HAL_TIM_Base_Start_IT>
  __HAL_SPI_ENABLE(&hspi3);
 800560c:	4b0b      	ldr	r3, [pc, #44]	@ (800563c <main+0x5c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	4b0a      	ldr	r3, [pc, #40]	@ (800563c <main+0x5c>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800561a:	601a      	str	r2, [r3, #0]
  osjob_t initjob;
  os_init();
 800561c:	f000 f86a 	bl	80056f4 <os_init>
  debug_init();
 8005620:	f7fc fa8a 	bl	8001b38 <debug_init>

//  os_setCallback(&hellojob, hellofunc);
  os_setCallback(&initjob, initfunc);
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	4906      	ldr	r1, [pc, #24]	@ (8005640 <main+0x60>)
 8005628:	4618      	mov	r0, r3
 800562a:	f000 f8b9 	bl	80057a0 <os_setCallback>

  os_runloop();
 800562e:	f000 f913 	bl	8005858 <os_runloop>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <main+0x52>
 8005636:	bf00      	nop
 8005638:	200004e4 	.word	0x200004e4
 800563c:	2000047c 	.word	0x2000047c
 8005640:	080053ad 	.word	0x080053ad

08005644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b096      	sub	sp, #88	@ 0x58
 8005648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800564a:	f107 0314 	add.w	r3, r7, #20
 800564e:	2244      	movs	r2, #68	@ 0x44
 8005650:	2100      	movs	r1, #0
 8005652:	4618      	mov	r0, r3
 8005654:	f008 ff27 	bl	800e4a6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005658:	463b      	mov	r3, r7
 800565a:	2200      	movs	r2, #0
 800565c:	601a      	str	r2, [r3, #0]
 800565e:	605a      	str	r2, [r3, #4]
 8005660:	609a      	str	r2, [r3, #8]
 8005662:	60da      	str	r2, [r3, #12]
 8005664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005666:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800566a:	f006 f85b 	bl	800b724 <HAL_PWREx_ControlVoltageScaling>
 800566e:	4603      	mov	r3, r0
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005674:	f000 f837 	bl	80056e6 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8005678:	2302      	movs	r3, #2
 800567a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800567c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005682:	2310      	movs	r3, #16
 8005684:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005686:	2302      	movs	r3, #2
 8005688:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800568a:	2302      	movs	r3, #2
 800568c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800568e:	2301      	movs	r3, #1
 8005690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8005692:	230a      	movs	r3, #10
 8005694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8005696:	2307      	movs	r3, #7
 8005698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800569a:	2302      	movs	r3, #2
 800569c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800569e:	2302      	movs	r3, #2
 80056a0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056a2:	f107 0314 	add.w	r3, r7, #20
 80056a6:	4618      	mov	r0, r3
 80056a8:	f006 f892 	bl	800b7d0 <HAL_RCC_OscConfig>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80056b2:	f000 f818 	bl	80056e6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056b6:	230f      	movs	r3, #15
 80056b8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056ba:	2303      	movs	r3, #3
 80056bc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056be:	2300      	movs	r3, #0
 80056c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80056c2:	2300      	movs	r3, #0
 80056c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80056c6:	2300      	movs	r3, #0
 80056c8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80056ca:	463b      	mov	r3, r7
 80056cc:	2104      	movs	r1, #4
 80056ce:	4618      	mov	r0, r3
 80056d0:	f006 fc92 	bl	800bff8 <HAL_RCC_ClockConfig>
 80056d4:	4603      	mov	r3, r0
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80056da:	f000 f804 	bl	80056e6 <Error_Handler>
  }
}
 80056de:	bf00      	nop
 80056e0:	3758      	adds	r7, #88	@ 0x58
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80056e6:	b480      	push	{r7}
 80056e8:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80056ea:	b672      	cpsid	i
}
 80056ec:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80056ee:	bf00      	nop
 80056f0:	e7fd      	b.n	80056ee <Error_Handler+0x8>
	...

080056f4 <os_init>:
static struct {
    osjob_t* scheduledjobs;
    osjob_t* runnablejobs;
} OS;

void os_init () {
 80056f4:	b580      	push	{r7, lr}
 80056f6:	af00      	add	r7, sp, #0
    memset(&OS, 0x00, sizeof(OS));
 80056f8:	2208      	movs	r2, #8
 80056fa:	2100      	movs	r1, #0
 80056fc:	4805      	ldr	r0, [pc, #20]	@ (8005714 <os_init+0x20>)
 80056fe:	f008 fed2 	bl	800e4a6 <memset>
    hal_init();
 8005702:	f7fc fcc1 	bl	8002088 <hal_init>
    radio_init();
 8005706:	f000 fcbd 	bl	8006084 <radio_init>
    LMIC_init();
 800570a:	f7ff fdad 	bl	8005268 <LMIC_init>
}
 800570e:	bf00      	nop
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	20000464 	.word	0x20000464

08005718 <os_getTime>:

ostime_t os_getTime () {
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
    return hal_ticks();
 800571c:	f7fc fbd2 	bl	8001ec4 <hal_ticks>
 8005720:	4603      	mov	r3, r0
}
 8005722:	4618      	mov	r0, r3
 8005724:	bd80      	pop	{r7, pc}

08005726 <unlinkjob>:

// unlink job from queue, return if removed
static int unlinkjob (osjob_t** pnext, osjob_t* job) {
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8005730:	e00d      	b.n	800574e <unlinkjob+0x28>
        if(*pnext == job) { // unlink
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	429a      	cmp	r2, r3
 800573a:	d105      	bne.n	8005748 <unlinkjob+0x22>
            *pnext = job->next;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	601a      	str	r2, [r3, #0]
            return 1;
 8005744:	2301      	movs	r3, #1
 8005746:	e007      	b.n	8005758 <unlinkjob+0x32>
    for( ; *pnext; pnext = &((*pnext)->next)) {
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1ed      	bne.n	8005732 <unlinkjob+0xc>
        }
    }
    return 0;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	370c      	adds	r7, #12
 800575c:	46bd      	mov	sp, r7
 800575e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005762:	4770      	bx	lr

08005764 <os_clearCallback>:

// clear scheduled job
void os_clearCallback (osjob_t* job) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
    hal_disableIRQs();
 800576c:	f7fc fc60 	bl	8002030 <hal_disableIRQs>
    unlinkjob(&OS.scheduledjobs, job) || unlinkjob(&OS.runnablejobs, job);
 8005770:	6879      	ldr	r1, [r7, #4]
 8005772:	4809      	ldr	r0, [pc, #36]	@ (8005798 <os_clearCallback+0x34>)
 8005774:	f7ff ffd7 	bl	8005726 <unlinkjob>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d105      	bne.n	800578a <os_clearCallback+0x26>
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	4806      	ldr	r0, [pc, #24]	@ (800579c <os_clearCallback+0x38>)
 8005782:	f7ff ffd0 	bl	8005726 <unlinkjob>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
    hal_enableIRQs();
 800578a:	f7fc fc61 	bl	8002050 <hal_enableIRQs>
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
 8005796:	bf00      	nop
 8005798:	20000464 	.word	0x20000464
 800579c:	20000468 	.word	0x20000468

080057a0 <os_setCallback>:

// schedule immediately runnable job
void os_setCallback (osjob_t* job, osjobcb_t cb) {
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
    osjob_t** pnext;
    hal_disableIRQs();
 80057aa:	f7fc fc41 	bl	8002030 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.runnablejobs, job);
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	480d      	ldr	r0, [pc, #52]	@ (80057e8 <os_setCallback+0x48>)
 80057b2:	f7ff ffb8 	bl	8005726 <unlinkjob>
    // fill-in job
    job->func = cb;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	601a      	str	r2, [r3, #0]
    // add to end of run queue
    for(pnext=&OS.runnablejobs; *pnext; pnext=&((*pnext)->next));
 80057c2:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <os_setCallback+0x48>)
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e002      	b.n	80057ce <os_setCallback+0x2e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	60fb      	str	r3, [r7, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f8      	bne.n	80057c8 <os_setCallback+0x28>
    *pnext = job;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 80057dc:	f7fc fc38 	bl	8002050 <hal_enableIRQs>
}
 80057e0:	bf00      	nop
 80057e2:	3710      	adds	r7, #16
 80057e4:	46bd      	mov	sp, r7
 80057e6:	bd80      	pop	{r7, pc}
 80057e8:	20000468 	.word	0x20000468

080057ec <os_setTimedCallback>:

// schedule timed job
void os_setTimedCallback (osjob_t* job, ostime_t time, osjobcb_t cb) {
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b086      	sub	sp, #24
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
    osjob_t** pnext;
    hal_disableIRQs();
 80057f8:	f7fc fc1a 	bl	8002030 <hal_disableIRQs>
    // remove if job was already queued
    unlinkjob(&OS.scheduledjobs, job);
 80057fc:	68f9      	ldr	r1, [r7, #12]
 80057fe:	4815      	ldr	r0, [pc, #84]	@ (8005854 <os_setTimedCallback+0x68>)
 8005800:	f7ff ff91 	bl	8005726 <unlinkjob>
    // fill-in job
    job->deadline = time;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	605a      	str	r2, [r3, #4]
    job->func = cb;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	609a      	str	r2, [r3, #8]
    job->next = NULL;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	601a      	str	r2, [r3, #0]
    // insert into schedule
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8005816:	4b0f      	ldr	r3, [pc, #60]	@ (8005854 <os_setTimedCallback+0x68>)
 8005818:	617b      	str	r3, [r7, #20]
 800581a:	e00e      	b.n	800583a <os_setTimedCallback+0x4e>
        if((*pnext)->deadline - time > 0) { // (cmp diff, not abs!)
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	1ad3      	subs	r3, r2, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	dd04      	ble.n	8005834 <os_setTimedCallback+0x48>
            // enqueue before next element and stop
            job->next = *pnext;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	601a      	str	r2, [r3, #0]
            break;
 8005832:	e006      	b.n	8005842 <os_setTimedCallback+0x56>
    for(pnext=&OS.scheduledjobs; *pnext; pnext=&((*pnext)->next)) {
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d1ec      	bne.n	800581c <os_setTimedCallback+0x30>
        }
    }
    *pnext = job;
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	68fa      	ldr	r2, [r7, #12]
 8005846:	601a      	str	r2, [r3, #0]
    hal_enableIRQs();
 8005848:	f7fc fc02 	bl	8002050 <hal_enableIRQs>
}
 800584c:	bf00      	nop
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}
 8005854:	20000464 	.word	0x20000464

08005858 <os_runloop>:

// execute jobs from timer and from run queue
void os_runloop () {
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
    while(1) {
        osjob_t* j = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	607b      	str	r3, [r7, #4]
        hal_disableIRQs();
 8005862:	f7fc fbe5 	bl	8002030 <hal_disableIRQs>
        // check for runnable jobs
        if(OS.runnablejobs) {
 8005866:	4b16      	ldr	r3, [pc, #88]	@ (80058c0 <os_runloop+0x68>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <os_runloop+0x26>
            j = OS.runnablejobs;
 800586e:	4b14      	ldr	r3, [pc, #80]	@ (80058c0 <os_runloop+0x68>)
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	607b      	str	r3, [r7, #4]
            OS.runnablejobs = j->next;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a11      	ldr	r2, [pc, #68]	@ (80058c0 <os_runloop+0x68>)
 800587a:	6053      	str	r3, [r2, #4]
 800587c:	e016      	b.n	80058ac <os_runloop+0x54>
        } else if(OS.scheduledjobs && hal_checkTimer(OS.scheduledjobs->deadline)) { // check for expired timed jobs
 800587e:	4b10      	ldr	r3, [pc, #64]	@ (80058c0 <os_runloop+0x68>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d010      	beq.n	80058a8 <os_runloop+0x50>
 8005886:	4b0e      	ldr	r3, [pc, #56]	@ (80058c0 <os_runloop+0x68>)
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	4618      	mov	r0, r3
 800588e:	f7fc fb77 	bl	8001f80 <hal_checkTimer>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d007      	beq.n	80058a8 <os_runloop+0x50>
            j = OS.scheduledjobs;
 8005898:	4b09      	ldr	r3, [pc, #36]	@ (80058c0 <os_runloop+0x68>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	607b      	str	r3, [r7, #4]
            OS.scheduledjobs = j->next;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a07      	ldr	r2, [pc, #28]	@ (80058c0 <os_runloop+0x68>)
 80058a4:	6013      	str	r3, [r2, #0]
 80058a6:	e001      	b.n	80058ac <os_runloop+0x54>
        } else { // nothing pending
            hal_sleep(); // wake by irq (timer already restarted)
 80058a8:	f7fc fbe6 	bl	8002078 <hal_sleep>
        }
        hal_enableIRQs();
 80058ac:	f7fc fbd0 	bl	8002050 <hal_enableIRQs>
        if(j) { // run job callback
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d0d3      	beq.n	800585e <os_runloop+0x6>
            j->func(j);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	689b      	ldr	r3, [r3, #8]
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	4798      	blx	r3
    while(1) {
 80058be:	e7ce      	b.n	800585e <os_runloop+0x6>
 80058c0:	20000464 	.word	0x20000464

080058c4 <writeReg>:
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif


static void writeReg (u1_t addr, u1_t data ) {
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	4603      	mov	r3, r0
 80058cc:	460a      	mov	r2, r1
 80058ce:	71fb      	strb	r3, [r7, #7]
 80058d0:	4613      	mov	r3, r2
 80058d2:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7fc fa6d 	bl	8001db4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	4618      	mov	r0, r3
 80058e4:	f7fc fac8 	bl	8001e78 <hal_spi>
    hal_spi(data);
 80058e8:	79bb      	ldrb	r3, [r7, #6]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fc fac4 	bl	8001e78 <hal_spi>
    hal_pin_nss(1);
 80058f0:	2001      	movs	r0, #1
 80058f2:	f7fc fa5f 	bl	8001db4 <hal_pin_nss>
}
 80058f6:	bf00      	nop
 80058f8:	3708      	adds	r7, #8
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}

080058fe <readReg>:

static u1_t readReg (u1_t addr) {
 80058fe:	b580      	push	{r7, lr}
 8005900:	b084      	sub	sp, #16
 8005902:	af00      	add	r7, sp, #0
 8005904:	4603      	mov	r3, r0
 8005906:	71fb      	strb	r3, [r7, #7]
    hal_pin_nss(0);
 8005908:	2000      	movs	r0, #0
 800590a:	f7fc fa53 	bl	8001db4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 800590e:	79fb      	ldrb	r3, [r7, #7]
 8005910:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005914:	b2db      	uxtb	r3, r3
 8005916:	4618      	mov	r0, r3
 8005918:	f7fc faae 	bl	8001e78 <hal_spi>
    u1_t val = hal_spi(0x00);
 800591c:	2000      	movs	r0, #0
 800591e:	f7fc faab 	bl	8001e78 <hal_spi>
 8005922:	4603      	mov	r3, r0
 8005924:	73fb      	strb	r3, [r7, #15]
    hal_pin_nss(1);
 8005926:	2001      	movs	r0, #1
 8005928:	f7fc fa44 	bl	8001db4 <hal_pin_nss>
    return val;
 800592c:	7bfb      	ldrb	r3, [r7, #15]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <writeBuf>:

static void writeBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	4603      	mov	r3, r0
 800593e:	6039      	str	r1, [r7, #0]
 8005940:	71fb      	strb	r3, [r7, #7]
 8005942:	4613      	mov	r3, r2
 8005944:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 8005946:	2000      	movs	r0, #0
 8005948:	f7fc fa34 	bl	8001db4 <hal_pin_nss>
    hal_spi(addr | 0x80);
 800594c:	79fb      	ldrb	r3, [r7, #7]
 800594e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005952:	b2db      	uxtb	r3, r3
 8005954:	4618      	mov	r0, r3
 8005956:	f7fc fa8f 	bl	8001e78 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800595a:	2300      	movs	r3, #0
 800595c:	73fb      	strb	r3, [r7, #15]
 800595e:	e009      	b.n	8005974 <writeBuf+0x3e>
        hal_spi(buf[i]);
 8005960:	7bfb      	ldrb	r3, [r7, #15]
 8005962:	683a      	ldr	r2, [r7, #0]
 8005964:	4413      	add	r3, r2
 8005966:	781b      	ldrb	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f7fc fa85 	bl	8001e78 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	3301      	adds	r3, #1
 8005972:	73fb      	strb	r3, [r7, #15]
 8005974:	7bfa      	ldrb	r2, [r7, #15]
 8005976:	79bb      	ldrb	r3, [r7, #6]
 8005978:	429a      	cmp	r2, r3
 800597a:	d3f1      	bcc.n	8005960 <writeBuf+0x2a>
    }
    hal_pin_nss(1);
 800597c:	2001      	movs	r0, #1
 800597e:	f7fc fa19 	bl	8001db4 <hal_pin_nss>
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <readBuf>:

static void readBuf (u1_t addr, xref2u1_t buf, u1_t len) {
 800598a:	b590      	push	{r4, r7, lr}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	4603      	mov	r3, r0
 8005992:	6039      	str	r1, [r7, #0]
 8005994:	71fb      	strb	r3, [r7, #7]
 8005996:	4613      	mov	r3, r2
 8005998:	71bb      	strb	r3, [r7, #6]
    hal_pin_nss(0);
 800599a:	2000      	movs	r0, #0
 800599c:	f7fc fa0a 	bl	8001db4 <hal_pin_nss>
    hal_spi(addr & 0x7F);
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	4618      	mov	r0, r3
 80059aa:	f7fc fa65 	bl	8001e78 <hal_spi>
    for (u1_t i=0; i<len; i++) {
 80059ae:	2300      	movs	r3, #0
 80059b0:	73fb      	strb	r3, [r7, #15]
 80059b2:	e00a      	b.n	80059ca <readBuf+0x40>
        buf[i] = hal_spi(0x00);
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	18d4      	adds	r4, r2, r3
 80059ba:	2000      	movs	r0, #0
 80059bc:	f7fc fa5c 	bl	8001e78 <hal_spi>
 80059c0:	4603      	mov	r3, r0
 80059c2:	7023      	strb	r3, [r4, #0]
    for (u1_t i=0; i<len; i++) {
 80059c4:	7bfb      	ldrb	r3, [r7, #15]
 80059c6:	3301      	adds	r3, #1
 80059c8:	73fb      	strb	r3, [r7, #15]
 80059ca:	7bfa      	ldrb	r2, [r7, #15]
 80059cc:	79bb      	ldrb	r3, [r7, #6]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d3f0      	bcc.n	80059b4 <readBuf+0x2a>
    }
    hal_pin_nss(1);
 80059d2:	2001      	movs	r0, #1
 80059d4:	f7fc f9ee 	bl	8001db4 <hal_pin_nss>
}
 80059d8:	bf00      	nop
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd90      	pop	{r4, r7, pc}

080059e0 <opmode>:

static void opmode (u1_t mode) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b082      	sub	sp, #8
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	4603      	mov	r3, r0
 80059e8:	71fb      	strb	r3, [r7, #7]
    writeReg(RegOpMode, (readReg(RegOpMode) & ~OPMODE_MASK) | mode);
 80059ea:	2001      	movs	r0, #1
 80059ec:	f7ff ff87 	bl	80058fe <readReg>
 80059f0:	4603      	mov	r3, r0
 80059f2:	b25b      	sxtb	r3, r3
 80059f4:	f023 0307 	bic.w	r3, r3, #7
 80059f8:	b25a      	sxtb	r2, r3
 80059fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	b25b      	sxtb	r3, r3
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	2001      	movs	r0, #1
 8005a08:	f7ff ff5c 	bl	80058c4 <writeReg>
}
 8005a0c:	bf00      	nop
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <opmodeLora>:

static void opmodeLora() {
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b082      	sub	sp, #8
 8005a18:	af00      	add	r7, sp, #0
    u1_t u = OPMODE_LORA;
 8005a1a:	2380      	movs	r3, #128	@ 0x80
 8005a1c:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	f043 0308 	orr.w	r3, r3, #8
 8005a24:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f7ff ff4a 	bl	80058c4 <writeReg>
}
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <opmodeFSK>:

static void opmodeFSK() {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
    u1_t u = 0;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    u |= 0x8;   // TBD: sx1276 high freq
 8005a42:	79fb      	ldrb	r3, [r7, #7]
 8005a44:	f043 0308 	orr.w	r3, r3, #8
 8005a48:	71fb      	strb	r3, [r7, #7]
#endif
    writeReg(RegOpMode, u);
 8005a4a:	79fb      	ldrb	r3, [r7, #7]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f7ff ff38 	bl	80058c4 <writeReg>
}
 8005a54:	bf00      	nop
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <configLoraModem>:

// configure LoRa modem (cfg1, cfg2)
static void configLoraModem () {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
    sf_t sf = getSf(LMIC.rps);
 8005a62:	4b54      	ldr	r3, [pc, #336]	@ (8005bb4 <configLoraModem+0x158>)
 8005a64:	89db      	ldrh	r3, [r3, #14]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fc fbc4 	bl	80021f4 <getSf>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	713b      	strb	r3, [r7, #4]

#ifdef CFG_sx1276_radio
        u1_t mc1 = 0, mc2 = 0, mc3 = 0;
 8005a70:	2300      	movs	r3, #0
 8005a72:	71fb      	strb	r3, [r7, #7]
 8005a74:	2300      	movs	r3, #0
 8005a76:	71bb      	strb	r3, [r7, #6]
 8005a78:	2300      	movs	r3, #0
 8005a7a:	717b      	strb	r3, [r7, #5]

        switch (getBw(LMIC.rps)) {
 8005a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8005bb4 <configLoraModem+0x158>)
 8005a7e:	89db      	ldrh	r3, [r3, #14]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fc fbc7 	bl	8002214 <getBw>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d010      	beq.n	8005aae <configLoraModem+0x52>
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	dc13      	bgt.n	8005ab8 <configLoraModem+0x5c>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <configLoraModem+0x3e>
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d005      	beq.n	8005aa4 <configLoraModem+0x48>
 8005a98:	e00e      	b.n	8005ab8 <configLoraModem+0x5c>
        case BW125: mc1 |= SX1276_MC1_BW_125; break;
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8005aa0:	71fb      	strb	r3, [r7, #7]
 8005aa2:	e00b      	b.n	8005abc <configLoraModem+0x60>
        case BW250: mc1 |= SX1276_MC1_BW_250; break;
 8005aa4:	79fb      	ldrb	r3, [r7, #7]
 8005aa6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005aaa:	71fb      	strb	r3, [r7, #7]
 8005aac:	e006      	b.n	8005abc <configLoraModem+0x60>
        case BW500: mc1 |= SX1276_MC1_BW_500; break;
 8005aae:	79fb      	ldrb	r3, [r7, #7]
 8005ab0:	f063 036f 	orn	r3, r3, #111	@ 0x6f
 8005ab4:	71fb      	strb	r3, [r7, #7]
 8005ab6:	e001      	b.n	8005abc <configLoraModem+0x60>
        default:
            ASSERT(0);
 8005ab8:	f7fc fafc 	bl	80020b4 <hal_failed>
        }
        switch( getCr(LMIC.rps) ) {
 8005abc:	4b3d      	ldr	r3, [pc, #244]	@ (8005bb4 <configLoraModem+0x158>)
 8005abe:	89db      	ldrh	r3, [r3, #14]
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fc fbb9 	bl	8002238 <getCr>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b03      	cmp	r3, #3
 8005aca:	d81f      	bhi.n	8005b0c <configLoraModem+0xb0>
 8005acc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ad4 <configLoraModem+0x78>)
 8005ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ad2:	bf00      	nop
 8005ad4:	08005ae5 	.word	0x08005ae5
 8005ad8:	08005aef 	.word	0x08005aef
 8005adc:	08005af9 	.word	0x08005af9
 8005ae0:	08005b03 	.word	0x08005b03
        case CR_4_5: mc1 |= SX1276_MC1_CR_4_5; break;
 8005ae4:	79fb      	ldrb	r3, [r7, #7]
 8005ae6:	f043 0302 	orr.w	r3, r3, #2
 8005aea:	71fb      	strb	r3, [r7, #7]
 8005aec:	e010      	b.n	8005b10 <configLoraModem+0xb4>
        case CR_4_6: mc1 |= SX1276_MC1_CR_4_6; break;
 8005aee:	79fb      	ldrb	r3, [r7, #7]
 8005af0:	f043 0304 	orr.w	r3, r3, #4
 8005af4:	71fb      	strb	r3, [r7, #7]
 8005af6:	e00b      	b.n	8005b10 <configLoraModem+0xb4>
        case CR_4_7: mc1 |= SX1276_MC1_CR_4_7; break;
 8005af8:	79fb      	ldrb	r3, [r7, #7]
 8005afa:	f043 0306 	orr.w	r3, r3, #6
 8005afe:	71fb      	strb	r3, [r7, #7]
 8005b00:	e006      	b.n	8005b10 <configLoraModem+0xb4>
        case CR_4_8: mc1 |= SX1276_MC1_CR_4_8; break;
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	f043 0308 	orr.w	r3, r3, #8
 8005b08:	71fb      	strb	r3, [r7, #7]
 8005b0a:	e001      	b.n	8005b10 <configLoraModem+0xb4>
        default:
            ASSERT(0);
 8005b0c:	f7fc fad2 	bl	80020b4 <hal_failed>
        }

        if (getIh(LMIC.rps)) {
 8005b10:	4b28      	ldr	r3, [pc, #160]	@ (8005bb4 <configLoraModem+0x158>)
 8005b12:	89db      	ldrh	r3, [r3, #14]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7fc fbe1 	bl	80022dc <getIh>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d00e      	beq.n	8005b3e <configLoraModem+0xe2>
            mc1 |= SX1276_MC1_IMPLICIT_HEADER_MODE_ON;
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	f043 0301 	orr.w	r3, r3, #1
 8005b26:	71fb      	strb	r3, [r7, #7]
            writeReg(LORARegPayloadLength, getIh(LMIC.rps)); // required length
 8005b28:	4b22      	ldr	r3, [pc, #136]	@ (8005bb4 <configLoraModem+0x158>)
 8005b2a:	89db      	ldrh	r3, [r3, #14]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fc fbd5 	bl	80022dc <getIh>
 8005b32:	4603      	mov	r3, r0
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	4619      	mov	r1, r3
 8005b38:	2022      	movs	r0, #34	@ 0x22
 8005b3a:	f7ff fec3 	bl	80058c4 <writeReg>
        }
        // set ModemConfig1
        writeReg(LORARegModemConfig1, mc1);
 8005b3e:	79fb      	ldrb	r3, [r7, #7]
 8005b40:	4619      	mov	r1, r3
 8005b42:	201d      	movs	r0, #29
 8005b44:	f7ff febe 	bl	80058c4 <writeReg>

        mc2 = (SX1272_MC2_SF7 + ((sf-1)<<4));
 8005b48:	793b      	ldrb	r3, [r7, #4]
 8005b4a:	3b01      	subs	r3, #1
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	011b      	lsls	r3, r3, #4
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	3370      	adds	r3, #112	@ 0x70
 8005b54:	71bb      	strb	r3, [r7, #6]
        if (getNocrc(LMIC.rps) == 0) {
 8005b56:	4b17      	ldr	r3, [pc, #92]	@ (8005bb4 <configLoraModem+0x158>)
 8005b58:	89db      	ldrh	r3, [r3, #14]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7fc fb97 	bl	800228e <getNocrc>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <configLoraModem+0x112>
            mc2 |= SX1276_MC2_RX_PAYLOAD_CRCON;
 8005b66:	79bb      	ldrb	r3, [r7, #6]
 8005b68:	f043 0304 	orr.w	r3, r3, #4
 8005b6c:	71bb      	strb	r3, [r7, #6]
        }
        writeReg(LORARegModemConfig2, mc2);
 8005b6e:	79bb      	ldrb	r3, [r7, #6]
 8005b70:	4619      	mov	r1, r3
 8005b72:	201e      	movs	r0, #30
 8005b74:	f7ff fea6 	bl	80058c4 <writeReg>
        
        mc3 = SX1276_MC3_AGCAUTO;
 8005b78:	2304      	movs	r3, #4
 8005b7a:	717b      	strb	r3, [r7, #5]
        if ((sf == SF11 || sf == SF12) && getBw(LMIC.rps) == BW125) {
 8005b7c:	793b      	ldrb	r3, [r7, #4]
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	d002      	beq.n	8005b88 <configLoraModem+0x12c>
 8005b82:	793b      	ldrb	r3, [r7, #4]
 8005b84:	2b06      	cmp	r3, #6
 8005b86:	d10b      	bne.n	8005ba0 <configLoraModem+0x144>
 8005b88:	4b0a      	ldr	r3, [pc, #40]	@ (8005bb4 <configLoraModem+0x158>)
 8005b8a:	89db      	ldrh	r3, [r3, #14]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7fc fb41 	bl	8002214 <getBw>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d103      	bne.n	8005ba0 <configLoraModem+0x144>
            mc3 |= SX1276_MC3_LOW_DATA_RATE_OPTIMIZE;
 8005b98:	797b      	ldrb	r3, [r7, #5]
 8005b9a:	f043 0308 	orr.w	r3, r3, #8
 8005b9e:	717b      	strb	r3, [r7, #5]
        }
        writeReg(LORARegModemConfig3, mc3);
 8005ba0:	797b      	ldrb	r3, [r7, #5]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	2026      	movs	r0, #38	@ 0x26
 8005ba6:	f7ff fe8d 	bl	80058c4 <writeReg>
#endif

#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005baa:	bf00      	nop
 8005bac:	3708      	adds	r7, #8
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000260 	.word	0x20000260

08005bb8 <configChannel>:

static void configChannel () {
 8005bb8:	b5b0      	push	{r4, r5, r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
    // set frequency: FQ = (FRF * 32 Mhz) / (2 ^ 19)
    u8_t frf = ((u8_t)LMIC.freq << 19) / 32000000;
 8005bbe:	4c1b      	ldr	r4, [pc, #108]	@ (8005c2c <configChannel+0x74>)
 8005bc0:	68a4      	ldr	r4, [r4, #8]
 8005bc2:	2500      	movs	r5, #0
 8005bc4:	4622      	mov	r2, r4
 8005bc6:	462b      	mov	r3, r5
 8005bc8:	0b51      	lsrs	r1, r2, #13
 8005bca:	04d0      	lsls	r0, r2, #19
 8005bcc:	4a18      	ldr	r2, [pc, #96]	@ (8005c30 <configChannel+0x78>)
 8005bce:	f04f 0300 	mov.w	r3, #0
 8005bd2:	f7fa ffbb 	bl	8000b4c <__aeabi_uldivmod>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	e9c7 2300 	strd	r2, r3, [r7]
    writeReg(RegFrfMsb, (u1_t)(frf>>16));
 8005bde:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005be2:	f04f 0200 	mov.w	r2, #0
 8005be6:	f04f 0300 	mov.w	r3, #0
 8005bea:	0c02      	lsrs	r2, r0, #16
 8005bec:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005bf0:	0c0b      	lsrs	r3, r1, #16
 8005bf2:	b2d3      	uxtb	r3, r2
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	2006      	movs	r0, #6
 8005bf8:	f7ff fe64 	bl	80058c4 <writeReg>
    writeReg(RegFrfMid, (u1_t)(frf>> 8));
 8005bfc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005c00:	f04f 0200 	mov.w	r2, #0
 8005c04:	f04f 0300 	mov.w	r3, #0
 8005c08:	0a02      	lsrs	r2, r0, #8
 8005c0a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005c0e:	0a0b      	lsrs	r3, r1, #8
 8005c10:	b2d3      	uxtb	r3, r2
 8005c12:	4619      	mov	r1, r3
 8005c14:	2007      	movs	r0, #7
 8005c16:	f7ff fe55 	bl	80058c4 <writeReg>
    writeReg(RegFrfLsb, (u1_t)(frf>> 0));
 8005c1a:	783b      	ldrb	r3, [r7, #0]
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	2008      	movs	r0, #8
 8005c20:	f7ff fe50 	bl	80058c4 <writeReg>
}
 8005c24:	bf00      	nop
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bdb0      	pop	{r4, r5, r7, pc}
 8005c2c:	20000260 	.word	0x20000260
 8005c30:	01e84800 	.word	0x01e84800

08005c34 <configPower>:



static void configPower () {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
#ifdef CFG_sx1276_radio
    // no boost used for now
    s1_t pw = (s1_t)LMIC.txpow;
 8005c3a:	4b15      	ldr	r3, [pc, #84]	@ (8005c90 <configPower+0x5c>)
 8005c3c:	7c9b      	ldrb	r3, [r3, #18]
 8005c3e:	71fb      	strb	r3, [r7, #7]
    if(pw >= 17) {
 8005c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c44:	2b10      	cmp	r3, #16
 8005c46:	dd02      	ble.n	8005c4e <configPower+0x1a>
        pw = 15;
 8005c48:	230f      	movs	r3, #15
 8005c4a:	71fb      	strb	r3, [r7, #7]
 8005c4c:	e005      	b.n	8005c5a <configPower+0x26>
    } else if(pw < 2) {
 8005c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	dc01      	bgt.n	8005c5a <configPower+0x26>
        pw = 2;
 8005c56:	2302      	movs	r3, #2
 8005c58:	71fb      	strb	r3, [r7, #7]
    }
    // check board type for BOOST pin
    writeReg(RegPaConfig, (u1_t)(0x80|(pw&0xf)));
 8005c5a:	79fb      	ldrb	r3, [r7, #7]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	b25b      	sxtb	r3, r3
 8005c62:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c66:	b25b      	sxtb	r3, r3
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	2009      	movs	r0, #9
 8005c6e:	f7ff fe29 	bl	80058c4 <writeReg>
    writeReg(RegPaDac, readReg(RegPaDac)|0x4);
 8005c72:	205a      	movs	r0, #90	@ 0x5a
 8005c74:	f7ff fe43 	bl	80058fe <readReg>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	f043 0304 	orr.w	r3, r3, #4
 8005c7e:	b2db      	uxtb	r3, r3
 8005c80:	4619      	mov	r1, r3
 8005c82:	205a      	movs	r0, #90	@ 0x5a
 8005c84:	f7ff fe1e 	bl	80058c4 <writeReg>
    }
    writeReg(RegPaConfig, (u1_t)(0x80|(pw-2)));
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif /* CFG_sx1272_radio */
}
 8005c88:	bf00      	nop
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	20000260 	.word	0x20000260

08005c94 <txfsk>:

static void txfsk () {
 8005c94:	b580      	push	{r7, lr}
 8005c96:	af00      	add	r7, sp, #0
    // select FSK modem (from sleep mode)
    writeReg(RegOpMode, 0x10); // FSK, BT=0.5
 8005c98:	2110      	movs	r1, #16
 8005c9a:	2001      	movs	r0, #1
 8005c9c:	f7ff fe12 	bl	80058c4 <writeReg>
    ASSERT(readReg(RegOpMode) == 0x10);
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	f7ff fe2c 	bl	80058fe <readReg>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	2b10      	cmp	r3, #16
 8005caa:	d001      	beq.n	8005cb0 <txfsk+0x1c>
 8005cac:	f7fc fa02 	bl	80020b4 <hal_failed>
    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7ff fe95 	bl	80059e0 <opmode>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005cb6:	2102      	movs	r1, #2
 8005cb8:	2002      	movs	r0, #2
 8005cba:	f7ff fe03 	bl	80058c4 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005cbe:	2180      	movs	r1, #128	@ 0x80
 8005cc0:	2003      	movs	r0, #3
 8005cc2:	f7ff fdff 	bl	80058c4 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005cc6:	2101      	movs	r1, #1
 8005cc8:	2004      	movs	r0, #4
 8005cca:	f7ff fdfb 	bl	80058c4 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8005cce:	2199      	movs	r1, #153	@ 0x99
 8005cd0:	2005      	movs	r0, #5
 8005cd2:	f7ff fdf7 	bl	80058c4 <writeReg>
    // frame and packet handler settings
    writeReg(FSKRegPreambleMsb, 0x00);
 8005cd6:	2100      	movs	r1, #0
 8005cd8:	2025      	movs	r0, #37	@ 0x25
 8005cda:	f7ff fdf3 	bl	80058c4 <writeReg>
    writeReg(FSKRegPreambleLsb, 0x05);
 8005cde:	2105      	movs	r1, #5
 8005ce0:	2026      	movs	r0, #38	@ 0x26
 8005ce2:	f7ff fdef 	bl	80058c4 <writeReg>
    writeReg(FSKRegSyncConfig, 0x12);
 8005ce6:	2112      	movs	r1, #18
 8005ce8:	2027      	movs	r0, #39	@ 0x27
 8005cea:	f7ff fdeb 	bl	80058c4 <writeReg>
    writeReg(FSKRegPacketConfig1, 0xD0);
 8005cee:	21d0      	movs	r1, #208	@ 0xd0
 8005cf0:	2030      	movs	r0, #48	@ 0x30
 8005cf2:	f7ff fde7 	bl	80058c4 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40);
 8005cf6:	2140      	movs	r1, #64	@ 0x40
 8005cf8:	2031      	movs	r0, #49	@ 0x31
 8005cfa:	f7ff fde3 	bl	80058c4 <writeReg>
    writeReg(FSKRegSyncValue1, 0xC1);
 8005cfe:	21c1      	movs	r1, #193	@ 0xc1
 8005d00:	2028      	movs	r0, #40	@ 0x28
 8005d02:	f7ff fddf 	bl	80058c4 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005d06:	2194      	movs	r1, #148	@ 0x94
 8005d08:	2029      	movs	r0, #41	@ 0x29
 8005d0a:	f7ff fddb 	bl	80058c4 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005d0e:	21c1      	movs	r1, #193	@ 0xc1
 8005d10:	202a      	movs	r0, #42	@ 0x2a
 8005d12:	f7ff fdd7 	bl	80058c4 <writeReg>
    // configure frequency
    configChannel();
 8005d16:	f7ff ff4f 	bl	8005bb8 <configChannel>
    // configure output power
    configPower();
 8005d1a:	f7ff ff8b 	bl	8005c34 <configPower>

    // set the IRQ mapping DIO0=PacketSent DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TXNOP);
 8005d1e:	2134      	movs	r1, #52	@ 0x34
 8005d20:	2040      	movs	r0, #64	@ 0x40
 8005d22:	f7ff fdcf 	bl	80058c4 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(FSKRegPayloadLength, LMIC.dataLen+1); // (insert length byte into payload))
 8005d26:	4b10      	ldr	r3, [pc, #64]	@ (8005d68 <txfsk+0xd4>)
 8005d28:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	4619      	mov	r1, r3
 8005d32:	2032      	movs	r0, #50	@ 0x32
 8005d34:	f7ff fdc6 	bl	80058c4 <writeReg>

    // download length byte and buffer to the radio FIFO
    writeReg(RegFifo, LMIC.dataLen);
 8005d38:	4b0b      	ldr	r3, [pc, #44]	@ (8005d68 <txfsk+0xd4>)
 8005d3a:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005d3e:	4619      	mov	r1, r3
 8005d40:	2000      	movs	r0, #0
 8005d42:	f7ff fdbf 	bl	80058c4 <writeReg>
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005d46:	4b08      	ldr	r3, [pc, #32]	@ (8005d68 <txfsk+0xd4>)
 8005d48:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	4907      	ldr	r1, [pc, #28]	@ (8005d6c <txfsk+0xd8>)
 8005d50:	2000      	movs	r0, #0
 8005d52:	f7ff fdf0 	bl	8005936 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005d56:	2001      	movs	r0, #1
 8005d58:	f7fc f821 	bl	8001d9e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005d5c:	2003      	movs	r0, #3
 8005d5e:	f7ff fe3f 	bl	80059e0 <opmode>
}
 8005d62:	bf00      	nop
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000260 	.word	0x20000260
 8005d6c:	200003a8 	.word	0x200003a8

08005d70 <txlora>:

static void txlora () {
 8005d70:	b580      	push	{r7, lr}
 8005d72:	af00      	add	r7, sp, #0
    // select LoRa modem (from sleep mode)
    //writeReg(RegOpMode, OPMODE_LORA);
    opmodeLora();
 8005d74:	f7ff fe4e 	bl	8005a14 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005d78:	2001      	movs	r0, #1
 8005d7a:	f7ff fdc0 	bl	80058fe <readReg>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	b25b      	sxtb	r3, r3
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	db01      	blt.n	8005d8a <txlora+0x1a>
 8005d86:	f7fc f995 	bl	80020b4 <hal_failed>

    // enter standby mode (required for FIFO loading))
    opmode(OPMODE_STANDBY);
 8005d8a:	2001      	movs	r0, #1
 8005d8c:	f7ff fe28 	bl	80059e0 <opmode>
    // configure LoRa modem (cfg1, cfg2)
    configLoraModem();
 8005d90:	f7ff fe64 	bl	8005a5c <configLoraModem>
    // configure frequency
    configChannel();
 8005d94:	f7ff ff10 	bl	8005bb8 <configChannel>
    // configure output power
    writeReg(RegPaRamp, (readReg(RegPaRamp) & 0xF0) | 0x08); // set PA ramp-up time 50 uSec
 8005d98:	200a      	movs	r0, #10
 8005d9a:	f7ff fdb0 	bl	80058fe <readReg>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	b25b      	sxtb	r3, r3
 8005da2:	f023 030f 	bic.w	r3, r3, #15
 8005da6:	b25b      	sxtb	r3, r3
 8005da8:	f043 0308 	orr.w	r3, r3, #8
 8005dac:	b25b      	sxtb	r3, r3
 8005dae:	b2db      	uxtb	r3, r3
 8005db0:	4619      	mov	r1, r3
 8005db2:	200a      	movs	r0, #10
 8005db4:	f7ff fd86 	bl	80058c4 <writeReg>
    configPower();
 8005db8:	f7ff ff3c 	bl	8005c34 <configPower>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005dbc:	2134      	movs	r1, #52	@ 0x34
 8005dbe:	2039      	movs	r0, #57	@ 0x39
 8005dc0:	f7ff fd80 	bl	80058c4 <writeReg>
    
    // set the IRQ mapping DIO0=TxDone DIO1=NOP DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_TXDONE|MAP_DIO1_LORA_NOP|MAP_DIO2_LORA_NOP);
 8005dc4:	21f0      	movs	r1, #240	@ 0xf0
 8005dc6:	2040      	movs	r0, #64	@ 0x40
 8005dc8:	f7ff fd7c 	bl	80058c4 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005dcc:	21ff      	movs	r1, #255	@ 0xff
 8005dce:	2012      	movs	r0, #18
 8005dd0:	f7ff fd78 	bl	80058c4 <writeReg>
    // mask all IRQs but TxDone
    writeReg(LORARegIrqFlagsMask, ~IRQ_LORA_TXDONE_MASK);
 8005dd4:	21f7      	movs	r1, #247	@ 0xf7
 8005dd6:	2011      	movs	r0, #17
 8005dd8:	f7ff fd74 	bl	80058c4 <writeReg>

    // initialize the payload size and address pointers    
    writeReg(LORARegFifoTxBaseAddr, 0x00);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	200e      	movs	r0, #14
 8005de0:	f7ff fd70 	bl	80058c4 <writeReg>
    writeReg(LORARegFifoAddrPtr, 0x00);
 8005de4:	2100      	movs	r1, #0
 8005de6:	200d      	movs	r0, #13
 8005de8:	f7ff fd6c 	bl	80058c4 <writeReg>
    writeReg(LORARegPayloadLength, LMIC.dataLen);
 8005dec:	4b0b      	ldr	r3, [pc, #44]	@ (8005e1c <txlora+0xac>)
 8005dee:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005df2:	4619      	mov	r1, r3
 8005df4:	2022      	movs	r0, #34	@ 0x22
 8005df6:	f7ff fd65 	bl	80058c4 <writeReg>
       
    // download buffer to the radio FIFO
    writeBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8005dfa:	4b08      	ldr	r3, [pc, #32]	@ (8005e1c <txlora+0xac>)
 8005dfc:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8005e00:	461a      	mov	r2, r3
 8005e02:	4907      	ldr	r1, [pc, #28]	@ (8005e20 <txlora+0xb0>)
 8005e04:	2000      	movs	r0, #0
 8005e06:	f7ff fd96 	bl	8005936 <writeBuf>

    // enable antenna switch for TX
    hal_pin_rxtx(1);
 8005e0a:	2001      	movs	r0, #1
 8005e0c:	f7fb ffc7 	bl	8001d9e <hal_pin_rxtx>
    
    // now we actually start the transmission
    opmode(OPMODE_TX);
 8005e10:	2003      	movs	r0, #3
 8005e12:	f7ff fde5 	bl	80059e0 <opmode>
}
 8005e16:	bf00      	nop
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	20000260 	.word	0x20000260
 8005e20:	200003a8 	.word	0x200003a8

08005e24 <starttx>:

// start transmitter (buf=LMIC.frame, len=LMIC.dataLen)
static void starttx () {
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8005e28:	2001      	movs	r0, #1
 8005e2a:	f7ff fd68 	bl	80058fe <readReg>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	f003 0307 	and.w	r3, r3, #7
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d001      	beq.n	8005e3c <starttx+0x18>
 8005e38:	f7fc f93c 	bl	80020b4 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8005e3c:	4b07      	ldr	r3, [pc, #28]	@ (8005e5c <starttx+0x38>)
 8005e3e:	89db      	ldrh	r3, [r3, #14]
 8005e40:	4618      	mov	r0, r3
 8005e42:	f7fc f9d7 	bl	80021f4 <getSf>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d102      	bne.n	8005e52 <starttx+0x2e>
        txfsk();
 8005e4c:	f7ff ff22 	bl	8005c94 <txfsk>
    } else { // LoRa modem
        txlora();
    }
    // the radio will go back to STANDBY mode as soon as the TX is finished
    // the corresponding IRQ will inform us about completion.
}
 8005e50:	e001      	b.n	8005e56 <starttx+0x32>
        txlora();
 8005e52:	f7ff ff8d 	bl	8005d70 <txlora>
}
 8005e56:	bf00      	nop
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	20000260 	.word	0x20000260

08005e60 <rxlora>:
    [RXMODE_SCAN]   = IRQ_LORA_RXDONE_MASK,
    [RXMODE_RSSI]   = 0x00,
};

// start LoRa receiver (time=LMIC.rxtime, timeout=LMIC.rxsyms, result=LMIC.frame[LMIC.dataLen])
static void rxlora (u1_t rxmode) {
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b082      	sub	sp, #8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	4603      	mov	r3, r0
 8005e68:	71fb      	strb	r3, [r7, #7]
    // select LoRa modem (from sleep mode)
    opmodeLora();
 8005e6a:	f7ff fdd3 	bl	8005a14 <opmodeLora>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) != 0);
 8005e6e:	2001      	movs	r0, #1
 8005e70:	f7ff fd45 	bl	80058fe <readReg>
 8005e74:	4603      	mov	r3, r0
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	db01      	blt.n	8005e80 <rxlora+0x20>
 8005e7c:	f7fc f91a 	bl	80020b4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005e80:	2001      	movs	r0, #1
 8005e82:	f7ff fdad 	bl	80059e0 <opmode>
    // don't use MAC settings at startup
    if(rxmode == RXMODE_RSSI) { // use fixed settings for rssi scan
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d108      	bne.n	8005e9e <rxlora+0x3e>
        writeReg(LORARegModemConfig1, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG1);
 8005e8c:	210a      	movs	r1, #10
 8005e8e:	201d      	movs	r0, #29
 8005e90:	f7ff fd18 	bl	80058c4 <writeReg>
        writeReg(LORARegModemConfig2, RXLORA_RXMODE_RSSI_REG_MODEM_CONFIG2);
 8005e94:	2170      	movs	r1, #112	@ 0x70
 8005e96:	201e      	movs	r0, #30
 8005e98:	f7ff fd14 	bl	80058c4 <writeReg>
 8005e9c:	e003      	b.n	8005ea6 <rxlora+0x46>
    } else { // single or continuous rx mode
        // configure LoRa modem (cfg1, cfg2)
        configLoraModem();
 8005e9e:	f7ff fddd 	bl	8005a5c <configLoraModem>
        // configure frequency
        configChannel();
 8005ea2:	f7ff fe89 	bl	8005bb8 <configChannel>
    }
    // set LNA gain
    writeReg(RegLna, LNA_RX_GAIN); 
 8005ea6:	2121      	movs	r1, #33	@ 0x21
 8005ea8:	200c      	movs	r0, #12
 8005eaa:	f7ff fd0b 	bl	80058c4 <writeReg>
    // set max payload size
    writeReg(LORARegPayloadMaxLength, 64);
 8005eae:	2140      	movs	r1, #64	@ 0x40
 8005eb0:	2023      	movs	r0, #35	@ 0x23
 8005eb2:	f7ff fd07 	bl	80058c4 <writeReg>
    // use inverted I/Q signal (prevent mote-to-mote communication)

    // XXX: use flag to switch on/off inversion
    if (LMIC.noRXIQinversion) {
 8005eb6:	4b26      	ldr	r3, [pc, #152]	@ (8005f50 <rxlora+0xf0>)
 8005eb8:	f893 31a8 	ldrb.w	r3, [r3, #424]	@ 0x1a8
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <rxlora+0x78>
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ) & ~(1<<6));
 8005ec0:	2033      	movs	r0, #51	@ 0x33
 8005ec2:	f7ff fd1c 	bl	80058fe <readReg>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	4619      	mov	r1, r3
 8005ed0:	2033      	movs	r0, #51	@ 0x33
 8005ed2:	f7ff fcf7 	bl	80058c4 <writeReg>
 8005ed6:	e00a      	b.n	8005eee <rxlora+0x8e>
    } else {
        writeReg(LORARegInvertIQ, readReg(LORARegInvertIQ)|(1<<6));
 8005ed8:	2033      	movs	r0, #51	@ 0x33
 8005eda:	f7ff fd10 	bl	80058fe <readReg>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	2033      	movs	r0, #51	@ 0x33
 8005eea:	f7ff fceb 	bl	80058c4 <writeReg>
    }

    // set symbol timeout (for single rx)
    writeReg(LORARegSymbTimeoutLsb, LMIC.rxsyms);
 8005eee:	4b18      	ldr	r3, [pc, #96]	@ (8005f50 <rxlora+0xf0>)
 8005ef0:	7c1b      	ldrb	r3, [r3, #16]
 8005ef2:	4619      	mov	r1, r3
 8005ef4:	201f      	movs	r0, #31
 8005ef6:	f7ff fce5 	bl	80058c4 <writeReg>
    // set sync word
    writeReg(LORARegSyncWord, LORA_MAC_PREAMBLE);
 8005efa:	2134      	movs	r1, #52	@ 0x34
 8005efc:	2039      	movs	r0, #57	@ 0x39
 8005efe:	f7ff fce1 	bl	80058c4 <writeReg>
    
    // configure DIO mapping DIO0=RxDone DIO1=RxTout DIO2=NOP
    writeReg(RegDioMapping1, MAP_DIO0_LORA_RXDONE|MAP_DIO1_LORA_RXTOUT|MAP_DIO2_LORA_NOP);
 8005f02:	21c0      	movs	r1, #192	@ 0xc0
 8005f04:	2040      	movs	r0, #64	@ 0x40
 8005f06:	f7ff fcdd 	bl	80058c4 <writeReg>
    // clear all radio IRQ flags
    writeReg(LORARegIrqFlags, 0xFF);
 8005f0a:	21ff      	movs	r1, #255	@ 0xff
 8005f0c:	2012      	movs	r0, #18
 8005f0e:	f7ff fcd9 	bl	80058c4 <writeReg>
    // enable required radio IRQs
    writeReg(LORARegIrqFlagsMask, ~rxlorairqmask[rxmode]);
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	4a0f      	ldr	r2, [pc, #60]	@ (8005f54 <rxlora+0xf4>)
 8005f16:	5cd3      	ldrb	r3, [r2, r3]
 8005f18:	43db      	mvns	r3, r3
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	2011      	movs	r0, #17
 8005f20:	f7ff fcd0 	bl	80058c4 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8005f24:	2000      	movs	r0, #0
 8005f26:	f7fb ff3a 	bl	8001d9e <hal_pin_rxtx>

    // now instruct the radio to receive
    if (rxmode == RXMODE_SINGLE) { // single rx
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d108      	bne.n	8005f42 <rxlora+0xe2>
        hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 8005f30:	4b07      	ldr	r3, [pc, #28]	@ (8005f50 <rxlora+0xf0>)
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fc f812 	bl	8001f5e <hal_waitUntil>
        opmode(OPMODE_RX_SINGLE);
 8005f3a:	2006      	movs	r0, #6
 8005f3c:	f7ff fd50 	bl	80059e0 <opmode>
    } else { // continous rx (scan or rssi)
        opmode(OPMODE_RX); 
    }
}
 8005f40:	e002      	b.n	8005f48 <rxlora+0xe8>
        opmode(OPMODE_RX); 
 8005f42:	2005      	movs	r0, #5
 8005f44:	f7ff fd4c 	bl	80059e0 <opmode>
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	20000260 	.word	0x20000260
 8005f54:	08010a90 	.word	0x08010a90

08005f58 <rxfsk>:

static void rxfsk (u1_t rxmode) {
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	71fb      	strb	r3, [r7, #7]
    // only single rx (no continuous scanning, no noise sampling)
    ASSERT( rxmode == RXMODE_SINGLE );
 8005f62:	79fb      	ldrb	r3, [r7, #7]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d001      	beq.n	8005f6c <rxfsk+0x14>
 8005f68:	f7fc f8a4 	bl	80020b4 <hal_failed>
    // select FSK modem (from sleep mode)
    //writeReg(RegOpMode, 0x00); // (not LoRa)
    opmodeFSK();
 8005f6c:	f7ff fd64 	bl	8005a38 <opmodeFSK>
    ASSERT((readReg(RegOpMode) & OPMODE_LORA) == 0);
 8005f70:	2001      	movs	r0, #1
 8005f72:	f7ff fcc4 	bl	80058fe <readReg>
 8005f76:	4603      	mov	r3, r0
 8005f78:	b25b      	sxtb	r3, r3
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	da01      	bge.n	8005f82 <rxfsk+0x2a>
 8005f7e:	f7fc f899 	bl	80020b4 <hal_failed>
    // enter standby mode (warm up))
    opmode(OPMODE_STANDBY);
 8005f82:	2001      	movs	r0, #1
 8005f84:	f7ff fd2c 	bl	80059e0 <opmode>
    // configure frequency
    configChannel();
 8005f88:	f7ff fe16 	bl	8005bb8 <configChannel>
    // set LNA gain
    //writeReg(RegLna, 0x20|0x03); // max gain, boost enable
    writeReg(RegLna, LNA_RX_GAIN);
 8005f8c:	2121      	movs	r1, #33	@ 0x21
 8005f8e:	200c      	movs	r0, #12
 8005f90:	f7ff fc98 	bl	80058c4 <writeReg>
    // configure receiver
    writeReg(FSKRegRxConfig, 0x1E); // AFC auto, AGC, trigger on preamble?!?
 8005f94:	211e      	movs	r1, #30
 8005f96:	200d      	movs	r0, #13
 8005f98:	f7ff fc94 	bl	80058c4 <writeReg>
    // set receiver bandwidth
    writeReg(FSKRegRxBw, 0x0B); // 50kHz SSb
 8005f9c:	210b      	movs	r1, #11
 8005f9e:	2012      	movs	r0, #18
 8005fa0:	f7ff fc90 	bl	80058c4 <writeReg>
    // set AFC bandwidth
    writeReg(FSKRegAfcBw, 0x12); // 83.3kHz SSB
 8005fa4:	2112      	movs	r1, #18
 8005fa6:	2013      	movs	r0, #19
 8005fa8:	f7ff fc8c 	bl	80058c4 <writeReg>
    // set preamble detection
    writeReg(FSKRegPreambleDetect, 0xAA); // enable, 2 bytes, 10 chip errors
 8005fac:	21aa      	movs	r1, #170	@ 0xaa
 8005fae:	201f      	movs	r0, #31
 8005fb0:	f7ff fc88 	bl	80058c4 <writeReg>
    // set sync config
    writeReg(FSKRegSyncConfig, 0x12); // no auto restart, preamble 0xAA, enable, fill FIFO, 3 bytes sync
 8005fb4:	2112      	movs	r1, #18
 8005fb6:	2027      	movs	r0, #39	@ 0x27
 8005fb8:	f7ff fc84 	bl	80058c4 <writeReg>
    // set packet config
    writeReg(FSKRegPacketConfig1, 0xD8); // var-length, whitening, crc, no auto-clear, no adr filter
 8005fbc:	21d8      	movs	r1, #216	@ 0xd8
 8005fbe:	2030      	movs	r0, #48	@ 0x30
 8005fc0:	f7ff fc80 	bl	80058c4 <writeReg>
    writeReg(FSKRegPacketConfig2, 0x40); // packet mode
 8005fc4:	2140      	movs	r1, #64	@ 0x40
 8005fc6:	2031      	movs	r0, #49	@ 0x31
 8005fc8:	f7ff fc7c 	bl	80058c4 <writeReg>
    // set sync value
    writeReg(FSKRegSyncValue1, 0xC1);
 8005fcc:	21c1      	movs	r1, #193	@ 0xc1
 8005fce:	2028      	movs	r0, #40	@ 0x28
 8005fd0:	f7ff fc78 	bl	80058c4 <writeReg>
    writeReg(FSKRegSyncValue2, 0x94);
 8005fd4:	2194      	movs	r1, #148	@ 0x94
 8005fd6:	2029      	movs	r0, #41	@ 0x29
 8005fd8:	f7ff fc74 	bl	80058c4 <writeReg>
    writeReg(FSKRegSyncValue3, 0xC1);
 8005fdc:	21c1      	movs	r1, #193	@ 0xc1
 8005fde:	202a      	movs	r0, #42	@ 0x2a
 8005fe0:	f7ff fc70 	bl	80058c4 <writeReg>
    // set preamble timeout
    writeReg(FSKRegRxTimeout2, 0xFF);//(LMIC.rxsyms+1)/2);
 8005fe4:	21ff      	movs	r1, #255	@ 0xff
 8005fe6:	2021      	movs	r0, #33	@ 0x21
 8005fe8:	f7ff fc6c 	bl	80058c4 <writeReg>
    // set bitrate
    writeReg(FSKRegBitrateMsb, 0x02); // 50kbps
 8005fec:	2102      	movs	r1, #2
 8005fee:	2002      	movs	r0, #2
 8005ff0:	f7ff fc68 	bl	80058c4 <writeReg>
    writeReg(FSKRegBitrateLsb, 0x80);
 8005ff4:	2180      	movs	r1, #128	@ 0x80
 8005ff6:	2003      	movs	r0, #3
 8005ff8:	f7ff fc64 	bl	80058c4 <writeReg>
    // set frequency deviation
    writeReg(FSKRegFdevMsb, 0x01); // +/- 25kHz
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	2004      	movs	r0, #4
 8006000:	f7ff fc60 	bl	80058c4 <writeReg>
    writeReg(FSKRegFdevLsb, 0x99);
 8006004:	2199      	movs	r1, #153	@ 0x99
 8006006:	2005      	movs	r0, #5
 8006008:	f7ff fc5c 	bl	80058c4 <writeReg>
    
    // configure DIO mapping DIO0=PayloadReady DIO1=NOP DIO2=TimeOut
    writeReg(RegDioMapping1, MAP_DIO0_FSK_READY|MAP_DIO1_FSK_NOP|MAP_DIO2_FSK_TIMEOUT);
 800600c:	2138      	movs	r1, #56	@ 0x38
 800600e:	2040      	movs	r0, #64	@ 0x40
 8006010:	f7ff fc58 	bl	80058c4 <writeReg>

    // enable antenna switch for RX
    hal_pin_rxtx(0);
 8006014:	2000      	movs	r0, #0
 8006016:	f7fb fec2 	bl	8001d9e <hal_pin_rxtx>
    
    // now instruct the radio to receive
    hal_waitUntil(LMIC.rxtime); // busy wait until exact rx time
 800601a:	4b06      	ldr	r3, [pc, #24]	@ (8006034 <rxfsk+0xdc>)
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	4618      	mov	r0, r3
 8006020:	f7fb ff9d 	bl	8001f5e <hal_waitUntil>
    opmode(OPMODE_RX); // no single rx mode available in FSK
 8006024:	2005      	movs	r0, #5
 8006026:	f7ff fcdb 	bl	80059e0 <opmode>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000260 	.word	0x20000260

08006038 <startrx>:

static void startrx (u1_t rxmode) {
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	71fb      	strb	r3, [r7, #7]
    ASSERT( (readReg(RegOpMode) & OPMODE_MASK) == OPMODE_SLEEP );
 8006042:	2001      	movs	r0, #1
 8006044:	f7ff fc5b 	bl	80058fe <readReg>
 8006048:	4603      	mov	r3, r0
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <startrx+0x1e>
 8006052:	f7fc f82f 	bl	80020b4 <hal_failed>
    if(getSf(LMIC.rps) == FSK) { // FSK modem
 8006056:	4b0a      	ldr	r3, [pc, #40]	@ (8006080 <startrx+0x48>)
 8006058:	89db      	ldrh	r3, [r3, #14]
 800605a:	4618      	mov	r0, r3
 800605c:	f7fc f8ca 	bl	80021f4 <getSf>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d104      	bne.n	8006070 <startrx+0x38>
        rxfsk(rxmode);
 8006066:	79fb      	ldrb	r3, [r7, #7]
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff75 	bl	8005f58 <rxfsk>
    } else { // LoRa modem
        rxlora(rxmode);
    }
    // the radio will go back to STANDBY mode as soon as the RX is finished
    // or timed out, and the corresponding IRQ will inform us about completion.
}
 800606e:	e003      	b.n	8006078 <startrx+0x40>
        rxlora(rxmode);
 8006070:	79fb      	ldrb	r3, [r7, #7]
 8006072:	4618      	mov	r0, r3
 8006074:	f7ff fef4 	bl	8005e60 <rxlora>
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20000260 	.word	0x20000260

08006084 <radio_init>:

// get random seed from wideband noise rssi
void radio_init () {
 8006084:	b590      	push	{r4, r7, lr}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
    hal_disableIRQs();
 800608a:	f7fb ffd1 	bl	8002030 <hal_disableIRQs>

    // manually reset radio
#ifdef CFG_sx1276_radio
    hal_pin_rst(0); // drive RST pin low
 800608e:	2000      	movs	r0, #0
 8006090:	f7fb fea1 	bl	8001dd6 <hal_pin_rst>
#else
    hal_pin_rst(1); // drive RST pin high
#endif
    hal_waitUntil(os_getTime()+ms2osticks(1)); // wait >100us
 8006094:	f7ff fb40 	bl	8005718 <os_getTime>
 8006098:	4603      	mov	r3, r0
 800609a:	3320      	adds	r3, #32
 800609c:	4618      	mov	r0, r3
 800609e:	f7fb ff5e 	bl	8001f5e <hal_waitUntil>
    hal_pin_rst(2); // configure RST pin floating!
 80060a2:	2002      	movs	r0, #2
 80060a4:	f7fb fe97 	bl	8001dd6 <hal_pin_rst>
    hal_waitUntil(os_getTime()+ms2osticks(5)); // wait 5ms
 80060a8:	f7ff fb36 	bl	8005718 <os_getTime>
 80060ac:	4603      	mov	r3, r0
 80060ae:	33a0      	adds	r3, #160	@ 0xa0
 80060b0:	4618      	mov	r0, r3
 80060b2:	f7fb ff54 	bl	8001f5e <hal_waitUntil>

    opmode(OPMODE_SLEEP);
 80060b6:	2000      	movs	r0, #0
 80060b8:	f7ff fc92 	bl	80059e0 <opmode>

    // some sanity checks, e.g., read version number
    u1_t v = readReg(RegVersion);
 80060bc:	2042      	movs	r0, #66	@ 0x42
 80060be:	f7ff fc1e 	bl	80058fe <readReg>
 80060c2:	4603      	mov	r3, r0
 80060c4:	71fb      	strb	r3, [r7, #7]
#ifdef CFG_sx1276_radio
    ASSERT(v == 0x12 ); 
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	2b12      	cmp	r3, #18
 80060ca:	d001      	beq.n	80060d0 <radio_init+0x4c>
 80060cc:	f7fb fff2 	bl	80020b4 <hal_failed>
    ASSERT(v == 0x22);
#else
#error Missing CFG_sx1272_radio/CFG_sx1276_radio
#endif
    // seed 15-byte randomness via noise rssi
    rxlora(RXMODE_RSSI);
 80060d0:	2002      	movs	r0, #2
 80060d2:	f7ff fec5 	bl	8005e60 <rxlora>
    while( (readReg(RegOpMode) & OPMODE_MASK) != OPMODE_RX ); // continuous rx
 80060d6:	bf00      	nop
 80060d8:	2001      	movs	r0, #1
 80060da:	f7ff fc10 	bl	80058fe <readReg>
 80060de:	4603      	mov	r3, r0
 80060e0:	f003 0307 	and.w	r3, r3, #7
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d1f7      	bne.n	80060d8 <radio_init+0x54>
    for(int i=1; i<16; i++) {
 80060e8:	2301      	movs	r3, #1
 80060ea:	60fb      	str	r3, [r7, #12]
 80060ec:	e02c      	b.n	8006148 <radio_init+0xc4>
        for(int j=0; j<8; j++) {
 80060ee:	2300      	movs	r3, #0
 80060f0:	60bb      	str	r3, [r7, #8]
 80060f2:	e023      	b.n	800613c <radio_init+0xb8>
            u1_t b; // wait for two non-identical subsequent least-significant bits
            while( (b = readReg(LORARegRssiWideband) & 0x01) == (readReg(LORARegRssiWideband) & 0x01) );
 80060f4:	bf00      	nop
 80060f6:	202c      	movs	r0, #44	@ 0x2c
 80060f8:	f7ff fc01 	bl	80058fe <readReg>
 80060fc:	4603      	mov	r3, r0
 80060fe:	f003 0301 	and.w	r3, r3, #1
 8006102:	71bb      	strb	r3, [r7, #6]
 8006104:	79bc      	ldrb	r4, [r7, #6]
 8006106:	202c      	movs	r0, #44	@ 0x2c
 8006108:	f7ff fbf9 	bl	80058fe <readReg>
 800610c:	4603      	mov	r3, r0
 800610e:	f003 0301 	and.w	r3, r3, #1
 8006112:	429c      	cmp	r4, r3
 8006114:	d0ef      	beq.n	80060f6 <radio_init+0x72>
            randbuf[i] = (randbuf[i] << 1) | b;
 8006116:	4a14      	ldr	r2, [pc, #80]	@ (8006168 <radio_init+0xe4>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	4413      	add	r3, r2
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	005b      	lsls	r3, r3, #1
 8006120:	b25a      	sxtb	r2, r3
 8006122:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8006126:	4313      	orrs	r3, r2
 8006128:	b25b      	sxtb	r3, r3
 800612a:	b2d9      	uxtb	r1, r3
 800612c:	4a0e      	ldr	r2, [pc, #56]	@ (8006168 <radio_init+0xe4>)
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	4413      	add	r3, r2
 8006132:	460a      	mov	r2, r1
 8006134:	701a      	strb	r2, [r3, #0]
        for(int j=0; j<8; j++) {
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	3301      	adds	r3, #1
 800613a:	60bb      	str	r3, [r7, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b07      	cmp	r3, #7
 8006140:	ddd8      	ble.n	80060f4 <radio_init+0x70>
    for(int i=1; i<16; i++) {
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	3301      	adds	r3, #1
 8006146:	60fb      	str	r3, [r7, #12]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	ddcf      	ble.n	80060ee <radio_init+0x6a>
        }
    }
    randbuf[0] = 16; // set initial index
 800614e:	4b06      	ldr	r3, [pc, #24]	@ (8006168 <radio_init+0xe4>)
 8006150:	2210      	movs	r2, #16
 8006152:	701a      	strb	r2, [r3, #0]
    // Launch Rx chain calibration for HF band 
    writeReg(FSKRegImageCal, (readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_MASK)|RF_IMAGECAL_IMAGECAL_START);
    while((readReg(FSKRegImageCal) & RF_IMAGECAL_IMAGECAL_RUNNING) == RF_IMAGECAL_IMAGECAL_RUNNING) { ; }
#endif /* CFG_sx1276mb1_board */

    opmode(OPMODE_SLEEP);
 8006154:	2000      	movs	r0, #0
 8006156:	f7ff fc43 	bl	80059e0 <opmode>

    hal_enableIRQs();
 800615a:	f7fb ff79 	bl	8002050 <hal_enableIRQs>
}
 800615e:	bf00      	nop
 8006160:	3714      	adds	r7, #20
 8006162:	46bd      	mov	sp, r7
 8006164:	bd90      	pop	{r4, r7, pc}
 8006166:	bf00      	nop
 8006168:	2000046c 	.word	0x2000046c

0800616c <radio_rand1>:

// return next random byte derived from seed buffer
// (buf[0] holds index of next byte to be returned)
u1_t radio_rand1 () {
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
    u1_t i = randbuf[0];
 8006172:	4b10      	ldr	r3, [pc, #64]	@ (80061b4 <radio_rand1+0x48>)
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	71fb      	strb	r3, [r7, #7]
    ASSERT( i != 0 );
 8006178:	79fb      	ldrb	r3, [r7, #7]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <radio_rand1+0x16>
 800617e:	f7fb ff99 	bl	80020b4 <hal_failed>
    if( i==16 ) {
 8006182:	79fb      	ldrb	r3, [r7, #7]
 8006184:	2b10      	cmp	r3, #16
 8006186:	d106      	bne.n	8006196 <radio_rand1+0x2a>
        os_aes(AES_ENC, randbuf, 16); // encrypt seed with any key
 8006188:	2210      	movs	r2, #16
 800618a:	490a      	ldr	r1, [pc, #40]	@ (80061b4 <radio_rand1+0x48>)
 800618c:	2000      	movs	r0, #0
 800618e:	f7fa ff93 	bl	80010b8 <os_aes>
        i = 0;
 8006192:	2300      	movs	r3, #0
 8006194:	71fb      	strb	r3, [r7, #7]
    }
    u1_t v = randbuf[i++];
 8006196:	79fb      	ldrb	r3, [r7, #7]
 8006198:	1c5a      	adds	r2, r3, #1
 800619a:	71fa      	strb	r2, [r7, #7]
 800619c:	461a      	mov	r2, r3
 800619e:	4b05      	ldr	r3, [pc, #20]	@ (80061b4 <radio_rand1+0x48>)
 80061a0:	5c9b      	ldrb	r3, [r3, r2]
 80061a2:	71bb      	strb	r3, [r7, #6]
    randbuf[0] = i;
 80061a4:	4a03      	ldr	r2, [pc, #12]	@ (80061b4 <radio_rand1+0x48>)
 80061a6:	79fb      	ldrb	r3, [r7, #7]
 80061a8:	7013      	strb	r3, [r2, #0]
    return v;
 80061aa:	79bb      	ldrb	r3, [r7, #6]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3708      	adds	r7, #8
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	2000046c 	.word	0x2000046c

080061b8 <radio_irq_handler>:
    [SF12] = us2osticks(31189), // (1022 ticks)
};

// called by hal ext IRQ handler
// (radio goes to stanby mode after tx/rx operations)
void radio_irq_handler (u1_t dio) {
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	4603      	mov	r3, r0
 80061c0:	71fb      	strb	r3, [r7, #7]
    u1_t s = readReg(RegOpMode);
    u1_t c = readReg(LORARegModemConfig2);
    opmode(OPMODE_TX);
    return;
#else /* ! CFG_TxContinuousMode */
    ostime_t now = os_getTime();
 80061c2:	f7ff faa9 	bl	8005718 <os_getTime>
 80061c6:	60f8      	str	r0, [r7, #12]
    if( (readReg(RegOpMode) & OPMODE_LORA) != 0) { // LORA modem
 80061c8:	2001      	movs	r0, #1
 80061ca:	f7ff fb98 	bl	80058fe <readReg>
 80061ce:	4603      	mov	r3, r0
 80061d0:	b25b      	sxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	da74      	bge.n	80062c0 <radio_irq_handler+0x108>
        u1_t flags = readReg(LORARegIrqFlags);
 80061d6:	2012      	movs	r0, #18
 80061d8:	f7ff fb91 	bl	80058fe <readReg>
 80061dc:	4603      	mov	r3, r0
 80061de:	727b      	strb	r3, [r7, #9]
        if( flags & IRQ_LORA_TXDONE_MASK ) {
 80061e0:	7a7b      	ldrb	r3, [r7, #9]
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d004      	beq.n	80061f4 <radio_irq_handler+0x3c>
            // save exact tx time
            LMIC.txend = now - us2osticks(43); // TXDONE FIXUP
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	3b01      	subs	r3, #1
 80061ee:	4a59      	ldr	r2, [pc, #356]	@ (8006354 <radio_irq_handler+0x19c>)
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	e05c      	b.n	80062ae <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXDONE_MASK ) {
 80061f4:	7a7b      	ldrb	r3, [r7, #9]
 80061f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d04f      	beq.n	800629e <radio_irq_handler+0xe6>
            // save exact rx time
            if(getBw(LMIC.rps) == BW125) {
 80061fe:	4b55      	ldr	r3, [pc, #340]	@ (8006354 <radio_irq_handler+0x19c>)
 8006200:	89db      	ldrh	r3, [r3, #14]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fc f806 	bl	8002214 <getBw>
 8006208:	4603      	mov	r3, r0
 800620a:	2b00      	cmp	r3, #0
 800620c:	d10d      	bne.n	800622a <radio_irq_handler+0x72>
                now -= LORA_RXDONE_FIXUP[getSf(LMIC.rps)];
 800620e:	4b51      	ldr	r3, [pc, #324]	@ (8006354 <radio_irq_handler+0x19c>)
 8006210:	89db      	ldrh	r3, [r3, #14]
 8006212:	4618      	mov	r0, r3
 8006214:	f7fb ffee 	bl	80021f4 <getSf>
 8006218:	4603      	mov	r3, r0
 800621a:	461a      	mov	r2, r3
 800621c:	4b4e      	ldr	r3, [pc, #312]	@ (8006358 <radio_irq_handler+0x1a0>)
 800621e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006222:	461a      	mov	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	60fb      	str	r3, [r7, #12]
            }
            LMIC.rxtime = now;
 800622a:	4a4a      	ldr	r2, [pc, #296]	@ (8006354 <radio_irq_handler+0x19c>)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8006230:	201d      	movs	r0, #29
 8006232:	f7ff fb64 	bl	80058fe <readReg>
 8006236:	4603      	mov	r3, r0
 8006238:	f003 0304 	and.w	r3, r3, #4
 800623c:	2b00      	cmp	r3, #0
 800623e:	d005      	beq.n	800624c <radio_irq_handler+0x94>
                readReg(LORARegPayloadLength) : readReg(LORARegRxNbBytes);
 8006240:	2022      	movs	r0, #34	@ 0x22
 8006242:	f7ff fb5c 	bl	80058fe <readReg>
 8006246:	4603      	mov	r3, r0
 8006248:	461a      	mov	r2, r3
 800624a:	e004      	b.n	8006256 <radio_irq_handler+0x9e>
 800624c:	2013      	movs	r0, #19
 800624e:	f7ff fb56 	bl	80058fe <readReg>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
            LMIC.dataLen = (readReg(LORARegModemConfig1) & SX1272_MC1_IMPLICIT_HEADER_MODE_ON) ?
 8006256:	4b3f      	ldr	r3, [pc, #252]	@ (8006354 <radio_irq_handler+0x19c>)
 8006258:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // set FIFO read address pointer
            writeReg(LORARegFifoAddrPtr, readReg(LORARegFifoRxCurrentAddr)); 
 800625c:	2010      	movs	r0, #16
 800625e:	f7ff fb4e 	bl	80058fe <readReg>
 8006262:	4603      	mov	r3, r0
 8006264:	4619      	mov	r1, r3
 8006266:	200d      	movs	r0, #13
 8006268:	f7ff fb2c 	bl	80058c4 <writeReg>
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 800626c:	4b39      	ldr	r3, [pc, #228]	@ (8006354 <radio_irq_handler+0x19c>)
 800626e:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 8006272:	461a      	mov	r2, r3
 8006274:	4939      	ldr	r1, [pc, #228]	@ (800635c <radio_irq_handler+0x1a4>)
 8006276:	2000      	movs	r0, #0
 8006278:	f7ff fb87 	bl	800598a <readBuf>
            // read rx quality parameters
            LMIC.snr  = readReg(LORARegPktSnrValue); // SNR [dB] * 4
 800627c:	2019      	movs	r0, #25
 800627e:	f7ff fb3e 	bl	80058fe <readReg>
 8006282:	4603      	mov	r3, r0
 8006284:	b25a      	sxtb	r2, r3
 8006286:	4b33      	ldr	r3, [pc, #204]	@ (8006354 <radio_irq_handler+0x19c>)
 8006288:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = readReg(LORARegPktRssiValue) - 125 + 64; // RSSI [dBm] (-196...+63)
 800628a:	201a      	movs	r0, #26
 800628c:	f7ff fb37 	bl	80058fe <readReg>
 8006290:	4603      	mov	r3, r0
 8006292:	3b3d      	subs	r3, #61	@ 0x3d
 8006294:	b2db      	uxtb	r3, r3
 8006296:	b25a      	sxtb	r2, r3
 8006298:	4b2e      	ldr	r3, [pc, #184]	@ (8006354 <radio_irq_handler+0x19c>)
 800629a:	731a      	strb	r2, [r3, #12]
 800629c:	e007      	b.n	80062ae <radio_irq_handler+0xf6>
        } else if( flags & IRQ_LORA_RXTOUT_MASK ) {
 800629e:	f997 3009 	ldrsb.w	r3, [r7, #9]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	da03      	bge.n	80062ae <radio_irq_handler+0xf6>
            // indicate timeout
            LMIC.dataLen = 0;
 80062a6:	4b2b      	ldr	r3, [pc, #172]	@ (8006354 <radio_irq_handler+0x19c>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
        }
        // mask all radio IRQs
        writeReg(LORARegIrqFlagsMask, 0xFF);
 80062ae:	21ff      	movs	r1, #255	@ 0xff
 80062b0:	2011      	movs	r0, #17
 80062b2:	f7ff fb07 	bl	80058c4 <writeReg>
        // clear radio IRQ flags
        writeReg(LORARegIrqFlags, 0xFF);
 80062b6:	21ff      	movs	r1, #255	@ 0xff
 80062b8:	2012      	movs	r0, #18
 80062ba:	f7ff fb03 	bl	80058c4 <writeReg>
 80062be:	e03c      	b.n	800633a <radio_irq_handler+0x182>
    } else { // FSK modem
        u1_t flags1 = readReg(FSKRegIrqFlags1);
 80062c0:	203e      	movs	r0, #62	@ 0x3e
 80062c2:	f7ff fb1c 	bl	80058fe <readReg>
 80062c6:	4603      	mov	r3, r0
 80062c8:	72fb      	strb	r3, [r7, #11]
        u1_t flags2 = readReg(FSKRegIrqFlags2);
 80062ca:	203f      	movs	r0, #63	@ 0x3f
 80062cc:	f7ff fb17 	bl	80058fe <readReg>
 80062d0:	4603      	mov	r3, r0
 80062d2:	72bb      	strb	r3, [r7, #10]
        if( flags2 & IRQ_FSK2_PACKETSENT_MASK ) {
 80062d4:	7abb      	ldrb	r3, [r7, #10]
 80062d6:	f003 0308 	and.w	r3, r3, #8
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d003      	beq.n	80062e6 <radio_irq_handler+0x12e>
            // save exact tx time
            LMIC.txend = now;
 80062de:	4a1d      	ldr	r2, [pc, #116]	@ (8006354 <radio_irq_handler+0x19c>)
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e029      	b.n	800633a <radio_irq_handler+0x182>
        } else if( flags2 & IRQ_FSK2_PAYLOADREADY_MASK ) {
 80062e6:	7abb      	ldrb	r3, [r7, #10]
 80062e8:	f003 0304 	and.w	r3, r3, #4
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d019      	beq.n	8006324 <radio_irq_handler+0x16c>
            // save exact rx time
            LMIC.rxtime = now;
 80062f0:	4a18      	ldr	r2, [pc, #96]	@ (8006354 <radio_irq_handler+0x19c>)
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	6053      	str	r3, [r2, #4]
            // read the PDU and inform the MAC that we received something
            LMIC.dataLen = readReg(FSKRegPayloadLength);
 80062f6:	2032      	movs	r0, #50	@ 0x32
 80062f8:	f7ff fb01 	bl	80058fe <readReg>
 80062fc:	4603      	mov	r3, r0
 80062fe:	461a      	mov	r2, r3
 8006300:	4b14      	ldr	r3, [pc, #80]	@ (8006354 <radio_irq_handler+0x19c>)
 8006302:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
            // now read the FIFO
            readBuf(RegFifo, LMIC.frame, LMIC.dataLen);
 8006306:	4b13      	ldr	r3, [pc, #76]	@ (8006354 <radio_irq_handler+0x19c>)
 8006308:	f893 3147 	ldrb.w	r3, [r3, #327]	@ 0x147
 800630c:	461a      	mov	r2, r3
 800630e:	4913      	ldr	r1, [pc, #76]	@ (800635c <radio_irq_handler+0x1a4>)
 8006310:	2000      	movs	r0, #0
 8006312:	f7ff fb3a 	bl	800598a <readBuf>
            // read rx quality parameters
            LMIC.snr  = 0; // determine snr
 8006316:	4b0f      	ldr	r3, [pc, #60]	@ (8006354 <radio_irq_handler+0x19c>)
 8006318:	2200      	movs	r2, #0
 800631a:	735a      	strb	r2, [r3, #13]
            LMIC.rssi = 0; // determine rssi
 800631c:	4b0d      	ldr	r3, [pc, #52]	@ (8006354 <radio_irq_handler+0x19c>)
 800631e:	2200      	movs	r2, #0
 8006320:	731a      	strb	r2, [r3, #12]
 8006322:	e00a      	b.n	800633a <radio_irq_handler+0x182>
        } else if( flags1 & IRQ_FSK1_TIMEOUT_MASK ) {
 8006324:	7afb      	ldrb	r3, [r7, #11]
 8006326:	f003 0304 	and.w	r3, r3, #4
 800632a:	2b00      	cmp	r3, #0
 800632c:	d004      	beq.n	8006338 <radio_irq_handler+0x180>
            // indicate timeout
            LMIC.dataLen = 0;
 800632e:	4b09      	ldr	r3, [pc, #36]	@ (8006354 <radio_irq_handler+0x19c>)
 8006330:	2200      	movs	r2, #0
 8006332:	f883 2147 	strb.w	r2, [r3, #327]	@ 0x147
 8006336:	e000      	b.n	800633a <radio_irq_handler+0x182>
        } else {
            while(1);
 8006338:	e7fe      	b.n	8006338 <radio_irq_handler+0x180>
        }
    }
    // go from stanby to sleep
    opmode(OPMODE_SLEEP);
 800633a:	2000      	movs	r0, #0
 800633c:	f7ff fb50 	bl	80059e0 <opmode>
    // run os job (use preset func ptr)
    os_setCallback(&LMIC.osjob, LMIC.osjob.func);
 8006340:	4b04      	ldr	r3, [pc, #16]	@ (8006354 <radio_irq_handler+0x19c>)
 8006342:	69db      	ldr	r3, [r3, #28]
 8006344:	4619      	mov	r1, r3
 8006346:	4806      	ldr	r0, [pc, #24]	@ (8006360 <radio_irq_handler+0x1a8>)
 8006348:	f7ff fa2a 	bl	80057a0 <os_setCallback>
#endif /* ! CFG_TxContinuousMode */
}
 800634c:	bf00      	nop
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}
 8006354:	20000260 	.word	0x20000260
 8006358:	08010a94 	.word	0x08010a94
 800635c:	200003a8 	.word	0x200003a8
 8006360:	20000274 	.word	0x20000274

08006364 <os_radio>:

void os_radio (u1_t mode) {
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	4603      	mov	r3, r0
 800636c:	71fb      	strb	r3, [r7, #7]
    hal_disableIRQs();
 800636e:	f7fb fe5f 	bl	8002030 <hal_disableIRQs>
    switch (mode) {
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	2b03      	cmp	r3, #3
 8006376:	d81a      	bhi.n	80063ae <os_radio+0x4a>
 8006378:	a201      	add	r2, pc, #4	@ (adr r2, 8006380 <os_radio+0x1c>)
 800637a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800637e:	bf00      	nop
 8006380:	08006391 	.word	0x08006391
 8006384:	08006399 	.word	0x08006399
 8006388:	0800639f 	.word	0x0800639f
 800638c:	080063a7 	.word	0x080063a7
      case RADIO_RST:
        // put radio to sleep
        opmode(OPMODE_SLEEP);
 8006390:	2000      	movs	r0, #0
 8006392:	f7ff fb25 	bl	80059e0 <opmode>
        break;
 8006396:	e00a      	b.n	80063ae <os_radio+0x4a>

      case RADIO_TX:
        // transmit frame now
        starttx(); // buf=LMIC.frame, len=LMIC.dataLen
 8006398:	f7ff fd44 	bl	8005e24 <starttx>
        break;
 800639c:	e007      	b.n	80063ae <os_radio+0x4a>
      
      case RADIO_RX:
        // receive frame now (exactly at rxtime)
        startrx(RXMODE_SINGLE); // buf=LMIC.frame, time=LMIC.rxtime, timeout=LMIC.rxsyms
 800639e:	2000      	movs	r0, #0
 80063a0:	f7ff fe4a 	bl	8006038 <startrx>
        break;
 80063a4:	e003      	b.n	80063ae <os_radio+0x4a>

      case RADIO_RXON:
        // start scanning for beacon now
        startrx(RXMODE_SCAN); // buf=LMIC.frame
 80063a6:	2001      	movs	r0, #1
 80063a8:	f7ff fe46 	bl	8006038 <startrx>
        break;
 80063ac:	bf00      	nop
    }
    hal_enableIRQs();
 80063ae:	f7fb fe4f 	bl	8002050 <hal_enableIRQs>
}
 80063b2:	bf00      	nop
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop

080063bc <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80063c0:	4b1b      	ldr	r3, [pc, #108]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063c2:	4a1c      	ldr	r2, [pc, #112]	@ (8006434 <MX_SPI3_Init+0x78>)
 80063c4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80063c6:	4b1a      	ldr	r3, [pc, #104]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063c8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80063cc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80063ce:	4b18      	ldr	r3, [pc, #96]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063d0:	2200      	movs	r2, #0
 80063d2:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80063d4:	4b16      	ldr	r3, [pc, #88]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063d6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80063da:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80063dc:	4b14      	ldr	r3, [pc, #80]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063de:	2200      	movs	r2, #0
 80063e0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80063e2:	4b13      	ldr	r3, [pc, #76]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80063e8:	4b11      	ldr	r3, [pc, #68]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063ee:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80063f0:	4b0f      	ldr	r3, [pc, #60]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063f2:	2228      	movs	r2, #40	@ 0x28
 80063f4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80063f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80063fc:	4b0c      	ldr	r3, [pc, #48]	@ (8006430 <MX_SPI3_Init+0x74>)
 80063fe:	2200      	movs	r2, #0
 8006400:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006402:	4b0b      	ldr	r3, [pc, #44]	@ (8006430 <MX_SPI3_Init+0x74>)
 8006404:	2200      	movs	r2, #0
 8006406:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006408:	4b09      	ldr	r3, [pc, #36]	@ (8006430 <MX_SPI3_Init+0x74>)
 800640a:	2207      	movs	r2, #7
 800640c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800640e:	4b08      	ldr	r3, [pc, #32]	@ (8006430 <MX_SPI3_Init+0x74>)
 8006410:	2200      	movs	r2, #0
 8006412:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006414:	4b06      	ldr	r3, [pc, #24]	@ (8006430 <MX_SPI3_Init+0x74>)
 8006416:	2208      	movs	r2, #8
 8006418:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800641a:	4805      	ldr	r0, [pc, #20]	@ (8006430 <MX_SPI3_Init+0x74>)
 800641c:	f006 faf8 	bl	800ca10 <HAL_SPI_Init>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006426:	f7ff f95e 	bl	80056e6 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	2000047c 	.word	0x2000047c
 8006434:	40003c00 	.word	0x40003c00

08006438 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	@ 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006440:	f107 0314 	add.w	r3, r7, #20
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
 8006448:	605a      	str	r2, [r3, #4]
 800644a:	609a      	str	r2, [r3, #8]
 800644c:	60da      	str	r2, [r3, #12]
 800644e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a17      	ldr	r2, [pc, #92]	@ (80064b4 <HAL_SPI_MspInit+0x7c>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d127      	bne.n	80064aa <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800645a:	4b17      	ldr	r3, [pc, #92]	@ (80064b8 <HAL_SPI_MspInit+0x80>)
 800645c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800645e:	4a16      	ldr	r2, [pc, #88]	@ (80064b8 <HAL_SPI_MspInit+0x80>)
 8006460:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006464:	6593      	str	r3, [r2, #88]	@ 0x58
 8006466:	4b14      	ldr	r3, [pc, #80]	@ (80064b8 <HAL_SPI_MspInit+0x80>)
 8006468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800646a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006472:	4b11      	ldr	r3, [pc, #68]	@ (80064b8 <HAL_SPI_MspInit+0x80>)
 8006474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006476:	4a10      	ldr	r2, [pc, #64]	@ (80064b8 <HAL_SPI_MspInit+0x80>)
 8006478:	f043 0302 	orr.w	r3, r3, #2
 800647c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800647e:	4b0e      	ldr	r3, [pc, #56]	@ (80064b8 <HAL_SPI_MspInit+0x80>)
 8006480:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006482:	f003 0302 	and.w	r3, r3, #2
 8006486:	60fb      	str	r3, [r7, #12]
 8006488:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800648a:	2338      	movs	r3, #56	@ 0x38
 800648c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800648e:	2302      	movs	r3, #2
 8006490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006496:	2303      	movs	r3, #3
 8006498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800649a:	2306      	movs	r3, #6
 800649c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800649e:	f107 0314 	add.w	r3, r7, #20
 80064a2:	4619      	mov	r1, r3
 80064a4:	4805      	ldr	r0, [pc, #20]	@ (80064bc <HAL_SPI_MspInit+0x84>)
 80064a6:	f004 f885 	bl	800a5b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80064aa:	bf00      	nop
 80064ac:	3728      	adds	r7, #40	@ 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40003c00 	.word	0x40003c00
 80064b8:	40021000 	.word	0x40021000
 80064bc:	48000400 	.word	0x48000400

080064c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80064c6:	4b0f      	ldr	r3, [pc, #60]	@ (8006504 <HAL_MspInit+0x44>)
 80064c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064ca:	4a0e      	ldr	r2, [pc, #56]	@ (8006504 <HAL_MspInit+0x44>)
 80064cc:	f043 0301 	orr.w	r3, r3, #1
 80064d0:	6613      	str	r3, [r2, #96]	@ 0x60
 80064d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006504 <HAL_MspInit+0x44>)
 80064d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80064d6:	f003 0301 	and.w	r3, r3, #1
 80064da:	607b      	str	r3, [r7, #4]
 80064dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80064de:	4b09      	ldr	r3, [pc, #36]	@ (8006504 <HAL_MspInit+0x44>)
 80064e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064e2:	4a08      	ldr	r2, [pc, #32]	@ (8006504 <HAL_MspInit+0x44>)
 80064e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80064e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80064ea:	4b06      	ldr	r3, [pc, #24]	@ (8006504 <HAL_MspInit+0x44>)
 80064ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064f2:	603b      	str	r3, [r7, #0]
 80064f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80064f6:	bf00      	nop
 80064f8:	370c      	adds	r7, #12
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	40021000 	.word	0x40021000

08006508 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006508:	b480      	push	{r7}
 800650a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800650c:	bf00      	nop
 800650e:	e7fd      	b.n	800650c <NMI_Handler+0x4>

08006510 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006510:	b480      	push	{r7}
 8006512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006514:	bf00      	nop
 8006516:	e7fd      	b.n	8006514 <HardFault_Handler+0x4>

08006518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006518:	b480      	push	{r7}
 800651a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800651c:	bf00      	nop
 800651e:	e7fd      	b.n	800651c <MemManage_Handler+0x4>

08006520 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006520:	b480      	push	{r7}
 8006522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006524:	bf00      	nop
 8006526:	e7fd      	b.n	8006524 <BusFault_Handler+0x4>

08006528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006528:	b480      	push	{r7}
 800652a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800652c:	bf00      	nop
 800652e:	e7fd      	b.n	800652c <UsageFault_Handler+0x4>

08006530 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006534:	bf00      	nop
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800653e:	b480      	push	{r7}
 8006540:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006542:	bf00      	nop
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800654c:	b480      	push	{r7}
 800654e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006550:	bf00      	nop
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr

0800655a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800655e:	f002 fdf9 	bl	8009154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800656c:	4802      	ldr	r0, [pc, #8]	@ (8006578 <ADC1_IRQHandler+0x10>)
 800656e:	f003 f929 	bl	80097c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8006572:	bf00      	nop
 8006574:	bd80      	pop	{r7, pc}
 8006576:	bf00      	nop
 8006578:	200000e0 	.word	0x200000e0

0800657c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8006580:	2040      	movs	r0, #64	@ 0x40
 8006582:	f004 f999 	bl	800a8b8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIO1_Pin);
 8006586:	2080      	movs	r0, #128	@ 0x80
 8006588:	f004 f996 	bl	800a8b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800658c:	bf00      	nop
 800658e:	bd80      	pop	{r7, pc}

08006590 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8006594:	4802      	ldr	r0, [pc, #8]	@ (80065a0 <TIM7_IRQHandler+0x10>)
 8006596:	f006 ff0d 	bl	800d3b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200004e4 	.word	0x200004e4

080065a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  return 1;
 80065a8:	2301      	movs	r3, #1
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <_kill>:

int _kill(int pid, int sig)
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
 80065bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80065be:	f007 ffc1 	bl	800e544 <__errno>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2216      	movs	r2, #22
 80065c6:	601a      	str	r2, [r3, #0]
  return -1;
 80065c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80065cc:	4618      	mov	r0, r3
 80065ce:	3708      	adds	r7, #8
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd80      	pop	{r7, pc}

080065d4 <_exit>:

void _exit (int status)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80065dc:	f04f 31ff 	mov.w	r1, #4294967295
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff ffe7 	bl	80065b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80065e6:	bf00      	nop
 80065e8:	e7fd      	b.n	80065e6 <_exit+0x12>

080065ea <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065f6:	2300      	movs	r3, #0
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	e00a      	b.n	8006612 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80065fc:	f3af 8000 	nop.w
 8006600:	4601      	mov	r1, r0
 8006602:	68bb      	ldr	r3, [r7, #8]
 8006604:	1c5a      	adds	r2, r3, #1
 8006606:	60ba      	str	r2, [r7, #8]
 8006608:	b2ca      	uxtb	r2, r1
 800660a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	3301      	adds	r3, #1
 8006610:	617b      	str	r3, [r7, #20]
 8006612:	697a      	ldr	r2, [r7, #20]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	429a      	cmp	r2, r3
 8006618:	dbf0      	blt.n	80065fc <_read+0x12>
  }

  return len;
 800661a:	687b      	ldr	r3, [r7, #4]
}
 800661c:	4618      	mov	r0, r3
 800661e:	3718      	adds	r7, #24
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b086      	sub	sp, #24
 8006628:	af00      	add	r7, sp, #0
 800662a:	60f8      	str	r0, [r7, #12]
 800662c:	60b9      	str	r1, [r7, #8]
 800662e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006630:	2300      	movs	r3, #0
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e009      	b.n	800664a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	60ba      	str	r2, [r7, #8]
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	3301      	adds	r3, #1
 8006648:	617b      	str	r3, [r7, #20]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	429a      	cmp	r2, r3
 8006650:	dbf1      	blt.n	8006636 <_write+0x12>
  }
  return len;
 8006652:	687b      	ldr	r3, [r7, #4]
}
 8006654:	4618      	mov	r0, r3
 8006656:	3718      	adds	r7, #24
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <_close>:

int _close(int file)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006664:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006668:	4618      	mov	r0, r3
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006684:	605a      	str	r2, [r3, #4]
  return 0;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <_isatty>:

int _isatty(int file)
{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800669c:	2301      	movs	r3, #1
}
 800669e:	4618      	mov	r0, r3
 80066a0:	370c      	adds	r7, #12
 80066a2:	46bd      	mov	sp, r7
 80066a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a8:	4770      	bx	lr

080066aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80066aa:	b480      	push	{r7}
 80066ac:	b085      	sub	sp, #20
 80066ae:	af00      	add	r7, sp, #0
 80066b0:	60f8      	str	r0, [r7, #12]
 80066b2:	60b9      	str	r1, [r7, #8]
 80066b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80066cc:	4a14      	ldr	r2, [pc, #80]	@ (8006720 <_sbrk+0x5c>)
 80066ce:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <_sbrk+0x60>)
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066d8:	4b13      	ldr	r3, [pc, #76]	@ (8006728 <_sbrk+0x64>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066e0:	4b11      	ldr	r3, [pc, #68]	@ (8006728 <_sbrk+0x64>)
 80066e2:	4a12      	ldr	r2, [pc, #72]	@ (800672c <_sbrk+0x68>)
 80066e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066e6:	4b10      	ldr	r3, [pc, #64]	@ (8006728 <_sbrk+0x64>)
 80066e8:	681a      	ldr	r2, [r3, #0]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4413      	add	r3, r2
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d207      	bcs.n	8006704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066f4:	f007 ff26 	bl	800e544 <__errno>
 80066f8:	4603      	mov	r3, r0
 80066fa:	220c      	movs	r2, #12
 80066fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	e009      	b.n	8006718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006704:	4b08      	ldr	r3, [pc, #32]	@ (8006728 <_sbrk+0x64>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800670a:	4b07      	ldr	r3, [pc, #28]	@ (8006728 <_sbrk+0x64>)
 800670c:	681a      	ldr	r2, [r3, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4413      	add	r3, r2
 8006712:	4a05      	ldr	r2, [pc, #20]	@ (8006728 <_sbrk+0x64>)
 8006714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3718      	adds	r7, #24
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20010000 	.word	0x20010000
 8006724:	00000400 	.word	0x00000400
 8006728:	200004e0 	.word	0x200004e0
 800672c:	200007e8 	.word	0x200007e8

08006730 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8006730:	b480      	push	{r7}
 8006732:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8006734:	4b06      	ldr	r3, [pc, #24]	@ (8006750 <SystemInit+0x20>)
 8006736:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800673a:	4a05      	ldr	r2, [pc, #20]	@ (8006750 <SystemInit+0x20>)
 800673c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006740:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000ed00 	.word	0xe000ed00

08006754 <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800675a:	1d3b      	adds	r3, r7, #4
 800675c:	2200      	movs	r2, #0
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	605a      	str	r2, [r3, #4]
 8006762:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006764:	4b15      	ldr	r3, [pc, #84]	@ (80067bc <MX_TIM7_Init+0x68>)
 8006766:	4a16      	ldr	r2, [pc, #88]	@ (80067c0 <MX_TIM7_Init+0x6c>)
 8006768:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 2500-1;
 800676a:	4b14      	ldr	r3, [pc, #80]	@ (80067bc <MX_TIM7_Init+0x68>)
 800676c:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8006770:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006772:	4b12      	ldr	r3, [pc, #72]	@ (80067bc <MX_TIM7_Init+0x68>)
 8006774:	2200      	movs	r2, #0
 8006776:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8006778:	4b10      	ldr	r3, [pc, #64]	@ (80067bc <MX_TIM7_Init+0x68>)
 800677a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800677e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006780:	4b0e      	ldr	r3, [pc, #56]	@ (80067bc <MX_TIM7_Init+0x68>)
 8006782:	2200      	movs	r2, #0
 8006784:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006786:	480d      	ldr	r0, [pc, #52]	@ (80067bc <MX_TIM7_Init+0x68>)
 8006788:	f006 fd68 	bl	800d25c <HAL_TIM_Base_Init>
 800678c:	4603      	mov	r3, r0
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8006792:	f7fe ffa8 	bl	80056e6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800679a:	2300      	movs	r3, #0
 800679c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800679e:	1d3b      	adds	r3, r7, #4
 80067a0:	4619      	mov	r1, r3
 80067a2:	4806      	ldr	r0, [pc, #24]	@ (80067bc <MX_TIM7_Init+0x68>)
 80067a4:	f006 ffa6 	bl	800d6f4 <HAL_TIMEx_MasterConfigSynchronization>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 80067ae:	f7fe ff9a 	bl	80056e6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200004e4 	.word	0x200004e4
 80067c0:	40001400 	.word	0x40001400

080067c4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b084      	sub	sp, #16
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006808 <HAL_TIM_Base_MspInit+0x44>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d113      	bne.n	80067fe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <HAL_TIM_Base_MspInit+0x48>)
 80067d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067da:	4a0c      	ldr	r2, [pc, #48]	@ (800680c <HAL_TIM_Base_MspInit+0x48>)
 80067dc:	f043 0320 	orr.w	r3, r3, #32
 80067e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80067e2:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <HAL_TIM_Base_MspInit+0x48>)
 80067e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80067e6:	f003 0320 	and.w	r3, r3, #32
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80067ee:	2200      	movs	r2, #0
 80067f0:	2100      	movs	r1, #0
 80067f2:	2037      	movs	r0, #55	@ 0x37
 80067f4:	f003 fea7 	bl	800a546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80067f8:	2037      	movs	r0, #55	@ 0x37
 80067fa:	f003 fec0 	bl	800a57e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 80067fe:	bf00      	nop
 8006800:	3710      	adds	r7, #16
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	40001400 	.word	0x40001400
 800680c:	40021000 	.word	0x40021000

08006810 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006814:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006816:	4a15      	ldr	r2, [pc, #84]	@ (800686c <MX_USART2_UART_Init+0x5c>)
 8006818:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800681a:	4b13      	ldr	r3, [pc, #76]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 800681c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8006820:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8006822:	4b11      	ldr	r3, [pc, #68]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006824:	2200      	movs	r2, #0
 8006826:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006828:	4b0f      	ldr	r3, [pc, #60]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 800682a:	2200      	movs	r2, #0
 800682c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800682e:	4b0e      	ldr	r3, [pc, #56]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006830:	2200      	movs	r2, #0
 8006832:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006834:	4b0c      	ldr	r3, [pc, #48]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006836:	220c      	movs	r2, #12
 8006838:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800683a:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 800683c:	2200      	movs	r2, #0
 800683e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8006840:	4b09      	ldr	r3, [pc, #36]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006846:	4b08      	ldr	r3, [pc, #32]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006848:	2200      	movs	r2, #0
 800684a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800684c:	4b06      	ldr	r3, [pc, #24]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 800684e:	2200      	movs	r2, #0
 8006850:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006852:	4805      	ldr	r0, [pc, #20]	@ (8006868 <MX_USART2_UART_Init+0x58>)
 8006854:	f006 ffd2 	bl	800d7fc <HAL_UART_Init>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800685e:	f7fe ff42 	bl	80056e6 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8006862:	bf00      	nop
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20000530 	.word	0x20000530
 800686c:	40004400 	.word	0x40004400

08006870 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b09e      	sub	sp, #120	@ 0x78
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006878:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006888:	f107 0310 	add.w	r3, r7, #16
 800688c:	2254      	movs	r2, #84	@ 0x54
 800688e:	2100      	movs	r1, #0
 8006890:	4618      	mov	r0, r3
 8006892:	f007 fe08 	bl	800e4a6 <memset>
  if(uartHandle->Instance==USART2)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a1f      	ldr	r2, [pc, #124]	@ (8006918 <HAL_UART_MspInit+0xa8>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d136      	bne.n	800690e <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80068a0:	2302      	movs	r3, #2
 80068a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80068a4:	2300      	movs	r3, #0
 80068a6:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80068a8:	f107 0310 	add.w	r3, r7, #16
 80068ac:	4618      	mov	r0, r3
 80068ae:	f005 fdc7 	bl	800c440 <HAL_RCCEx_PeriphCLKConfig>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80068b8:	f7fe ff15 	bl	80056e6 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80068bc:	4b17      	ldr	r3, [pc, #92]	@ (800691c <HAL_UART_MspInit+0xac>)
 80068be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068c0:	4a16      	ldr	r2, [pc, #88]	@ (800691c <HAL_UART_MspInit+0xac>)
 80068c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80068c8:	4b14      	ldr	r3, [pc, #80]	@ (800691c <HAL_UART_MspInit+0xac>)
 80068ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80068cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068d0:	60fb      	str	r3, [r7, #12]
 80068d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068d4:	4b11      	ldr	r3, [pc, #68]	@ (800691c <HAL_UART_MspInit+0xac>)
 80068d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068d8:	4a10      	ldr	r2, [pc, #64]	@ (800691c <HAL_UART_MspInit+0xac>)
 80068da:	f043 0301 	orr.w	r3, r3, #1
 80068de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80068e0:	4b0e      	ldr	r3, [pc, #56]	@ (800691c <HAL_UART_MspInit+0xac>)
 80068e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	60bb      	str	r3, [r7, #8]
 80068ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80068ec:	230c      	movs	r3, #12
 80068ee:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80068f0:	2302      	movs	r3, #2
 80068f2:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068f4:	2300      	movs	r3, #0
 80068f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80068f8:	2303      	movs	r3, #3
 80068fa:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80068fc:	2307      	movs	r3, #7
 80068fe:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006900:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8006904:	4619      	mov	r1, r3
 8006906:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800690a:	f003 fe53 	bl	800a5b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800690e:	bf00      	nop
 8006910:	3778      	adds	r7, #120	@ 0x78
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}
 8006916:	bf00      	nop
 8006918:	40004400 	.word	0x40004400
 800691c:	40021000 	.word	0x40021000

08006920 <bme68x_init>:
/* @brief This API reads the chip-id of the sensor which is the first step to
* verify the sensor and also calibrates the sensor
* As this API is the entry point, call this API before using other APIs.
*/
int8_t bme68x_init(struct bme68x_dev *dev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
    int8_t rslt;

    rslt = bme68x_soft_reset(dev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f901 	bl	8006b30 <bme68x_soft_reset>
 800692e:	4603      	mov	r3, r0
 8006930:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8006932:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d120      	bne.n	800697c <bme68x_init+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_CHIP_ID, &dev->chip_id, 1, dev);
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	20d0      	movs	r0, #208	@ 0xd0
 8006942:	f000 f8b1 	bl	8006aa8 <bme68x_get_regs>
 8006946:	4603      	mov	r3, r0
 8006948:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 800694a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d114      	bne.n	800697c <bme68x_init+0x5c>
        {
            if (dev->chip_id == BME68X_CHIP_ID)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	2b61      	cmp	r3, #97	@ 0x61
 8006958:	d10e      	bne.n	8006978 <bme68x_init+0x58>
            {
                /* Read Variant ID */
                rslt = read_variant_id(dev);
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f002 f84c 	bl	80089f8 <read_variant_id>
 8006960:	4603      	mov	r3, r0
 8006962:	73fb      	strb	r3, [r7, #15]

                if (rslt == BME68X_OK)
 8006964:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d107      	bne.n	800697c <bme68x_init+0x5c>
                {
                    /* Get the Calibration data */
                    rslt = get_calib_data(dev);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 ff3f 	bl	80087f0 <get_calib_data>
 8006972:	4603      	mov	r3, r0
 8006974:	73fb      	strb	r3, [r7, #15]
 8006976:	e001      	b.n	800697c <bme68x_init+0x5c>
                }
            }
            else
            {
                rslt = BME68X_E_DEV_NOT_FOUND;
 8006978:	23fd      	movs	r3, #253	@ 0xfd
 800697a:	73fb      	strb	r3, [r7, #15]
            }
        }
    }

    return rslt;
 800697c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006980:	4618      	mov	r0, r3
 8006982:	3710      	adds	r7, #16
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <bme68x_set_regs>:

/*
 * @brief This API writes the given data to the register address of the sensor
 */
int8_t bme68x_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8006988:	b5b0      	push	{r4, r5, r7, lr}
 800698a:	b08a      	sub	sp, #40	@ 0x28
 800698c:	af00      	add	r7, sp, #0
 800698e:	60f8      	str	r0, [r7, #12]
 8006990:	60b9      	str	r1, [r7, #8]
 8006992:	607a      	str	r2, [r7, #4]
 8006994:	603b      	str	r3, [r7, #0]
    int8_t rslt;

    /* Length of the temporary buffer is 2*(length of register)*/
    uint8_t tmp_buff[BME68X_LEN_INTERLEAVE_BUFF] = { 0 };
 8006996:	2300      	movs	r3, #0
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	f107 0314 	add.w	r3, r7, #20
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	605a      	str	r2, [r3, #4]
 80069a4:	609a      	str	r2, [r3, #8]
 80069a6:	60da      	str	r2, [r3, #12]
    uint16_t index;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80069a8:	6838      	ldr	r0, [r7, #0]
 80069aa:	f001 fcfb 	bl	80083a4 <null_ptr_check>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if ((rslt == BME68X_OK) && reg_addr && reg_data)
 80069b4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d16c      	bne.n	8006a96 <bme68x_set_regs+0x10e>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d069      	beq.n	8006a96 <bme68x_set_regs+0x10e>
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d066      	beq.n	8006a96 <bme68x_set_regs+0x10e>
    {
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d05d      	beq.n	8006a8a <bme68x_set_regs+0x102>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b0a      	cmp	r3, #10
 80069d2:	d85a      	bhi.n	8006a8a <bme68x_set_regs+0x102>
        {
            /* Interleave the 2 arrays */
            for (index = 0; index < len; index++)
 80069d4:	2300      	movs	r3, #0
 80069d6:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80069d8:	e034      	b.n	8006a44 <bme68x_set_regs+0xbc>
            {
                if (dev->intf == BME68X_SPI_INTF)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	7b1b      	ldrb	r3, [r3, #12]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d118      	bne.n	8006a14 <bme68x_set_regs+0x8c>
                {
                    /* Set the memory page */
                    rslt = set_mem_page(reg_addr[index], dev);
 80069e2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fc18 	bl	8008222 <set_mem_page>
 80069f2:	4603      	mov	r3, r0
 80069f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    tmp_buff[(2 * index)] = reg_addr[index] & BME68X_SPI_WR_MSK;
 80069f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80069fa:	68fa      	ldr	r2, [r7, #12]
 80069fc:	4413      	add	r3, r2
 80069fe:	781a      	ldrb	r2, [r3, #0]
 8006a00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a02:	005b      	lsls	r3, r3, #1
 8006a04:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006a08:	b2d2      	uxtb	r2, r2
 8006a0a:	3328      	adds	r3, #40	@ 0x28
 8006a0c:	443b      	add	r3, r7
 8006a0e:	f803 2c18 	strb.w	r2, [r3, #-24]
 8006a12:	e009      	b.n	8006a28 <bme68x_set_regs+0xa0>
                }
                else
                {
                    tmp_buff[(2 * index)] = reg_addr[index];
 8006a14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	441a      	add	r2, r3
 8006a1a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a1c:	005b      	lsls	r3, r3, #1
 8006a1e:	7812      	ldrb	r2, [r2, #0]
 8006a20:	3328      	adds	r3, #40	@ 0x28
 8006a22:	443b      	add	r3, r7
 8006a24:	f803 2c18 	strb.w	r2, [r3, #-24]
                }

                tmp_buff[(2 * index) + 1] = reg_data[index];
 8006a28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	441a      	add	r2, r3
 8006a2e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	3301      	adds	r3, #1
 8006a34:	7812      	ldrb	r2, [r2, #0]
 8006a36:	3328      	adds	r3, #40	@ 0x28
 8006a38:	443b      	add	r3, r7
 8006a3a:	f803 2c18 	strb.w	r2, [r3, #-24]
            for (index = 0; index < len; index++)
 8006a3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a40:	3301      	adds	r3, #1
 8006a42:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006a44:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006a46:	687a      	ldr	r2, [r7, #4]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d8c6      	bhi.n	80069da <bme68x_set_regs+0x52>
            }

            /* Write the interleaved array */
            if (rslt == BME68X_OK)
 8006a4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d11e      	bne.n	8006a92 <bme68x_set_regs+0x10a>
            {
                dev->intf_rslt = dev->write(tmp_buff[0], &tmp_buff[1], (2 * len) - 1, dev->intf_ptr);
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8006a58:	7c38      	ldrb	r0, [r7, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	1e5a      	subs	r2, r3, #1
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	685d      	ldr	r5, [r3, #4]
 8006a64:	f107 0310 	add.w	r3, r7, #16
 8006a68:	1c59      	adds	r1, r3, #1
 8006a6a:	462b      	mov	r3, r5
 8006a6c:	47a0      	blx	r4
 8006a6e:	4603      	mov	r3, r0
 8006a70:	461a      	mov	r2, r3
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <bme68x_set_regs+0x10a>
                {
                    rslt = BME68X_E_COM_FAIL;
 8006a82:	23fe      	movs	r3, #254	@ 0xfe
 8006a84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if (rslt == BME68X_OK)
 8006a88:	e003      	b.n	8006a92 <bme68x_set_regs+0x10a>
                }
            }
        }
        else
        {
            rslt = BME68X_E_INVALID_LENGTH;
 8006a8a:	23fc      	movs	r3, #252	@ 0xfc
 8006a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006a90:	e004      	b.n	8006a9c <bme68x_set_regs+0x114>
            if (rslt == BME68X_OK)
 8006a92:	bf00      	nop
        if ((len > 0) && (len <= (BME68X_LEN_INTERLEAVE_BUFF / 2)))
 8006a94:	e002      	b.n	8006a9c <bme68x_set_regs+0x114>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006a96:	23ff      	movs	r3, #255	@ 0xff
 8006a98:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    return rslt;
 8006a9c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	3728      	adds	r7, #40	@ 0x28
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	bdb0      	pop	{r4, r5, r7, pc}

08006aa8 <bme68x_get_regs>:

/*
 * @brief This API reads the data from the given register address of sensor.
 */
int8_t bme68x_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint32_t len, struct bme68x_dev *dev)
{
 8006aa8:	b590      	push	{r4, r7, lr}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
 8006ab2:	603b      	str	r3, [r7, #0]
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006ab8:	6838      	ldr	r0, [r7, #0]
 8006aba:	f001 fc73 	bl	80083a4 <null_ptr_check>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	75fb      	strb	r3, [r7, #23]
    if ((rslt == BME68X_OK) && reg_data)
 8006ac2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d12a      	bne.n	8006b20 <bme68x_get_regs+0x78>
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d027      	beq.n	8006b20 <bme68x_get_regs+0x78>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	7b1b      	ldrb	r3, [r3, #12]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d10e      	bne.n	8006af6 <bme68x_get_regs+0x4e>
        {
            /* Set the memory page */
            rslt = set_mem_page(reg_addr, dev);
 8006ad8:	7bfb      	ldrb	r3, [r7, #15]
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	4618      	mov	r0, r3
 8006ade:	f001 fba0 	bl	8008222 <set_mem_page>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	75fb      	strb	r3, [r7, #23]
            if (rslt == BME68X_OK)
 8006ae6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d103      	bne.n	8006af6 <bme68x_get_regs+0x4e>
            {
                reg_addr = reg_addr | BME68X_SPI_RD_MSK;
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006af4:	73fb      	strb	r3, [r7, #15]
            }
        }

        dev->intf_rslt = dev->read(reg_addr, reg_data, len, dev->intf_ptr);
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	7bf8      	ldrb	r0, [r7, #15]
 8006b00:	687a      	ldr	r2, [r7, #4]
 8006b02:	68b9      	ldr	r1, [r7, #8]
 8006b04:	47a0      	blx	r4
 8006b06:	4603      	mov	r3, r0
 8006b08:	461a      	mov	r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d004      	beq.n	8006b24 <bme68x_get_regs+0x7c>
        {
            rslt = BME68X_E_COM_FAIL;
 8006b1a:	23fe      	movs	r3, #254	@ 0xfe
 8006b1c:	75fb      	strb	r3, [r7, #23]
        if (dev->intf_rslt != 0)
 8006b1e:	e001      	b.n	8006b24 <bme68x_get_regs+0x7c>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006b20:	23ff      	movs	r3, #255	@ 0xff
 8006b22:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8006b24:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	371c      	adds	r7, #28
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd90      	pop	{r4, r7, pc}

08006b30 <bme68x_soft_reset>:

/*
 * @brief This API soft-resets the sensor.
 */
int8_t bme68x_soft_reset(struct bme68x_dev *dev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b084      	sub	sp, #16
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_addr = BME68X_REG_SOFT_RESET;
 8006b38:	23e0      	movs	r3, #224	@ 0xe0
 8006b3a:	73bb      	strb	r3, [r7, #14]

    /* 0xb6 is the soft reset command */
    uint8_t soft_rst_cmd = BME68X_SOFT_RESET_CMD;
 8006b3c:	23b6      	movs	r3, #182	@ 0xb6
 8006b3e:	737b      	strb	r3, [r7, #13]

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 8006b40:	6878      	ldr	r0, [r7, #4]
 8006b42:	f001 fc2f 	bl	80083a4 <null_ptr_check>
 8006b46:	4603      	mov	r3, r0
 8006b48:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8006b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d12b      	bne.n	8006baa <bme68x_soft_reset+0x7a>
    {
        if (dev->intf == BME68X_SPI_INTF)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	7b1b      	ldrb	r3, [r3, #12]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d104      	bne.n	8006b64 <bme68x_soft_reset+0x34>
        {
            rslt = get_mem_page(dev);
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f001 fbc6 	bl	80082ec <get_mem_page>
 8006b60:	4603      	mov	r3, r0
 8006b62:	73fb      	strb	r3, [r7, #15]
        }

        /* Reset the device */
        if (rslt == BME68X_OK)
 8006b64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d11e      	bne.n	8006baa <bme68x_soft_reset+0x7a>
        {
            rslt = bme68x_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 8006b6c:	f107 010d 	add.w	r1, r7, #13
 8006b70:	f107 000e 	add.w	r0, r7, #14
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f7ff ff06 	bl	8006988 <bme68x_set_regs>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73fb      	strb	r3, [r7, #15]

            /* Wait for 5ms */
            dev->delay_us(BME68X_PERIOD_RESET, dev->intf_ptr);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	6852      	ldr	r2, [r2, #4]
 8006b88:	4611      	mov	r1, r2
 8006b8a:	f242 7010 	movw	r0, #10000	@ 0x2710
 8006b8e:	4798      	blx	r3
            if (rslt == BME68X_OK)
 8006b90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d108      	bne.n	8006baa <bme68x_soft_reset+0x7a>
            {
                /* After reset get the memory page */
                if (dev->intf == BME68X_SPI_INTF)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	7b1b      	ldrb	r3, [r3, #12]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d104      	bne.n	8006baa <bme68x_soft_reset+0x7a>
                {
                    rslt = get_mem_page(dev);
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f001 fba3 	bl	80082ec <get_mem_page>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 8006baa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
	...

08006bb8 <bme68x_set_conf>:

/*
 * @brief This API is used to set the oversampling, filter and odr configuration
 */
int8_t bme68x_set_conf(struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b088      	sub	sp, #32
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t odr20 = 0, odr3 = 1;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	77bb      	strb	r3, [r7, #30]
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	777b      	strb	r3, [r7, #29]
    uint8_t current_op_mode;

    /* Register data starting from BME68X_REG_CTRL_GAS_1(0x71) up to BME68X_REG_CONFIG(0x75) */
    uint8_t reg_array[BME68X_LEN_CONFIG] = { 0x71, 0x72, 0x73, 0x74, 0x75 };
 8006bca:	4a7c      	ldr	r2, [pc, #496]	@ (8006dbc <bme68x_set_conf+0x204>)
 8006bcc:	f107 0314 	add.w	r3, r7, #20
 8006bd0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006bd4:	6018      	str	r0, [r3, #0]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	7019      	strb	r1, [r3, #0]
    uint8_t data_array[BME68X_LEN_CONFIG] = { 0 };
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60fb      	str	r3, [r7, #12]
 8006bde:	2300      	movs	r3, #0
 8006be0:	743b      	strb	r3, [r7, #16]

    rslt = bme68x_get_op_mode(&current_op_mode, dev);
 8006be2:	f107 031c 	add.w	r3, r7, #28
 8006be6:	6839      	ldr	r1, [r7, #0]
 8006be8:	4618      	mov	r0, r3
 8006bea:	f000 f94a 	bl	8006e82 <bme68x_get_op_mode>
 8006bee:	4603      	mov	r3, r0
 8006bf0:	77fb      	strb	r3, [r7, #31]
    if (rslt == BME68X_OK)
 8006bf2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d105      	bne.n	8006c06 <bme68x_set_conf+0x4e>
    {
        /* Configure only in the sleep mode */
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 8006bfa:	6839      	ldr	r1, [r7, #0]
 8006bfc:	2000      	movs	r0, #0
 8006bfe:	f000 f8df 	bl	8006dc0 <bme68x_set_op_mode>
 8006c02:	4603      	mov	r3, r0
 8006c04:	77fb      	strb	r3, [r7, #31]
    }

    if (conf == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d102      	bne.n	8006c12 <bme68x_set_conf+0x5a>
    {
        rslt = BME68X_E_NULL_PTR;
 8006c0c:	23ff      	movs	r3, #255	@ 0xff
 8006c0e:	77fb      	strb	r3, [r7, #31]
 8006c10:	e0b2      	b.n	8006d78 <bme68x_set_conf+0x1c0>
    }
    else if (rslt == BME68X_OK)
 8006c12:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f040 80ae 	bne.w	8006d78 <bme68x_set_conf+0x1c0>
    {
        /* Read the whole configuration and write it back once later */
        rslt = bme68x_get_regs(reg_array[0], data_array, BME68X_LEN_CONFIG, dev);
 8006c1c:	7d38      	ldrb	r0, [r7, #20]
 8006c1e:	f107 010c 	add.w	r1, r7, #12
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	2205      	movs	r2, #5
 8006c26:	f7ff ff3f 	bl	8006aa8 <bme68x_get_regs>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	77fb      	strb	r3, [r7, #31]
        dev->info_msg = BME68X_OK;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (rslt == BME68X_OK)
 8006c36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d108      	bne.n	8006c50 <bme68x_set_conf+0x98>
        {
            rslt = boundary_check(&conf->filter, BME68X_FILTER_SIZE_127, dev);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	3303      	adds	r3, #3
 8006c42:	683a      	ldr	r2, [r7, #0]
 8006c44:	2107      	movs	r1, #7
 8006c46:	4618      	mov	r0, r3
 8006c48:	f001 fb7f 	bl	800834a <boundary_check>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c50:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d108      	bne.n	8006c6a <bme68x_set_conf+0xb2>
        {
            rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	3301      	adds	r3, #1
 8006c5c:	683a      	ldr	r2, [r7, #0]
 8006c5e:	2105      	movs	r1, #5
 8006c60:	4618      	mov	r0, r3
 8006c62:	f001 fb72 	bl	800834a <boundary_check>
 8006c66:	4603      	mov	r3, r0
 8006c68:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d108      	bne.n	8006c84 <bme68x_set_conf+0xcc>
        {
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	3302      	adds	r3, #2
 8006c76:	683a      	ldr	r2, [r7, #0]
 8006c78:	2105      	movs	r1, #5
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f001 fb65 	bl	800834a <boundary_check>
 8006c80:	4603      	mov	r3, r0
 8006c82:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d107      	bne.n	8006c9c <bme68x_set_conf+0xe4>
        {
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	683a      	ldr	r2, [r7, #0]
 8006c90:	2105      	movs	r1, #5
 8006c92:	4618      	mov	r0, r3
 8006c94:	f001 fb59 	bl	800834a <boundary_check>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006c9c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d108      	bne.n	8006cb6 <bme68x_set_conf+0xfe>
        {
            rslt = boundary_check(&conf->odr, BME68X_ODR_NONE, dev);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	3304      	adds	r3, #4
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	2108      	movs	r1, #8
 8006cac:	4618      	mov	r0, r3
 8006cae:	f001 fb4c 	bl	800834a <boundary_check>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 8006cb6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d15c      	bne.n	8006d78 <bme68x_set_conf+0x1c0>
        {
            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_FILTER, conf->filter);
 8006cbe:	7c3b      	ldrb	r3, [r7, #16]
 8006cc0:	b25b      	sxtb	r3, r3
 8006cc2:	f023 031c 	bic.w	r3, r3, #28
 8006cc6:	b25a      	sxtb	r2, r3
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	78db      	ldrb	r3, [r3, #3]
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	b25b      	sxtb	r3, r3
 8006cd0:	f003 031c 	and.w	r3, r3, #28
 8006cd4:	b25b      	sxtb	r3, r3
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	b25b      	sxtb	r3, r3
 8006cda:	b2db      	uxtb	r3, r3
 8006cdc:	743b      	strb	r3, [r7, #16]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OST, conf->os_temp);
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	b25b      	sxtb	r3, r3
 8006ce2:	f003 031f 	and.w	r3, r3, #31
 8006ce6:	b25a      	sxtb	r2, r3
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	785b      	ldrb	r3, [r3, #1]
 8006cec:	015b      	lsls	r3, r3, #5
 8006cee:	b25b      	sxtb	r3, r3
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	b25b      	sxtb	r3, r3
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	73fb      	strb	r3, [r7, #15]
            data_array[3] = BME68X_SET_BITS(data_array[3], BME68X_OSP, conf->os_pres);
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	b25b      	sxtb	r3, r3
 8006cfc:	f023 031c 	bic.w	r3, r3, #28
 8006d00:	b25a      	sxtb	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	789b      	ldrb	r3, [r3, #2]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	b25b      	sxtb	r3, r3
 8006d0a:	f003 031c 	and.w	r3, r3, #28
 8006d0e:	b25b      	sxtb	r3, r3
 8006d10:	4313      	orrs	r3, r2
 8006d12:	b25b      	sxtb	r3, r3
 8006d14:	b2db      	uxtb	r3, r3
 8006d16:	73fb      	strb	r3, [r7, #15]
            data_array[1] = BME68X_SET_BITS_POS_0(data_array[1], BME68X_OSH, conf->os_hum);
 8006d18:	7b7b      	ldrb	r3, [r7, #13]
 8006d1a:	b25b      	sxtb	r3, r3
 8006d1c:	f023 0307 	bic.w	r3, r3, #7
 8006d20:	b25a      	sxtb	r2, r3
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	781b      	ldrb	r3, [r3, #0]
 8006d26:	b25b      	sxtb	r3, r3
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	b25b      	sxtb	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b25b      	sxtb	r3, r3
 8006d32:	b2db      	uxtb	r3, r3
 8006d34:	737b      	strb	r3, [r7, #13]
            if (conf->odr != BME68X_ODR_NONE)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	791b      	ldrb	r3, [r3, #4]
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d004      	beq.n	8006d48 <bme68x_set_conf+0x190>
            {
                odr20 = conf->odr;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	791b      	ldrb	r3, [r3, #4]
 8006d42:	77bb      	strb	r3, [r7, #30]
                odr3 = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	777b      	strb	r3, [r7, #29]
            }

            data_array[4] = BME68X_SET_BITS(data_array[4], BME68X_ODR20, odr20);
 8006d48:	7c3b      	ldrb	r3, [r7, #16]
 8006d4a:	b25b      	sxtb	r3, r3
 8006d4c:	f003 031f 	and.w	r3, r3, #31
 8006d50:	b25a      	sxtb	r2, r3
 8006d52:	7fbb      	ldrb	r3, [r7, #30]
 8006d54:	015b      	lsls	r3, r3, #5
 8006d56:	b25b      	sxtb	r3, r3
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	b25b      	sxtb	r3, r3
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	743b      	strb	r3, [r7, #16]
            data_array[0] = BME68X_SET_BITS(data_array[0], BME68X_ODR3, odr3);
 8006d60:	7b3b      	ldrb	r3, [r7, #12]
 8006d62:	b25b      	sxtb	r3, r3
 8006d64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d68:	b25a      	sxtb	r2, r3
 8006d6a:	7f7b      	ldrb	r3, [r7, #29]
 8006d6c:	01db      	lsls	r3, r3, #7
 8006d6e:	b25b      	sxtb	r3, r3
 8006d70:	4313      	orrs	r3, r2
 8006d72:	b25b      	sxtb	r3, r3
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	733b      	strb	r3, [r7, #12]
        }
    }

    if (rslt == BME68X_OK)
 8006d78:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d109      	bne.n	8006d94 <bme68x_set_conf+0x1dc>
    {
        rslt = bme68x_set_regs(reg_array, data_array, BME68X_LEN_CONFIG, dev);
 8006d80:	f107 010c 	add.w	r1, r7, #12
 8006d84:	f107 0014 	add.w	r0, r7, #20
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	f7ff fdfc 	bl	8006988 <bme68x_set_regs>
 8006d90:	4603      	mov	r3, r0
 8006d92:	77fb      	strb	r3, [r7, #31]
    }

    if ((current_op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006d94:	7f3b      	ldrb	r3, [r7, #28]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d00a      	beq.n	8006db0 <bme68x_set_conf+0x1f8>
 8006d9a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d106      	bne.n	8006db0 <bme68x_set_conf+0x1f8>
    {
        rslt = bme68x_set_op_mode(current_op_mode, dev);
 8006da2:	7f3b      	ldrb	r3, [r7, #28]
 8006da4:	6839      	ldr	r1, [r7, #0]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f000 f80a 	bl	8006dc0 <bme68x_set_op_mode>
 8006dac:	4603      	mov	r3, r0
 8006dae:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 8006db0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3720      	adds	r7, #32
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	0800f800 	.word	0x0800f800

08006dc0 <bme68x_set_op_mode>:

/*
 * @brief This API is used to set the operation mode of the sensor
 */
int8_t bme68x_set_op_mode(const uint8_t op_mode, struct bme68x_dev *dev)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	6039      	str	r1, [r7, #0]
 8006dca:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t tmp_pow_mode;
    uint8_t pow_mode = 0;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	73bb      	strb	r3, [r7, #14]
    uint8_t reg_addr = BME68X_REG_CTRL_MEAS;
 8006dd0:	2374      	movs	r3, #116	@ 0x74
 8006dd2:	733b      	strb	r3, [r7, #12]

    /* Call until in sleep */
    do
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &tmp_pow_mode, 1, dev);
 8006dd4:	f107 010d 	add.w	r1, r7, #13
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	2074      	movs	r0, #116	@ 0x74
 8006dde:	f7ff fe63 	bl	8006aa8 <bme68x_get_regs>
 8006de2:	4603      	mov	r3, r0
 8006de4:	73fb      	strb	r3, [r7, #15]
        if (rslt == BME68X_OK)
 8006de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d11d      	bne.n	8006e2a <bme68x_set_op_mode+0x6a>
        {
            /* Put to sleep before changing mode */
            pow_mode = (tmp_pow_mode & BME68X_MODE_MSK);
 8006dee:	7b7b      	ldrb	r3, [r7, #13]
 8006df0:	f003 0303 	and.w	r3, r3, #3
 8006df4:	73bb      	strb	r3, [r7, #14]
            if (pow_mode != BME68X_SLEEP_MODE)
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d016      	beq.n	8006e2a <bme68x_set_op_mode+0x6a>
            {
                tmp_pow_mode &= ~BME68X_MODE_MSK; /* Set to sleep */
 8006dfc:	7b7b      	ldrb	r3, [r7, #13]
 8006dfe:	f023 0303 	bic.w	r3, r3, #3
 8006e02:	b2db      	uxtb	r3, r3
 8006e04:	737b      	strb	r3, [r7, #13]
                rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006e06:	f107 010d 	add.w	r1, r7, #13
 8006e0a:	f107 000c 	add.w	r0, r7, #12
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	2201      	movs	r2, #1
 8006e12:	f7ff fdb9 	bl	8006988 <bme68x_set_regs>
 8006e16:	4603      	mov	r3, r0
 8006e18:	73fb      	strb	r3, [r7, #15]
                dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006e1e:	683a      	ldr	r2, [r7, #0]
 8006e20:	6852      	ldr	r2, [r2, #4]
 8006e22:	4611      	mov	r1, r2
 8006e24:	f242 7010 	movw	r0, #10000	@ 0x2710
 8006e28:	4798      	blx	r3
            }
        }
    } while ((pow_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK));
 8006e2a:	7bbb      	ldrb	r3, [r7, #14]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d003      	beq.n	8006e38 <bme68x_set_op_mode+0x78>
 8006e30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d0cd      	beq.n	8006dd4 <bme68x_set_op_mode+0x14>

    /* Already in sleep */
    if ((op_mode != BME68X_SLEEP_MODE) && (rslt == BME68X_OK))
 8006e38:	79fb      	ldrb	r3, [r7, #7]
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d01b      	beq.n	8006e76 <bme68x_set_op_mode+0xb6>
 8006e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d117      	bne.n	8006e76 <bme68x_set_op_mode+0xb6>
    {
        tmp_pow_mode = (tmp_pow_mode & ~BME68X_MODE_MSK) | (op_mode & BME68X_MODE_MSK);
 8006e46:	7b7b      	ldrb	r3, [r7, #13]
 8006e48:	b25b      	sxtb	r3, r3
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	b25a      	sxtb	r2, r3
 8006e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e54:	f003 0303 	and.w	r3, r3, #3
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	b25b      	sxtb	r3, r3
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	737b      	strb	r3, [r7, #13]
        rslt = bme68x_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 8006e62:	f107 010d 	add.w	r1, r7, #13
 8006e66:	f107 000c 	add.w	r0, r7, #12
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f7ff fd8b 	bl	8006988 <bme68x_set_regs>
 8006e72:	4603      	mov	r3, r0
 8006e74:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <bme68x_get_op_mode>:

/*
 * @brief This API is used to get the operation mode of the sensor.
 */
int8_t bme68x_get_op_mode(uint8_t *op_mode, struct bme68x_dev *dev)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	6039      	str	r1, [r7, #0]
    int8_t rslt;
    uint8_t mode;

    if (op_mode)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00f      	beq.n	8006eb2 <bme68x_get_op_mode+0x30>
    {
        rslt = bme68x_get_regs(BME68X_REG_CTRL_MEAS, &mode, 1, dev);
 8006e92:	f107 010e 	add.w	r1, r7, #14
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	2074      	movs	r0, #116	@ 0x74
 8006e9c:	f7ff fe04 	bl	8006aa8 <bme68x_get_regs>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	73fb      	strb	r3, [r7, #15]

        /* Masking the other register bit info*/
        *op_mode = mode & BME68X_MODE_MSK;
 8006ea4:	7bbb      	ldrb	r3, [r7, #14]
 8006ea6:	f003 0303 	and.w	r3, r3, #3
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e001      	b.n	8006eb6 <bme68x_get_op_mode+0x34>
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8006eb2:	23ff      	movs	r3, #255	@ 0xff
 8006eb4:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 8006eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3710      	adds	r7, #16
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <bme68x_get_meas_dur>:

/*
 * @brief This API is used to get the remaining duration that can be used for heating.
 */
uint32_t bme68x_get_meas_dur(const uint8_t op_mode, struct bme68x_conf *conf, struct bme68x_dev *dev)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b08a      	sub	sp, #40	@ 0x28
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	4603      	mov	r3, r0
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint32_t meas_dur = 0; /* Calculate in us */
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	623b      	str	r3, [r7, #32]
    uint32_t meas_cycles;
    uint8_t os_to_meas_cycles[6] = { 0, 1, 2, 4, 8, 16 };
 8006ed6:	4a34      	ldr	r2, [pc, #208]	@ (8006fa8 <bme68x_get_meas_dur+0xe4>)
 8006ed8:	f107 0314 	add.w	r3, r7, #20
 8006edc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006ee0:	6018      	str	r0, [r3, #0]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	8019      	strh	r1, [r3, #0]

    if (conf != NULL)
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d058      	beq.n	8006f9e <bme68x_get_meas_dur+0xda>
    {
        /* Boundary check for temperature oversampling */
        rslt = boundary_check(&conf->os_temp, BME68X_OS_16X, dev);
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	3301      	adds	r3, #1
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	2105      	movs	r1, #5
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 fa28 	bl	800834a <boundary_check>
 8006efa:	4603      	mov	r3, r0
 8006efc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

        if (rslt == BME68X_OK)
 8006f00:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d109      	bne.n	8006f1c <bme68x_get_meas_dur+0x58>
        {
            /* Boundary check for pressure oversampling */
            rslt = boundary_check(&conf->os_pres, BME68X_OS_16X, dev);
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	687a      	ldr	r2, [r7, #4]
 8006f0e:	2105      	movs	r1, #5
 8006f10:	4618      	mov	r0, r3
 8006f12:	f001 fa1a 	bl	800834a <boundary_check>
 8006f16:	4603      	mov	r3, r0
 8006f18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d108      	bne.n	8006f36 <bme68x_get_meas_dur+0x72>
        {
            /* Boundary check for humidity oversampling */
            rslt = boundary_check(&conf->os_hum, BME68X_OS_16X, dev);
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	687a      	ldr	r2, [r7, #4]
 8006f28:	2105      	movs	r1, #5
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f001 fa0d 	bl	800834a <boundary_check>
 8006f30:	4603      	mov	r3, r0
 8006f32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        }

        if (rslt == BME68X_OK)
 8006f36:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d12f      	bne.n	8006f9e <bme68x_get_meas_dur+0xda>
        {
            meas_cycles = os_to_meas_cycles[conf->os_temp];
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	785b      	ldrb	r3, [r3, #1]
 8006f42:	3328      	adds	r3, #40	@ 0x28
 8006f44:	443b      	add	r3, r7
 8006f46:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f4a:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_pres];
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	789b      	ldrb	r3, [r3, #2]
 8006f50:	3328      	adds	r3, #40	@ 0x28
 8006f52:	443b      	add	r3, r7
 8006f54:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f58:	461a      	mov	r2, r3
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	61fb      	str	r3, [r7, #28]
            meas_cycles += os_to_meas_cycles[conf->os_hum];
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	3328      	adds	r3, #40	@ 0x28
 8006f66:	443b      	add	r3, r7
 8006f68:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	4413      	add	r3, r2
 8006f72:	61fb      	str	r3, [r7, #28]

            /* TPH measurement duration */
            meas_dur = meas_cycles * UINT32_C(1963);
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	f240 72ab 	movw	r2, #1963	@ 0x7ab
 8006f7a:	fb02 f303 	mul.w	r3, r2, r3
 8006f7e:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 4); /* TPH switching duration */
 8006f80:	6a3b      	ldr	r3, [r7, #32]
 8006f82:	f203 7374 	addw	r3, r3, #1908	@ 0x774
 8006f86:	623b      	str	r3, [r7, #32]
            meas_dur += UINT32_C(477 * 5); /* Gas measurement duration */
 8006f88:	6a3b      	ldr	r3, [r7, #32]
 8006f8a:	f603 1351 	addw	r3, r3, #2385	@ 0x951
 8006f8e:	623b      	str	r3, [r7, #32]

            if (op_mode != BME68X_PARALLEL_MODE)
 8006f90:	7bfb      	ldrb	r3, [r7, #15]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d003      	beq.n	8006f9e <bme68x_get_meas_dur+0xda>
            {
                meas_dur += UINT32_C(1000); /* Wake up duration of 1ms */
 8006f96:	6a3b      	ldr	r3, [r7, #32]
 8006f98:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8006f9c:	623b      	str	r3, [r7, #32]
            }
        }
    }

    return meas_dur;
 8006f9e:	6a3b      	ldr	r3, [r7, #32]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3728      	adds	r7, #40	@ 0x28
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	0800f808 	.word	0x0800f808

08006fac <bme68x_get_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme68x_data
 * structure instance passed by the user.
 */
int8_t bme68x_get_data(uint8_t op_mode, struct bme68x_data *data, uint8_t *n_data, struct bme68x_dev *dev)
{
 8006fac:	b5b0      	push	{r4, r5, r7, lr}
 8006fae:	b09e      	sub	sp, #120	@ 0x78
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	60b9      	str	r1, [r7, #8]
 8006fb4:	607a      	str	r2, [r7, #4]
 8006fb6:	603b      	str	r3, [r7, #0]
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t i = 0, j = 0, new_fields = 0;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
    struct bme68x_data *field_ptr[3] = { 0 };
 8006fce:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	601a      	str	r2, [r3, #0]
 8006fd6:	605a      	str	r2, [r3, #4]
 8006fd8:	609a      	str	r2, [r3, #8]
    struct bme68x_data field_data[3] = { { 0 } };
 8006fda:	f107 0314 	add.w	r3, r7, #20
 8006fde:	2254      	movs	r2, #84	@ 0x54
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f007 fa5f 	bl	800e4a6 <memset>

    field_ptr[0] = &field_data[0];
 8006fe8:	f107 0314 	add.w	r3, r7, #20
 8006fec:	66bb      	str	r3, [r7, #104]	@ 0x68
    field_ptr[1] = &field_data[1];
 8006fee:	f107 0314 	add.w	r3, r7, #20
 8006ff2:	331c      	adds	r3, #28
 8006ff4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    field_ptr[2] = &field_data[2];
 8006ff6:	f107 0314 	add.w	r3, r7, #20
 8006ffa:	3338      	adds	r3, #56	@ 0x38
 8006ffc:	673b      	str	r3, [r7, #112]	@ 0x70

    rslt = null_ptr_check(dev);
 8006ffe:	6838      	ldr	r0, [r7, #0]
 8007000:	f001 f9d0 	bl	80083a4 <null_ptr_check>
 8007004:	4603      	mov	r3, r0
 8007006:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if ((rslt == BME68X_OK) && (data != NULL))
 800700a:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 800700e:	2b00      	cmp	r3, #0
 8007010:	f040 80c1 	bne.w	8007196 <bme68x_get_data+0x1ea>
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 80bd 	beq.w	8007196 <bme68x_get_data+0x1ea>
    {
        /* Reading the sensor data in forced mode only */
        if (op_mode == BME68X_FORCED_MODE)
 800701c:	7bfb      	ldrb	r3, [r7, #15]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d11c      	bne.n	800705c <bme68x_get_data+0xb0>
        {
            rslt = read_field_data(0, data, dev);
 8007022:	683a      	ldr	r2, [r7, #0]
 8007024:	68b9      	ldr	r1, [r7, #8]
 8007026:	2000      	movs	r0, #0
 8007028:	f000 fd8b 	bl	8007b42 <read_field_data>
 800702c:	4603      	mov	r3, r0
 800702e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (rslt == BME68X_OK)
 8007032:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8007036:	2b00      	cmp	r3, #0
 8007038:	f040 80a1 	bne.w	800717e <bme68x_get_data+0x1d2>
            {
                if (data->status & BME68X_NEW_DATA_MSK)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	b25b      	sxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	da03      	bge.n	800704e <bme68x_get_data+0xa2>
                {
                    new_fields = 1;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
 800704c:	e097      	b.n	800717e <bme68x_get_data+0x1d2>
                }
                else
                {
                    new_fields = 0;
 800704e:	2300      	movs	r3, #0
 8007050:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
                    rslt = BME68X_W_NO_NEW_DATA;
 8007054:	2302      	movs	r3, #2
 8007056:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 800705a:	e090      	b.n	800717e <bme68x_get_data+0x1d2>
                }
            }
        }
        else if ((op_mode == BME68X_PARALLEL_MODE) || (op_mode == BME68X_SEQUENTIAL_MODE))
 800705c:	7bfb      	ldrb	r3, [r7, #15]
 800705e:	2b02      	cmp	r3, #2
 8007060:	d003      	beq.n	800706a <bme68x_get_data+0xbe>
 8007062:	7bfb      	ldrb	r3, [r7, #15]
 8007064:	2b03      	cmp	r3, #3
 8007066:	f040 8087 	bne.w	8007178 <bme68x_get_data+0x1cc>
        {
            /* Read the 3 fields and count the number of new data fields */
            rslt = read_all_field_data(field_ptr, dev);
 800706a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	4618      	mov	r0, r3
 8007072:	f000 feaa 	bl	8007dca <read_all_field_data>
 8007076:	4603      	mov	r3, r0
 8007078:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

            new_fields = 0;
 800707c:	2300      	movs	r3, #0
 800707e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 8007082:	2300      	movs	r3, #0
 8007084:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007088:	e014      	b.n	80070b4 <bme68x_get_data+0x108>
            {
                if (field_ptr[i]->status & BME68X_NEW_DATA_MSK)
 800708a:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	3378      	adds	r3, #120	@ 0x78
 8007092:	443b      	add	r3, r7
 8007094:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8007098:	781b      	ldrb	r3, [r3, #0]
 800709a:	b25b      	sxtb	r3, r3
 800709c:	2b00      	cmp	r3, #0
 800709e:	da04      	bge.n	80070aa <bme68x_get_data+0xfe>
                {
                    new_fields++;
 80070a0:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 80070a4:	3301      	adds	r3, #1
 80070a6:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
            for (i = 0; (i < 3) && (rslt == BME68X_OK); i++)
 80070aa:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070ae:	3301      	adds	r3, #1
 80070b0:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80070b4:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d803      	bhi.n	80070c4 <bme68x_get_data+0x118>
 80070bc:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d0e2      	beq.n	800708a <bme68x_get_data+0xde>
                }
            }

            /* Sort the sensor data in parallel & sequential modes*/
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80070c4:	2300      	movs	r3, #0
 80070c6:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 80070ca:	e01c      	b.n	8007106 <bme68x_get_data+0x15a>
            {
                for (j = i + 1; j < 3; j++)
 80070cc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070d0:	3301      	adds	r3, #1
 80070d2:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80070d6:	e00d      	b.n	80070f4 <bme68x_get_data+0x148>
                {
                    sort_sensor_data(i, j, field_ptr);
 80070d8:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80070dc:	f897 1075 	ldrb.w	r1, [r7, #117]	@ 0x75
 80070e0:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 80070e4:	4618      	mov	r0, r3
 80070e6:	f001 fb09 	bl	80086fc <sort_sensor_data>
                for (j = i + 1; j < 3; j++)
 80070ea:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80070ee:	3301      	adds	r3, #1
 80070f0:	f887 3075 	strb.w	r3, [r7, #117]	@ 0x75
 80070f4:	f897 3075 	ldrb.w	r3, [r7, #117]	@ 0x75
 80070f8:	2b02      	cmp	r3, #2
 80070fa:	d9ed      	bls.n	80070d8 <bme68x_get_data+0x12c>
            for (i = 0; (i < 2) && (rslt == BME68X_OK); i++)
 80070fc:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007100:	3301      	adds	r3, #1
 8007102:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007106:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800710a:	2b01      	cmp	r3, #1
 800710c:	d803      	bhi.n	8007116 <bme68x_get_data+0x16a>
 800710e:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8007112:	2b00      	cmp	r3, #0
 8007114:	d0da      	beq.n	80070cc <bme68x_get_data+0x120>
                }
            }

            /* Copy the sorted data */
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007116:	2300      	movs	r3, #0
 8007118:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 800711c:	e01c      	b.n	8007158 <bme68x_get_data+0x1ac>
            {
                data[i] = *field_ptr[i];
 800711e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	3378      	adds	r3, #120	@ 0x78
 8007126:	443b      	add	r3, r7
 8007128:	f853 1c10 	ldr.w	r1, [r3, #-16]
 800712c:	f897 2076 	ldrb.w	r2, [r7, #118]	@ 0x76
 8007130:	4613      	mov	r3, r2
 8007132:	00db      	lsls	r3, r3, #3
 8007134:	1a9b      	subs	r3, r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	461a      	mov	r2, r3
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4413      	add	r3, r2
 800713e:	461c      	mov	r4, r3
 8007140:	460d      	mov	r5, r1
 8007142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007144:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007146:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800714a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 800714e:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 8007152:	3301      	adds	r3, #1
 8007154:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76
 8007158:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800715c:	2b02      	cmp	r3, #2
 800715e:	d803      	bhi.n	8007168 <bme68x_get_data+0x1bc>
 8007160:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
 8007164:	2b00      	cmp	r3, #0
 8007166:	d0da      	beq.n	800711e <bme68x_get_data+0x172>
            }

            if (new_fields == 0)
 8007168:	f897 3074 	ldrb.w	r3, [r7, #116]	@ 0x74
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <bme68x_get_data+0x1d2>
            {
                rslt = BME68X_W_NO_NEW_DATA;
 8007170:	2302      	movs	r3, #2
 8007172:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (new_fields == 0)
 8007176:	e002      	b.n	800717e <bme68x_get_data+0x1d2>
            }
        }
        else
        {
            rslt = BME68X_W_DEFINE_OP_MODE;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        }

        if (n_data == NULL)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d103      	bne.n	800718c <bme68x_get_data+0x1e0>
        {
            rslt = BME68X_E_NULL_PTR;
 8007184:	23ff      	movs	r3, #255	@ 0xff
 8007186:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
        if (n_data == NULL)
 800718a:	e007      	b.n	800719c <bme68x_get_data+0x1f0>
        }
        else
        {
            *n_data = new_fields;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f897 2074 	ldrb.w	r2, [r7, #116]	@ 0x74
 8007192:	701a      	strb	r2, [r3, #0]
        if (n_data == NULL)
 8007194:	e002      	b.n	800719c <bme68x_get_data+0x1f0>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8007196:	23ff      	movs	r3, #255	@ 0xff
 8007198:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    }

    return rslt;
 800719c:	f997 3077 	ldrsb.w	r3, [r7, #119]	@ 0x77
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3778      	adds	r7, #120	@ 0x78
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bdb0      	pop	{r4, r5, r7, pc}

080071a8 <bme68x_set_heatr_conf>:

/*
 * @brief This API is used to set the gas configuration of the sensor.
 */
int8_t bme68x_set_heatr_conf(uint8_t op_mode, const struct bme68x_heatr_conf *conf, struct bme68x_dev *dev)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b088      	sub	sp, #32
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	4603      	mov	r3, r0
 80071b0:	60b9      	str	r1, [r7, #8]
 80071b2:	607a      	str	r2, [r7, #4]
 80071b4:	73fb      	strb	r3, [r7, #15]
    int8_t rslt;
    uint8_t nb_conv = 0;
 80071b6:	2300      	movs	r3, #0
 80071b8:	773b      	strb	r3, [r7, #28]
    uint8_t hctrl, run_gas = 0;
 80071ba:	2300      	movs	r3, #0
 80071bc:	777b      	strb	r3, [r7, #29]
    uint8_t ctrl_gas_data[2];
    uint8_t ctrl_gas_addr[2] = { BME68X_REG_CTRL_GAS_0, BME68X_REG_CTRL_GAS_1 };
 80071be:	f247 1370 	movw	r3, #29040	@ 0x7170
 80071c2:	82bb      	strh	r3, [r7, #20]

    if (conf != NULL)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d06e      	beq.n	80072a8 <bme68x_set_heatr_conf+0x100>
    {
        rslt = bme68x_set_op_mode(BME68X_SLEEP_MODE, dev);
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	2000      	movs	r0, #0
 80071ce:	f7ff fdf7 	bl	8006dc0 <bme68x_set_op_mode>
 80071d2:	4603      	mov	r3, r0
 80071d4:	77fb      	strb	r3, [r7, #31]
        if (rslt == BME68X_OK)
 80071d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d108      	bne.n	80071f0 <bme68x_set_heatr_conf+0x48>
        {
            rslt = set_conf(conf, op_mode, &nb_conv, dev);
 80071de:	f107 021c 	add.w	r2, r7, #28
 80071e2:	7bf9      	ldrb	r1, [r7, #15]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	68b8      	ldr	r0, [r7, #8]
 80071e8:	f001 f8fc 	bl	80083e4 <set_conf>
 80071ec:	4603      	mov	r3, r0
 80071ee:	77fb      	strb	r3, [r7, #31]
        }

        if (rslt == BME68X_OK)
 80071f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d159      	bne.n	80072ac <bme68x_set_heatr_conf+0x104>
        {
            rslt = bme68x_get_regs(BME68X_REG_CTRL_GAS_0, ctrl_gas_data, 2, dev);
 80071f8:	f107 0118 	add.w	r1, r7, #24
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	2070      	movs	r0, #112	@ 0x70
 8007202:	f7ff fc51 	bl	8006aa8 <bme68x_get_regs>
 8007206:	4603      	mov	r3, r0
 8007208:	77fb      	strb	r3, [r7, #31]
            if (rslt == BME68X_OK)
 800720a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d14c      	bne.n	80072ac <bme68x_set_heatr_conf+0x104>
            {
                if (conf->enable == BME68X_ENABLE)
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b01      	cmp	r3, #1
 8007218:	d10b      	bne.n	8007232 <bme68x_set_heatr_conf+0x8a>
                {
                    hctrl = BME68X_ENABLE_HEATER;
 800721a:	2300      	movs	r3, #0
 800721c:	77bb      	strb	r3, [r7, #30]
                    if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	689b      	ldr	r3, [r3, #8]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d102      	bne.n	800722c <bme68x_set_heatr_conf+0x84>
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_H;
 8007226:	2302      	movs	r3, #2
 8007228:	777b      	strb	r3, [r7, #29]
 800722a:	e006      	b.n	800723a <bme68x_set_heatr_conf+0x92>
                    }
                    else
                    {
                        run_gas = BME68X_ENABLE_GAS_MEAS_L;
 800722c:	2301      	movs	r3, #1
 800722e:	777b      	strb	r3, [r7, #29]
 8007230:	e003      	b.n	800723a <bme68x_set_heatr_conf+0x92>
                    }
                }
                else
                {
                    hctrl = BME68X_DISABLE_HEATER;
 8007232:	2301      	movs	r3, #1
 8007234:	77bb      	strb	r3, [r7, #30]
                    run_gas = BME68X_DISABLE_GAS_MEAS;
 8007236:	2300      	movs	r3, #0
 8007238:	777b      	strb	r3, [r7, #29]
                }

                ctrl_gas_data[0] = BME68X_SET_BITS(ctrl_gas_data[0], BME68X_HCTRL, hctrl);
 800723a:	7e3b      	ldrb	r3, [r7, #24]
 800723c:	b25b      	sxtb	r3, r3
 800723e:	f023 0308 	bic.w	r3, r3, #8
 8007242:	b25a      	sxtb	r2, r3
 8007244:	7fbb      	ldrb	r3, [r7, #30]
 8007246:	00db      	lsls	r3, r3, #3
 8007248:	b25b      	sxtb	r3, r3
 800724a:	f003 0308 	and.w	r3, r3, #8
 800724e:	b25b      	sxtb	r3, r3
 8007250:	4313      	orrs	r3, r2
 8007252:	b25b      	sxtb	r3, r3
 8007254:	b2db      	uxtb	r3, r3
 8007256:	763b      	strb	r3, [r7, #24]
                ctrl_gas_data[1] = BME68X_SET_BITS_POS_0(ctrl_gas_data[1], BME68X_NBCONV, nb_conv);
 8007258:	7e7b      	ldrb	r3, [r7, #25]
 800725a:	b25b      	sxtb	r3, r3
 800725c:	f023 030f 	bic.w	r3, r3, #15
 8007260:	b25a      	sxtb	r2, r3
 8007262:	7f3b      	ldrb	r3, [r7, #28]
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f003 030f 	and.w	r3, r3, #15
 800726a:	b25b      	sxtb	r3, r3
 800726c:	4313      	orrs	r3, r2
 800726e:	b25b      	sxtb	r3, r3
 8007270:	b2db      	uxtb	r3, r3
 8007272:	767b      	strb	r3, [r7, #25]
                ctrl_gas_data[1] = BME68X_SET_BITS(ctrl_gas_data[1], BME68X_RUN_GAS, run_gas);
 8007274:	7e7b      	ldrb	r3, [r7, #25]
 8007276:	b25b      	sxtb	r3, r3
 8007278:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800727c:	b25a      	sxtb	r2, r3
 800727e:	7f7b      	ldrb	r3, [r7, #29]
 8007280:	011b      	lsls	r3, r3, #4
 8007282:	b25b      	sxtb	r3, r3
 8007284:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007288:	b25b      	sxtb	r3, r3
 800728a:	4313      	orrs	r3, r2
 800728c:	b25b      	sxtb	r3, r3
 800728e:	b2db      	uxtb	r3, r3
 8007290:	767b      	strb	r3, [r7, #25]
                rslt = bme68x_set_regs(ctrl_gas_addr, ctrl_gas_data, 2, dev);
 8007292:	f107 0118 	add.w	r1, r7, #24
 8007296:	f107 0014 	add.w	r0, r7, #20
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2202      	movs	r2, #2
 800729e:	f7ff fb73 	bl	8006988 <bme68x_set_regs>
 80072a2:	4603      	mov	r3, r0
 80072a4:	77fb      	strb	r3, [r7, #31]
 80072a6:	e001      	b.n	80072ac <bme68x_set_heatr_conf+0x104>
            }
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 80072a8:	23ff      	movs	r3, #255	@ 0xff
 80072aa:	77fb      	strb	r3, [r7, #31]
    }

    return rslt;
 80072ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3720      	adds	r7, #32
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <calc_temperature>:

#else

/* @brief This internal API is used to calculate the temperature value. */
static float calc_temperature(uint32_t temp_adc, struct bme68x_dev *dev)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float calc_temp;

    /* calculate var1 data */
    var1 = ((((float)temp_adc / 16384.0f) - ((float)dev->calib.par_t1 / 1024.0f)) * ((float)dev->calib.par_t2));
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	ee07 3a90 	vmov	s15, r3
 80072c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072cc:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80073b0 <calc_temperature+0xf8>
 80072d0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80072d4:	683b      	ldr	r3, [r7, #0]
 80072d6:	8bdb      	ldrh	r3, [r3, #30]
 80072d8:	ee07 3a90 	vmov	s15, r3
 80072dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80072e0:	ed9f 6a34 	vldr	s12, [pc, #208]	@ 80073b4 <calc_temperature+0xfc>
 80072e4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80072e8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80072f2:	ee07 3a90 	vmov	s15, r3
 80072f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80072fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072fe:	edc7 7a05 	vstr	s15, [r7, #20]

    /* calculate var2 data */
    var2 =
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	ee07 3a90 	vmov	s15, r3
 8007308:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800730c:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80073b8 <calc_temperature+0x100>
 8007310:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	8bdb      	ldrh	r3, [r3, #30]
 8007318:	ee07 3a90 	vmov	s15, r3
 800731c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007320:	ed9f 6a26 	vldr	s12, [pc, #152]	@ 80073bc <calc_temperature+0x104>
 8007324:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007328:	ee37 7a67 	vsub.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	ee07 3a90 	vmov	s15, r3
 8007332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007336:	ed9f 6a20 	vldr	s12, [pc, #128]	@ 80073b8 <calc_temperature+0x100>
 800733a:	eec7 6a86 	vdiv.f32	s13, s15, s12
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	8bdb      	ldrh	r3, [r3, #30]
 8007342:	ee07 3a90 	vmov	s15, r3
 8007346:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 800734a:	eddf 5a1c 	vldr	s11, [pc, #112]	@ 80073bc <calc_temperature+0x104>
 800734e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007352:	ee76 7ae7 	vsub.f32	s15, s13, s15
        (((((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f)) *
 8007356:	ee27 7a27 	vmul.f32	s14, s14, s15
          (((float)temp_adc / 131072.0f) - ((float)dev->calib.par_t1 / 8192.0f))) * ((float)dev->calib.par_t3 * 16.0f));
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f993 3022 	ldrsb.w	r3, [r3, #34]	@ 0x22
 8007360:	ee07 3a90 	vmov	s15, r3
 8007364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007368:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 800736c:	ee67 7aa6 	vmul.f32	s15, s15, s13
    var2 =
 8007370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007374:	edc7 7a04 	vstr	s15, [r7, #16]

    /* t_fine value*/
    dev->calib.t_fine = (var1 + var2);
 8007378:	ed97 7a05 	vldr	s14, [r7, #20]
 800737c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

    /* compensated temperature data*/
    calc_temp = ((dev->calib.t_fine) / 5120.0f);
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8007390:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80073c0 <calc_temperature+0x108>
 8007394:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007398:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_temp;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	ee07 3a90 	vmov	s15, r3
}
 80073a2:	eeb0 0a67 	vmov.f32	s0, s15
 80073a6:	371c      	adds	r7, #28
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr
 80073b0:	46800000 	.word	0x46800000
 80073b4:	44800000 	.word	0x44800000
 80073b8:	48000000 	.word	0x48000000
 80073bc:	46000000 	.word	0x46000000
 80073c0:	45a00000 	.word	0x45a00000

080073c4 <calc_pressure>:

/* @brief This internal API is used to calculate the pressure value. */
static float calc_pressure(uint32_t pres_adc, const struct bme68x_dev *dev)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
    float var1;
    float var2;
    float var3;
    float calc_pres;

    var1 = (((float)dev->calib.t_fine / 2.0f) - 64000.0f);
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80073d4:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 80073d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80073dc:	ed9f 7a8e 	vldr	s14, [pc, #568]	@ 8007618 <calc_pressure+0x254>
 80073e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80073e4:	edc7 7a04 	vstr	s15, [r7, #16]
    var2 = var1 * var1 * (((float)dev->calib.par_p6) / (131072.0f));
 80073e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80073ec:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	f993 302e 	ldrsb.w	r3, [r3, #46]	@ 0x2e
 80073f6:	ee07 3a90 	vmov	s15, r3
 80073fa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80073fe:	ed9f 6a87 	vldr	s12, [pc, #540]	@ 800761c <calc_pressure+0x258>
 8007402:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007406:	ee67 7a27 	vmul.f32	s15, s14, s15
 800740a:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = var2 + (var1 * ((float)dev->calib.par_p5) * 2.0f);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 8007414:	ee07 3a90 	vmov	s15, r3
 8007418:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800741c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007420:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007424:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007428:	ed97 7a03 	vldr	s14, [r7, #12]
 800742c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007430:	edc7 7a03 	vstr	s15, [r7, #12]
    var2 = (var2 / 4.0f) + (((float)dev->calib.par_p4) * 65536.0f);
 8007434:	edd7 7a03 	vldr	s15, [r7, #12]
 8007438:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800743c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800744e:	eddf 6a74 	vldr	s13, [pc, #464]	@ 8007620 <calc_pressure+0x25c>
 8007452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007456:	ee77 7a27 	vadd.f32	s15, s14, s15
 800745a:	edc7 7a03 	vstr	s15, [r7, #12]
    var1 = (((((float)dev->calib.par_p3 * var1 * var1) / 16384.0f) + ((float)dev->calib.par_p2 * var1)) / 524288.0f);
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8007464:	ee07 3a90 	vmov	s15, r3
 8007468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800746c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007470:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007474:	edd7 7a04 	vldr	s15, [r7, #16]
 8007478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800747c:	eddf 6a69 	vldr	s13, [pc, #420]	@ 8007624 <calc_pressure+0x260>
 8007480:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8007492:	edd7 7a04 	vldr	s15, [r7, #16]
 8007496:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800749a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800749e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8007628 <calc_pressure+0x264>
 80074a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074a6:	edc7 7a04 	vstr	s15, [r7, #16]
    var1 = ((1.0f + (var1 / 32768.0f)) * ((float)dev->calib.par_p1));
 80074aa:	ed97 7a04 	vldr	s14, [r7, #16]
 80074ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800762c <calc_pressure+0x268>
 80074b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80074ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80074c2:	ee07 3a90 	vmov	s15, r3
 80074c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ce:	edc7 7a04 	vstr	s15, [r7, #16]
    calc_pres = (1048576.0f - ((float)pres_adc));
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	ee07 3a90 	vmov	s15, r3
 80074d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074dc:	ed9f 7a54 	vldr	s14, [pc, #336]	@ 8007630 <calc_pressure+0x26c>
 80074e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074e4:	edc7 7a05 	vstr	s15, [r7, #20]

    /* Avoid exception caused by division by zero */
    if ((int)var1 != 0)
 80074e8:	edd7 7a04 	vldr	s15, [r7, #16]
 80074ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80074f0:	ee17 3a90 	vmov	r3, s15
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 8081 	beq.w	80075fc <calc_pressure+0x238>
    {
        calc_pres = (((calc_pres - (var2 / 4096.0f)) * 6250.0f) / var1);
 80074fa:	ed97 7a03 	vldr	s14, [r7, #12]
 80074fe:	eddf 6a4d 	vldr	s13, [pc, #308]	@ 8007634 <calc_pressure+0x270>
 8007502:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007506:	ed97 7a05 	vldr	s14, [r7, #20]
 800750a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800750e:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8007638 <calc_pressure+0x274>
 8007512:	ee67 6a87 	vmul.f32	s13, s15, s14
 8007516:	ed97 7a04 	vldr	s14, [r7, #16]
 800751a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800751e:	edc7 7a05 	vstr	s15, [r7, #20]
        var1 = (((float)dev->calib.par_p9) * calc_pres * calc_pres) / 2147483648.0f;
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 8007528:	ee07 3a90 	vmov	s15, r3
 800752c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007530:	edd7 7a05 	vldr	s15, [r7, #20]
 8007534:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007538:	edd7 7a05 	vldr	s15, [r7, #20]
 800753c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007540:	eddf 6a3e 	vldr	s13, [pc, #248]	@ 800763c <calc_pressure+0x278>
 8007544:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007548:	edc7 7a04 	vstr	s15, [r7, #16]
        var2 = calc_pres * (((float)dev->calib.par_p8) / 32768.0f);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8007552:	ee07 3a90 	vmov	s15, r3
 8007556:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800755a:	eddf 6a34 	vldr	s13, [pc, #208]	@ 800762c <calc_pressure+0x268>
 800755e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007562:	ed97 7a05 	vldr	s14, [r7, #20]
 8007566:	ee67 7a27 	vmul.f32	s15, s14, s15
 800756a:	edc7 7a03 	vstr	s15, [r7, #12]
        var3 = ((calc_pres / 256.0f) * (calc_pres / 256.0f) * (calc_pres / 256.0f) * (dev->calib.par_p10 / 131072.0f));
 800756e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007572:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8007640 <calc_pressure+0x27c>
 8007576:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800757a:	edd7 6a05 	vldr	s13, [r7, #20]
 800757e:	ed9f 6a30 	vldr	s12, [pc, #192]	@ 8007640 <calc_pressure+0x27c>
 8007582:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007586:	ee27 7a27 	vmul.f32	s14, s14, s15
 800758a:	edd7 6a05 	vldr	s13, [r7, #20]
 800758e:	ed9f 6a2c 	vldr	s12, [pc, #176]	@ 8007640 <calc_pressure+0x27c>
 8007592:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8007596:	ee27 7a27 	vmul.f32	s14, s14, s15
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80075a0:	ee07 3a90 	vmov	s15, r3
 80075a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80075a8:	ed9f 6a1c 	vldr	s12, [pc, #112]	@ 800761c <calc_pressure+0x258>
 80075ac:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80075b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075b4:	edc7 7a02 	vstr	s15, [r7, #8]
        calc_pres = (calc_pres + (var1 + var2 + var3 + ((float)dev->calib.par_p7 * 128.0f)) / 16.0f);
 80075b8:	ed97 7a04 	vldr	s14, [r7, #16]
 80075bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80075c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075c4:	edd7 7a02 	vldr	s15, [r7, #8]
 80075c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	f993 302f 	ldrsb.w	r3, [r3, #47]	@ 0x2f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80075da:	eddf 6a1a 	vldr	s13, [pc, #104]	@ 8007644 <calc_pressure+0x280>
 80075de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80075e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80075e6:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80075ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80075ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80075f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075f6:	edc7 7a05 	vstr	s15, [r7, #20]
 80075fa:	e002      	b.n	8007602 <calc_pressure+0x23e>
    }
    else
    {
        calc_pres = 0;
 80075fc:	f04f 0300 	mov.w	r3, #0
 8007600:	617b      	str	r3, [r7, #20]
    }

    return calc_pres;
 8007602:	697b      	ldr	r3, [r7, #20]
 8007604:	ee07 3a90 	vmov	s15, r3
}
 8007608:	eeb0 0a67 	vmov.f32	s0, s15
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr
 8007616:	bf00      	nop
 8007618:	477a0000 	.word	0x477a0000
 800761c:	48000000 	.word	0x48000000
 8007620:	47800000 	.word	0x47800000
 8007624:	46800000 	.word	0x46800000
 8007628:	49000000 	.word	0x49000000
 800762c:	47000000 	.word	0x47000000
 8007630:	49800000 	.word	0x49800000
 8007634:	45800000 	.word	0x45800000
 8007638:	45c35000 	.word	0x45c35000
 800763c:	4f000000 	.word	0x4f000000
 8007640:	43800000 	.word	0x43800000
 8007644:	43000000 	.word	0x43000000

08007648 <calc_humidity>:

/* This internal API is used to calculate the humidity in integer */
static float calc_humidity(uint16_t hum_adc, const struct bme68x_dev *dev)
{
 8007648:	b480      	push	{r7}
 800764a:	b089      	sub	sp, #36	@ 0x24
 800764c:	af00      	add	r7, sp, #0
 800764e:	4603      	mov	r3, r0
 8007650:	6039      	str	r1, [r7, #0]
 8007652:	80fb      	strh	r3, [r7, #6]
    float var3;
    float var4;
    float temp_comp;

    /* compensated temperature data*/
    temp_comp = ((dev->calib.t_fine) / 5120.0f);
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800765a:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80077c4 <calc_humidity+0x17c>
 800765e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007662:	edc7 7a06 	vstr	s15, [r7, #24]
    var1 = (float)((float)hum_adc) -
 8007666:	88fb      	ldrh	r3, [r7, #6]
 8007668:	ee07 3a90 	vmov	s15, r3
 800766c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
           (((float)dev->calib.par_h1 * 16.0f) + (((float)dev->calib.par_h3 / 2.0f) * temp_comp));
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	8a1b      	ldrh	r3, [r3, #16]
 8007674:	ee07 3a90 	vmov	s15, r3
 8007678:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800767c:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 8007680:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800768a:	ee07 3a90 	vmov	s15, r3
 800768e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007692:	eef0 5a00 	vmov.f32	s11, #0	@ 0x40000000  2.0
 8007696:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 800769a:	edd7 7a06 	vldr	s15, [r7, #24]
 800769e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80076a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
    var1 = (float)((float)hum_adc) -
 80076a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076aa:	edc7 7a05 	vstr	s15, [r7, #20]
    var2 = var1 *
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	8a5b      	ldrh	r3, [r3, #18]
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ba:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80077c8 <calc_humidity+0x180>
 80076be:	ee87 7aa6 	vdiv.f32	s14, s15, s13
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	f993 3015 	ldrsb.w	r3, [r3, #21]
 80076c8:	ee07 3a90 	vmov	s15, r3
 80076cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076d0:	ed9f 6a3e 	vldr	s12, [pc, #248]	@ 80077cc <calc_humidity+0x184>
 80076d4:	eec7 6a86 	vdiv.f32	s13, s15, s12
 80076d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80076dc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80076e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80076e4:	ee77 6aa6 	vadd.f32	s13, s15, s13
                     (((float)dev->calib.par_h5 / 1048576.0f) * temp_comp * temp_comp))));
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80076ee:	ee07 3a90 	vmov	s15, r3
 80076f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80076f6:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80077d0 <calc_humidity+0x188>
 80076fa:	ee87 6aa5 	vdiv.f32	s12, s15, s11
 80076fe:	edd7 7a06 	vldr	s15, [r7, #24]
 8007702:	ee26 6a27 	vmul.f32	s12, s12, s15
 8007706:	edd7 7a06 	vldr	s15, [r7, #24]
 800770a:	ee66 7a27 	vmul.f32	s15, s12, s15
                    (1.0f + (((float)dev->calib.par_h4 / 16384.0f) * temp_comp) +
 800770e:	ee76 7aa7 	vadd.f32	s15, s13, s15
           ((float)(((float)dev->calib.par_h2 / 262144.0f) *
 8007712:	ee67 7a27 	vmul.f32	s15, s14, s15
    var2 = var1 *
 8007716:	ed97 7a05 	vldr	s14, [r7, #20]
 800771a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771e:	edc7 7a04 	vstr	s15, [r7, #16]
    var3 = (float)dev->calib.par_h6 / 16384.0f;
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	7ddb      	ldrb	r3, [r3, #23]
 8007726:	ee07 3a90 	vmov	s15, r3
 800772a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800772e:	eddf 6a27 	vldr	s13, [pc, #156]	@ 80077cc <calc_humidity+0x184>
 8007732:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007736:	edc7 7a03 	vstr	s15, [r7, #12]
    var4 = (float)dev->calib.par_h7 / 2097152.0f;
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	f993 3018 	ldrsb.w	r3, [r3, #24]
 8007740:	ee07 3a90 	vmov	s15, r3
 8007744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007748:	eddf 6a22 	vldr	s13, [pc, #136]	@ 80077d4 <calc_humidity+0x18c>
 800774c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007750:	edc7 7a02 	vstr	s15, [r7, #8]
    calc_hum = var2 + ((var3 + (var4 * temp_comp)) * var2 * var2);
 8007754:	ed97 7a02 	vldr	s14, [r7, #8]
 8007758:	edd7 7a06 	vldr	s15, [r7, #24]
 800775c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007760:	edd7 7a03 	vldr	s15, [r7, #12]
 8007764:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007768:	edd7 7a04 	vldr	s15, [r7, #16]
 800776c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007770:	edd7 7a04 	vldr	s15, [r7, #16]
 8007774:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007778:	ed97 7a04 	vldr	s14, [r7, #16]
 800777c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007780:	edc7 7a07 	vstr	s15, [r7, #28]
    if (calc_hum > 100.0f)
 8007784:	edd7 7a07 	vldr	s15, [r7, #28]
 8007788:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80077d8 <calc_humidity+0x190>
 800778c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007794:	dd02      	ble.n	800779c <calc_humidity+0x154>
    {
        calc_hum = 100.0f;
 8007796:	4b11      	ldr	r3, [pc, #68]	@ (80077dc <calc_humidity+0x194>)
 8007798:	61fb      	str	r3, [r7, #28]
 800779a:	e009      	b.n	80077b0 <calc_humidity+0x168>
    }
    else if (calc_hum < 0.0f)
 800779c:	edd7 7a07 	vldr	s15, [r7, #28]
 80077a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80077a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077a8:	d502      	bpl.n	80077b0 <calc_humidity+0x168>
    {
        calc_hum = 0.0f;
 80077aa:	f04f 0300 	mov.w	r3, #0
 80077ae:	61fb      	str	r3, [r7, #28]
    }

    return calc_hum;
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	ee07 3a90 	vmov	s15, r3
}
 80077b6:	eeb0 0a67 	vmov.f32	s0, s15
 80077ba:	3724      	adds	r7, #36	@ 0x24
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr
 80077c4:	45a00000 	.word	0x45a00000
 80077c8:	48800000 	.word	0x48800000
 80077cc:	46800000 	.word	0x46800000
 80077d0:	49800000 	.word	0x49800000
 80077d4:	4a000000 	.word	0x4a000000
 80077d8:	42c80000 	.word	0x42c80000
 80077dc:	42c80000 	.word	0x42c80000

080077e0 <calc_gas_resistance_low>:

/* This internal API is used to calculate the gas resistance low value in float */
static float calc_gas_resistance_low(uint16_t gas_res_adc, uint8_t gas_range, const struct bme68x_dev *dev)
{
 80077e0:	b4b0      	push	{r4, r5, r7}
 80077e2:	b0a9      	sub	sp, #164	@ 0xa4
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	4603      	mov	r3, r0
 80077e8:	603a      	str	r2, [r7, #0]
 80077ea:	80fb      	strh	r3, [r7, #6]
 80077ec:	460b      	mov	r3, r1
 80077ee:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    float var1;
    float var2;
    float var3;
    float gas_res_f = gas_res_adc;
 80077f0:	88fb      	ldrh	r3, [r7, #6]
 80077f2:	ee07 3a90 	vmov	s15, r3
 80077f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077fa:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    float gas_range_f = (1U << gas_range); /*lint !e790 / Suspicious truncation, integral to float */
 80077fe:	797b      	ldrb	r3, [r7, #5]
 8007800:	2201      	movs	r2, #1
 8007802:	fa02 f303 	lsl.w	r3, r2, r3
 8007806:	ee07 3a90 	vmov	s15, r3
 800780a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800780e:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    const float lookup_k1_range[16] = {
 8007812:	4b3e      	ldr	r3, [pc, #248]	@ (800790c <calc_gas_resistance_low+0x12c>)
 8007814:	f107 0448 	add.w	r4, r7, #72	@ 0x48
 8007818:	461d      	mov	r5, r3
 800781a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800781c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800781e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007820:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007822:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007824:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007826:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800782a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.0f, -1.0f, 0.0f, -0.8f, 0.0f, 0.0f, -0.2f, -0.5f, 0.0f, -1.0f, 0.0f, 0.0f
    };
    const float lookup_k2_range[16] = {
 800782e:	4b38      	ldr	r3, [pc, #224]	@ (8007910 <calc_gas_resistance_low+0x130>)
 8007830:	f107 0408 	add.w	r4, r7, #8
 8007834:	461d      	mov	r5, r3
 8007836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800783c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800783e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007840:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007842:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8007846:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        0.0f, 0.0f, 0.0f, 0.0f, 0.1f, 0.7f, 0.0f, -0.8f, -0.1f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f
    };

    var1 = (1340.0f + (5.0f * dev->calib.range_sw_err));
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	f993 303e 	ldrsb.w	r3, [r3, #62]	@ 0x3e
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007858:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
 800785c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007860:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8007914 <calc_gas_resistance_low+0x134>
 8007864:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007868:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
    var2 = (var1) * (1.0f + lookup_k1_range[gas_range] / 100.0f);
 800786c:	797b      	ldrb	r3, [r7, #5]
 800786e:	009b      	lsls	r3, r3, #2
 8007870:	33a0      	adds	r3, #160	@ 0xa0
 8007872:	443b      	add	r3, r7
 8007874:	3b58      	subs	r3, #88	@ 0x58
 8007876:	ed93 7a00 	vldr	s14, [r3]
 800787a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8007918 <calc_gas_resistance_low+0x138>
 800787e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007882:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800788a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
    var3 = 1.0f + (lookup_k2_range[gas_range] / 100.0f);
 8007896:	797b      	ldrb	r3, [r7, #5]
 8007898:	009b      	lsls	r3, r3, #2
 800789a:	33a0      	adds	r3, #160	@ 0xa0
 800789c:	443b      	add	r3, r7
 800789e:	3b98      	subs	r3, #152	@ 0x98
 80078a0:	ed93 7a00 	vldr	s14, [r3]
 80078a4:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8007918 <calc_gas_resistance_low+0x138>
 80078a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80078ac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80078b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80078b4:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
    calc_gas_res = 1.0f / (float)(var3 * (0.000000125f) * gas_range_f * (((gas_res_f - 512.0f) / var2) + 1.0f));
 80078b8:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80078bc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 800791c <calc_gas_resistance_low+0x13c>
 80078c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80078c4:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 80078c8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078cc:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80078d0:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8007920 <calc_gas_resistance_low+0x140>
 80078d4:	ee37 6ae6 	vsub.f32	s12, s15, s13
 80078d8:	edd7 6a24 	vldr	s13, [r7, #144]	@ 0x90
 80078dc:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80078e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078ec:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80078f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078f4:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88

    return calc_gas_res;
 80078f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80078fc:	ee07 3a90 	vmov	s15, r3
}
 8007900:	eeb0 0a67 	vmov.f32	s0, s15
 8007904:	37a4      	adds	r7, #164	@ 0xa4
 8007906:	46bd      	mov	sp, r7
 8007908:	bcb0      	pop	{r4, r5, r7}
 800790a:	4770      	bx	lr
 800790c:	0800f810 	.word	0x0800f810
 8007910:	0800f850 	.word	0x0800f850
 8007914:	44a78000 	.word	0x44a78000
 8007918:	42c80000 	.word	0x42c80000
 800791c:	340637bd 	.word	0x340637bd
 8007920:	44000000 	.word	0x44000000

08007924 <calc_gas_resistance_high>:

/* This internal API is used to calculate the gas resistance value in float */
static float calc_gas_resistance_high(uint16_t gas_res_adc, uint8_t gas_range)
{
 8007924:	b480      	push	{r7}
 8007926:	b087      	sub	sp, #28
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	460a      	mov	r2, r1
 800792e:	80fb      	strh	r3, [r7, #6]
 8007930:	4613      	mov	r3, r2
 8007932:	717b      	strb	r3, [r7, #5]
    float calc_gas_res;
    uint32_t var1 = UINT32_C(262144) >> gas_range;
 8007934:	797b      	ldrb	r3, [r7, #5]
 8007936:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800793a:	fa22 f303 	lsr.w	r3, r2, r3
 800793e:	617b      	str	r3, [r7, #20]
    int32_t var2 = (int32_t)gas_res_adc - INT32_C(512);
 8007940:	88fb      	ldrh	r3, [r7, #6]
 8007942:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8007946:	613b      	str	r3, [r7, #16]

    var2 *= INT32_C(3);
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	4613      	mov	r3, r2
 800794c:	005b      	lsls	r3, r3, #1
 800794e:	4413      	add	r3, r2
 8007950:	613b      	str	r3, [r7, #16]
    var2 = INT32_C(4096) + var2;
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007958:	613b      	str	r3, [r7, #16]

    calc_gas_res = 1000000.0f * (float)var1 / (float)var2;
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	ee07 3a90 	vmov	s15, r3
 8007960:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007964:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8007994 <calc_gas_resistance_high+0x70>
 8007968:	ee67 6a87 	vmul.f32	s13, s15, s14
 800796c:	693b      	ldr	r3, [r7, #16]
 800796e:	ee07 3a90 	vmov	s15, r3
 8007972:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007976:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800797a:	edc7 7a03 	vstr	s15, [r7, #12]

    return calc_gas_res;
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	ee07 3a90 	vmov	s15, r3
}
 8007984:	eeb0 0a67 	vmov.f32	s0, s15
 8007988:	371c      	adds	r7, #28
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	49742400 	.word	0x49742400

08007998 <calc_res_heat>:

/* This internal API is used to calculate the heater resistance value */
static uint8_t calc_res_heat(uint16_t temp, const struct bme68x_dev *dev)
{
 8007998:	b480      	push	{r7}
 800799a:	b08b      	sub	sp, #44	@ 0x2c
 800799c:	af00      	add	r7, sp, #0
 800799e:	4603      	mov	r3, r0
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	81fb      	strh	r3, [r7, #14]
    float var3;
    float var4;
    float var5;
    uint8_t res_heat;

    if (temp > 400) /* Cap temperature */
 80079a4:	89fb      	ldrh	r3, [r7, #14]
 80079a6:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80079aa:	d902      	bls.n	80079b2 <calc_res_heat+0x1a>
    {
        temp = 400;
 80079ac:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80079b0:	81fb      	strh	r3, [r7, #14]
    }

    var1 = (((float)dev->calib.par_gh1 / (16.0f)) + 49.0f);
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	f993 3019 	ldrsb.w	r3, [r3, #25]
 80079b8:	ee07 3a90 	vmov	s15, r3
 80079bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079c0:	eef3 6a00 	vmov.f32	s13, #48	@ 0x41800000  16.0
 80079c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079c8:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8007adc <calc_res_heat+0x144>
 80079cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079d0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    var2 = ((((float)dev->calib.par_gh2 / (32768.0f)) * (0.0005f)) + 0.00235f);
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 80079da:	ee07 3a90 	vmov	s15, r3
 80079de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80079e2:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8007ae0 <calc_res_heat+0x148>
 80079e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80079ea:	ed9f 7a3e 	vldr	s14, [pc, #248]	@ 8007ae4 <calc_res_heat+0x14c>
 80079ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80079f2:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8007ae8 <calc_res_heat+0x150>
 80079f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80079fa:	edc7 7a08 	vstr	s15, [r7, #32]
    var3 = ((float)dev->calib.par_gh3 / (1024.0f));
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8007a04:	ee07 3a90 	vmov	s15, r3
 8007a08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a0c:	eddf 6a37 	vldr	s13, [pc, #220]	@ 8007aec <calc_res_heat+0x154>
 8007a10:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007a14:	edc7 7a07 	vstr	s15, [r7, #28]
    var4 = (var1 * (1.0f + (var2 * (float)temp)));
 8007a18:	89fb      	ldrh	r3, [r7, #14]
 8007a1a:	ee07 3a90 	vmov	s15, r3
 8007a1e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007a22:	edd7 7a08 	vldr	s15, [r7, #32]
 8007a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8007a2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a32:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 8007a36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a3a:	edc7 7a06 	vstr	s15, [r7, #24]
    var5 = (var4 + (var3 * (float)dev->amb_temp));
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	f993 300e 	ldrsb.w	r3, [r3, #14]
 8007a44:	ee07 3a90 	vmov	s15, r3
 8007a48:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8007a4c:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a54:	ed97 7a06 	vldr	s14, [r7, #24]
 8007a58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007a5c:	edc7 7a05 	vstr	s15, [r7, #20]
    res_heat =
        (uint8_t)(3.4f *
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8007a72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8007a76:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 8007a7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a82:	ee27 7a27 	vmul.f32	s14, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	f993 303d 	ldrsb.w	r3, [r3, #61]	@ 0x3d
 8007a8c:	ee07 3a90 	vmov	s15, r3
 8007a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007a94:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8007af0 <calc_res_heat+0x158>
 8007a98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007a9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8007aa0:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007aa4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 8007aa8:	eec6 7a26 	vdiv.f32	s15, s12, s13
                  ((var5 * (4 / (4 + (float)dev->calib.res_heat_range)) *
 8007aac:	ee67 7a27 	vmul.f32	s15, s14, s15
                    (1 / (1 + ((float)dev->calib.res_heat_val * 0.002f)))) -
 8007ab0:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8007ab4:	ee77 7ac7 	vsub.f32	s15, s15, s14
        (uint8_t)(3.4f *
 8007ab8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8007af4 <calc_res_heat+0x15c>
 8007abc:	ee67 7a87 	vmul.f32	s15, s15, s14
    res_heat =
 8007ac0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ac4:	edc7 7a01 	vstr	s15, [r7, #4]
 8007ac8:	793b      	ldrb	r3, [r7, #4]
 8007aca:	74fb      	strb	r3, [r7, #19]
                   25));

    return res_heat;
 8007acc:	7cfb      	ldrb	r3, [r7, #19]
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	372c      	adds	r7, #44	@ 0x2c
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	42440000 	.word	0x42440000
 8007ae0:	47000000 	.word	0x47000000
 8007ae4:	3a03126f 	.word	0x3a03126f
 8007ae8:	3b1a0275 	.word	0x3b1a0275
 8007aec:	44800000 	.word	0x44800000
 8007af0:	3b03126f 	.word	0x3b03126f
 8007af4:	4059999a 	.word	0x4059999a

08007af8 <calc_gas_wait>:

#endif

/* This internal API is used to calculate the gas wait */
static uint8_t calc_gas_wait(uint16_t dur)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]
    uint8_t durval;

    if (dur >= 0xfc0)
 8007b06:	88fb      	ldrh	r3, [r7, #6]
 8007b08:	f5b3 6f7c 	cmp.w	r3, #4032	@ 0xfc0
 8007b0c:	d308      	bcc.n	8007b20 <calc_gas_wait+0x28>
    {
        durval = 0xff; /* Max duration*/
 8007b0e:	23ff      	movs	r3, #255	@ 0xff
 8007b10:	73bb      	strb	r3, [r7, #14]
 8007b12:	e00f      	b.n	8007b34 <calc_gas_wait+0x3c>
    }
    else
    {
        while (dur > 0x3F)
        {
            dur = dur / 4;
 8007b14:	88fb      	ldrh	r3, [r7, #6]
 8007b16:	089b      	lsrs	r3, r3, #2
 8007b18:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	3301      	adds	r3, #1
 8007b1e:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 8007b20:	88fb      	ldrh	r3, [r7, #6]
 8007b22:	2b3f      	cmp	r3, #63	@ 0x3f
 8007b24:	d8f6      	bhi.n	8007b14 <calc_gas_wait+0x1c>
        }

        durval = (uint8_t)(dur + (factor * 64));
 8007b26:	88fb      	ldrh	r3, [r7, #6]
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	019b      	lsls	r3, r3, #6
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	4413      	add	r3, r2
 8007b32:	73bb      	strb	r3, [r7, #14]
    }

    return durval;
 8007b34:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b36:	4618      	mov	r0, r3
 8007b38:	3714      	adds	r7, #20
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b40:	4770      	bx	lr

08007b42 <read_field_data>:

/* This internal API is used to read a single data of the sensor */
static int8_t read_field_data(uint8_t index, struct bme68x_data *data, struct bme68x_dev *dev)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b08e      	sub	sp, #56	@ 0x38
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	4603      	mov	r3, r0
 8007b4a:	60b9      	str	r1, [r7, #8]
 8007b4c:	607a      	str	r2, [r7, #4]
 8007b4e:	73fb      	strb	r3, [r7, #15]
    int8_t rslt = BME68X_OK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t buff[BME68X_LEN_FIELD] = { 0 };
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
 8007b5a:	f107 0314 	add.w	r3, r7, #20
 8007b5e:	2200      	movs	r2, #0
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	605a      	str	r2, [r3, #4]
 8007b64:	609a      	str	r2, [r3, #8]
 8007b66:	731a      	strb	r2, [r3, #12]
    uint8_t gas_range_l, gas_range_h;
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t tries = 5;
 8007b68:	2305      	movs	r3, #5
 8007b6a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    while ((tries) && (rslt == BME68X_OK))
 8007b6e:	e11d      	b.n	8007dac <read_field_data+0x26a>
    {
        rslt = bme68x_get_regs(((uint8_t)(BME68X_REG_FIELD0 + (index * BME68X_LEN_FIELD_OFFSET))),
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	461a      	mov	r2, r3
 8007b74:	0112      	lsls	r2, r2, #4
 8007b76:	4413      	add	r3, r2
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	331d      	adds	r3, #29
 8007b7c:	b2d8      	uxtb	r0, r3
 8007b7e:	f107 0110 	add.w	r1, r7, #16
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2211      	movs	r2, #17
 8007b86:	f7fe ff8f 	bl	8006aa8 <bme68x_get_regs>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               buff,
                               (uint16_t)BME68X_LEN_FIELD,
                               dev);
        if (!data)
 8007b90:	68bb      	ldr	r3, [r7, #8]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d103      	bne.n	8007b9e <read_field_data+0x5c>
        {
            rslt = BME68X_E_NULL_PTR;
 8007b96:	23ff      	movs	r3, #255	@ 0xff
 8007b98:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            break;
 8007b9c:	e10f      	b.n	8007dbe <read_field_data+0x27c>
        }

        data->status = buff[0] & BME68X_NEW_DATA_MSK;
 8007b9e:	7c3b      	ldrb	r3, [r7, #16]
 8007ba0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	701a      	strb	r2, [r3, #0]
        data->gas_index = buff[0] & BME68X_GAS_INDEX_MSK;
 8007baa:	7c3b      	ldrb	r3, [r7, #16]
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	b2da      	uxtb	r2, r3
 8007bb2:	68bb      	ldr	r3, [r7, #8]
 8007bb4:	705a      	strb	r2, [r3, #1]
        data->meas_index = buff[1];
 8007bb6:	7c7a      	ldrb	r2, [r7, #17]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres = (uint32_t)(((uint32_t)buff[2] * 4096) | ((uint32_t)buff[3] * 16) | ((uint32_t)buff[4] / 16));
 8007bbc:	7cbb      	ldrb	r3, [r7, #18]
 8007bbe:	031a      	lsls	r2, r3, #12
 8007bc0:	7cfb      	ldrb	r3, [r7, #19]
 8007bc2:	011b      	lsls	r3, r3, #4
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	7d3a      	ldrb	r2, [r7, #20]
 8007bc8:	0912      	lsrs	r2, r2, #4
 8007bca:	b2d2      	uxtb	r2, r2
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	633b      	str	r3, [r7, #48]	@ 0x30
        adc_temp = (uint32_t)(((uint32_t)buff[5] * 4096) | ((uint32_t)buff[6] * 16) | ((uint32_t)buff[7] / 16));
 8007bd0:	7d7b      	ldrb	r3, [r7, #21]
 8007bd2:	031a      	lsls	r2, r3, #12
 8007bd4:	7dbb      	ldrb	r3, [r7, #22]
 8007bd6:	011b      	lsls	r3, r3, #4
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	7dfa      	ldrb	r2, [r7, #23]
 8007bdc:	0912      	lsrs	r2, r2, #4
 8007bde:	b2d2      	uxtb	r2, r2
 8007be0:	4313      	orrs	r3, r2
 8007be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        adc_hum = (uint16_t)(((uint32_t)buff[8] * 256) | (uint32_t)buff[9]);
 8007be4:	7e3b      	ldrb	r3, [r7, #24]
 8007be6:	021b      	lsls	r3, r3, #8
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	7e7a      	ldrb	r2, [r7, #25]
 8007bec:	4313      	orrs	r3, r2
 8007bee:	857b      	strh	r3, [r7, #42]	@ 0x2a
        adc_gas_res_low = (uint16_t)((uint32_t)buff[13] * 4 | (((uint32_t)buff[14]) / 64));
 8007bf0:	7f7b      	ldrb	r3, [r7, #29]
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	b29b      	uxth	r3, r3
 8007bf6:	7fba      	ldrb	r2, [r7, #30]
 8007bf8:	0992      	lsrs	r2, r2, #6
 8007bfa:	b2d2      	uxtb	r2, r2
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	853b      	strh	r3, [r7, #40]	@ 0x28
        adc_gas_res_high = (uint16_t)((uint32_t)buff[15] * 4 | (((uint32_t)buff[16]) / 64));
 8007c00:	7ffb      	ldrb	r3, [r7, #31]
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	f897 2020 	ldrb.w	r2, [r7, #32]
 8007c0a:	0992      	lsrs	r2, r2, #6
 8007c0c:	b2d2      	uxtb	r2, r2
 8007c0e:	4313      	orrs	r3, r2
 8007c10:	84fb      	strh	r3, [r7, #38]	@ 0x26
        gas_range_l = buff[14] & BME68X_GAS_RANGE_MSK;
 8007c12:	7fbb      	ldrb	r3, [r7, #30]
 8007c14:	f003 030f 	and.w	r3, r3, #15
 8007c18:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        gas_range_h = buff[16] & BME68X_GAS_RANGE_MSK;
 8007c1c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c20:	f003 030f 	and.w	r3, r3, #15
 8007c24:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d11c      	bne.n	8007c6a <read_field_data+0x128>
        {
            data->status |= buff[16] & BME68X_GASM_VALID_MSK;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	781b      	ldrb	r3, [r3, #0]
 8007c34:	b25a      	sxtb	r2, r3
 8007c36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c3a:	b25b      	sxtb	r3, r3
 8007c3c:	f003 0320 	and.w	r3, r3, #32
 8007c40:	b25b      	sxtb	r3, r3
 8007c42:	4313      	orrs	r3, r2
 8007c44:	b25b      	sxtb	r3, r3
 8007c46:	b2da      	uxtb	r2, r3
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	701a      	strb	r2, [r3, #0]
            data->status |= buff[16] & BME68X_HEAT_STAB_MSK;
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	781b      	ldrb	r3, [r3, #0]
 8007c50:	b25a      	sxtb	r2, r3
 8007c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c56:	b25b      	sxtb	r3, r3
 8007c58:	f003 0310 	and.w	r3, r3, #16
 8007c5c:	b25b      	sxtb	r3, r3
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	b25b      	sxtb	r3, r3
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	701a      	strb	r2, [r3, #0]
 8007c68:	e019      	b.n	8007c9e <read_field_data+0x15c>
        }
        else
        {
            data->status |= buff[14] & BME68X_GASM_VALID_MSK;
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	b25a      	sxtb	r2, r3
 8007c70:	7fbb      	ldrb	r3, [r7, #30]
 8007c72:	b25b      	sxtb	r3, r3
 8007c74:	f003 0320 	and.w	r3, r3, #32
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	4313      	orrs	r3, r2
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	b2da      	uxtb	r2, r3
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	701a      	strb	r2, [r3, #0]
            data->status |= buff[14] & BME68X_HEAT_STAB_MSK;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	b25a      	sxtb	r2, r3
 8007c8a:	7fbb      	ldrb	r3, [r7, #30]
 8007c8c:	b25b      	sxtb	r3, r3
 8007c8e:	f003 0310 	and.w	r3, r3, #16
 8007c92:	b25b      	sxtb	r3, r3
 8007c94:	4313      	orrs	r3, r2
 8007c96:	b25b      	sxtb	r3, r3
 8007c98:	b2da      	uxtb	r2, r3
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	701a      	strb	r2, [r3, #0]
        }

        if ((data->status & BME68X_NEW_DATA_MSK) && (rslt == BME68X_OK))
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b25b      	sxtb	r3, r3
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	da70      	bge.n	8007d8a <read_field_data+0x248>
 8007ca8:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d16c      	bne.n	8007d8a <read_field_data+0x248>
        {
            rslt = bme68x_get_regs(BME68X_REG_RES_HEAT0 + data->gas_index, &data->res_heat, 1, dev);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	785b      	ldrb	r3, [r3, #1]
 8007cb4:	335a      	adds	r3, #90	@ 0x5a
 8007cb6:	b2d8      	uxtb	r0, r3
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	1cd9      	adds	r1, r3, #3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	f7fe fef2 	bl	8006aa8 <bme68x_get_regs>
 8007cc4:	4603      	mov	r3, r0
 8007cc6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            if (rslt == BME68X_OK)
 8007cca:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10c      	bne.n	8007cec <read_field_data+0x1aa>
            {
                rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0 + data->gas_index, &data->idac, 1, dev);
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	785b      	ldrb	r3, [r3, #1]
 8007cd6:	3350      	adds	r3, #80	@ 0x50
 8007cd8:	b2d8      	uxtb	r0, r3
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	1d19      	adds	r1, r3, #4
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f7fe fee1 	bl	8006aa8 <bme68x_get_regs>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8007cec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10c      	bne.n	8007d0e <read_field_data+0x1cc>
            {
                rslt = bme68x_get_regs(BME68X_REG_GAS_WAIT0 + data->gas_index, &data->gas_wait, 1, dev);
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	785b      	ldrb	r3, [r3, #1]
 8007cf8:	3364      	adds	r3, #100	@ 0x64
 8007cfa:	b2d8      	uxtb	r0, r3
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	1d59      	adds	r1, r3, #5
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2201      	movs	r2, #1
 8007d04:	f7fe fed0 	bl	8006aa8 <bme68x_get_regs>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            }

            if (rslt == BME68X_OK)
 8007d0e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d139      	bne.n	8007d8a <read_field_data+0x248>
            {
                data->temperature = calc_temperature(adc_temp, dev);
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007d1a:	f7ff facd 	bl	80072b8 <calc_temperature>
 8007d1e:	eef0 7a40 	vmov.f32	s15, s0
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	edc3 7a03 	vstr	s15, [r3, #12]
                data->pressure = calc_pressure(adc_pres, dev);
 8007d28:	6879      	ldr	r1, [r7, #4]
 8007d2a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007d2c:	f7ff fb4a 	bl	80073c4 <calc_pressure>
 8007d30:	eef0 7a40 	vmov.f32	s15, s0
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	edc3 7a04 	vstr	s15, [r3, #16]
                data->humidity = calc_humidity(adc_hum, dev);
 8007d3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007d3c:	6879      	ldr	r1, [r7, #4]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fc82 	bl	8007648 <calc_humidity>
 8007d44:	eef0 7a40 	vmov.f32	s15, s0
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	edc3 7a05 	vstr	s15, [r3, #20]
                if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10c      	bne.n	8007d70 <read_field_data+0x22e>
                {
                    data->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 8007d56:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007d5a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f7ff fde0 	bl	8007924 <calc_gas_resistance_high>
 8007d64:	eef0 7a40 	vmov.f32	s15, s0
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	edc3 7a06 	vstr	s15, [r3, #24]
                else
                {
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
                }

                break;
 8007d6e:	e026      	b.n	8007dbe <read_field_data+0x27c>
                    data->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 8007d70:	f897 1025 	ldrb.w	r1, [r7, #37]	@ 0x25
 8007d74:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007d76:	687a      	ldr	r2, [r7, #4]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7ff fd31 	bl	80077e0 <calc_gas_resistance_low>
 8007d7e:	eef0 7a40 	vmov.f32	s15, s0
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	edc3 7a06 	vstr	s15, [r3, #24]
                break;
 8007d88:	e019      	b.n	8007dbe <read_field_data+0x27c>
            }
        }

        if (rslt == BME68X_OK)
 8007d8a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d107      	bne.n	8007da2 <read_field_data+0x260>
        {
            dev->delay_us(BME68X_PERIOD_POLL, dev->intf_ptr);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	6852      	ldr	r2, [r2, #4]
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8007da0:	4798      	blx	r3
        }

        tries--;
 8007da2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007da6:	3b01      	subs	r3, #1
 8007da8:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    while ((tries) && (rslt == BME68X_OK))
 8007dac:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <read_field_data+0x27c>
 8007db4:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	f43f aed9 	beq.w	8007b70 <read_field_data+0x2e>
    }

    return rslt;
 8007dbe:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3738      	adds	r7, #56	@ 0x38
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <read_all_field_data>:

/* This internal API is used to read all data fields of the sensor */
static int8_t read_all_field_data(struct bme68x_data * const data[], struct bme68x_dev *dev)
{
 8007dca:	b590      	push	{r4, r7, lr}
 8007dcc:	b09d      	sub	sp, #116	@ 0x74
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	6078      	str	r0, [r7, #4]
 8007dd2:	6039      	str	r1, [r7, #0]
    int8_t rslt = BME68X_OK;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    uint8_t buff[BME68X_LEN_FIELD * 3] = { 0 };
 8007dda:	2300      	movs	r3, #0
 8007ddc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dde:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8007de2:	222f      	movs	r2, #47	@ 0x2f
 8007de4:	2100      	movs	r1, #0
 8007de6:	4618      	mov	r0, r3
 8007de8:	f006 fb5d 	bl	800e4a6 <memset>
    uint32_t adc_temp;
    uint32_t adc_pres;
    uint16_t adc_hum;
    uint16_t adc_gas_res_low, adc_gas_res_high;
    uint8_t off;
    uint8_t set_val[30] = { 0 }; /* idac, res_heat, gas_wait */
 8007dec:	2300      	movs	r3, #0
 8007dee:	60bb      	str	r3, [r7, #8]
 8007df0:	f107 030c 	add.w	r3, r7, #12
 8007df4:	2200      	movs	r2, #0
 8007df6:	601a      	str	r2, [r3, #0]
 8007df8:	605a      	str	r2, [r3, #4]
 8007dfa:	609a      	str	r2, [r3, #8]
 8007dfc:	60da      	str	r2, [r3, #12]
 8007dfe:	611a      	str	r2, [r3, #16]
 8007e00:	615a      	str	r2, [r3, #20]
 8007e02:	831a      	strh	r2, [r3, #24]
    uint8_t i;

    if (!data[0] && !data[1] && !data[2])
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d10c      	bne.n	8007e26 <read_all_field_data+0x5c>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	3304      	adds	r3, #4
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d107      	bne.n	8007e26 <read_all_field_data+0x5c>
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	3308      	adds	r3, #8
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d102      	bne.n	8007e26 <read_all_field_data+0x5c>
    {
        rslt = BME68X_E_NULL_PTR;
 8007e20:	23ff      	movs	r3, #255	@ 0xff
 8007e22:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007e26:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d109      	bne.n	8007e42 <read_all_field_data+0x78>
    {
        rslt = bme68x_get_regs(BME68X_REG_FIELD0, buff, (uint32_t) BME68X_LEN_FIELD * 3, dev);
 8007e2e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	2233      	movs	r2, #51	@ 0x33
 8007e36:	201d      	movs	r0, #29
 8007e38:	f7fe fe36 	bl	8006aa8 <bme68x_get_regs>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    if (rslt == BME68X_OK)
 8007e42:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d109      	bne.n	8007e5e <read_all_field_data+0x94>
    {
        rslt = bme68x_get_regs(BME68X_REG_IDAC_HEAT0, set_val, 30, dev);
 8007e4a:	f107 0108 	add.w	r1, r7, #8
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	221e      	movs	r2, #30
 8007e52:	2050      	movs	r0, #80	@ 0x50
 8007e54:	f7fe fe28 	bl	8006aa8 <bme68x_get_regs>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
    }

    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 8007e5e:	2300      	movs	r3, #0
 8007e60:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8007e64:	e1ce      	b.n	8008204 <read_all_field_data+0x43a>
    {
        off = (uint8_t)(i * BME68X_LEN_FIELD);
 8007e66:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	0112      	lsls	r2, r2, #4
 8007e6e:	4413      	add	r3, r2
 8007e70:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        data[i]->status = buff[off] & BME68X_NEW_DATA_MSK;
 8007e74:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007e78:	3370      	adds	r3, #112	@ 0x70
 8007e7a:	443b      	add	r3, r7
 8007e7c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007e80:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	440b      	add	r3, r1
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	701a      	strb	r2, [r3, #0]
        data[i]->gas_index = buff[off] & BME68X_GAS_INDEX_MSK;
 8007e94:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007e98:	3370      	adds	r3, #112	@ 0x70
 8007e9a:	443b      	add	r3, r7
 8007e9c:	f813 2c48 	ldrb.w	r2, [r3, #-72]
 8007ea0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ea4:	009b      	lsls	r3, r3, #2
 8007ea6:	6879      	ldr	r1, [r7, #4]
 8007ea8:	440b      	add	r3, r1
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	f002 020f 	and.w	r2, r2, #15
 8007eb0:	b2d2      	uxtb	r2, r2
 8007eb2:	705a      	strb	r2, [r3, #1]
        data[i]->meas_index = buff[off + 1];
 8007eb4:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007eb8:	1c5a      	adds	r2, r3, #1
 8007eba:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	6879      	ldr	r1, [r7, #4]
 8007ec2:	440b      	add	r3, r1
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3270      	adds	r2, #112	@ 0x70
 8007ec8:	443a      	add	r2, r7
 8007eca:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007ece:	709a      	strb	r2, [r3, #2]

        /* read the raw data from the sensor */
        adc_pres =
            (uint32_t) (((uint32_t) buff[off + 2] * 4096) | ((uint32_t) buff[off + 3] * 16) |
 8007ed0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ed4:	3302      	adds	r3, #2
 8007ed6:	3370      	adds	r3, #112	@ 0x70
 8007ed8:	443b      	add	r3, r7
 8007eda:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007ede:	031a      	lsls	r2, r3, #12
 8007ee0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007ee4:	3303      	adds	r3, #3
 8007ee6:	3370      	adds	r3, #112	@ 0x70
 8007ee8:	443b      	add	r3, r7
 8007eea:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007eee:	011b      	lsls	r3, r3, #4
 8007ef0:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 4] / 16));
 8007ef2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007ef6:	3204      	adds	r2, #4
 8007ef8:	3270      	adds	r2, #112	@ 0x70
 8007efa:	443a      	add	r2, r7
 8007efc:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f00:	0912      	lsrs	r2, r2, #4
 8007f02:	b2d2      	uxtb	r2, r2
        adc_pres =
 8007f04:	4313      	orrs	r3, r2
 8007f06:	66bb      	str	r3, [r7, #104]	@ 0x68
        adc_temp =
            (uint32_t) (((uint32_t) buff[off + 5] * 4096) | ((uint32_t) buff[off + 6] * 16) |
 8007f08:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f0c:	3305      	adds	r3, #5
 8007f0e:	3370      	adds	r3, #112	@ 0x70
 8007f10:	443b      	add	r3, r7
 8007f12:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f16:	031a      	lsls	r2, r3, #12
 8007f18:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f1c:	3306      	adds	r3, #6
 8007f1e:	3370      	adds	r3, #112	@ 0x70
 8007f20:	443b      	add	r3, r7
 8007f22:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f26:	011b      	lsls	r3, r3, #4
 8007f28:	4313      	orrs	r3, r2
                        ((uint32_t) buff[off + 7] / 16));
 8007f2a:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f2e:	3207      	adds	r2, #7
 8007f30:	3270      	adds	r2, #112	@ 0x70
 8007f32:	443a      	add	r2, r7
 8007f34:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f38:	0912      	lsrs	r2, r2, #4
 8007f3a:	b2d2      	uxtb	r2, r2
        adc_temp =
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	667b      	str	r3, [r7, #100]	@ 0x64
        adc_hum = (uint16_t) (((uint32_t) buff[off + 8] * 256) | (uint32_t) buff[off + 9]);
 8007f40:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f44:	3308      	adds	r3, #8
 8007f46:	3370      	adds	r3, #112	@ 0x70
 8007f48:	443b      	add	r3, r7
 8007f4a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f4e:	021b      	lsls	r3, r3, #8
 8007f50:	b29b      	uxth	r3, r3
 8007f52:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f56:	3209      	adds	r2, #9
 8007f58:	3270      	adds	r2, #112	@ 0x70
 8007f5a:	443a      	add	r2, r7
 8007f5c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f60:	4313      	orrs	r3, r2
 8007f62:	f8a7 3062 	strh.w	r3, [r7, #98]	@ 0x62
        adc_gas_res_low = (uint16_t) ((uint32_t) buff[off + 13] * 4 | (((uint32_t) buff[off + 14]) / 64));
 8007f66:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f6a:	330d      	adds	r3, #13
 8007f6c:	3370      	adds	r3, #112	@ 0x70
 8007f6e:	443b      	add	r3, r7
 8007f70:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f74:	009b      	lsls	r3, r3, #2
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007f7c:	320e      	adds	r2, #14
 8007f7e:	3270      	adds	r2, #112	@ 0x70
 8007f80:	443a      	add	r2, r7
 8007f82:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007f86:	0992      	lsrs	r2, r2, #6
 8007f88:	b2d2      	uxtb	r2, r2
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
        adc_gas_res_high = (uint16_t) ((uint32_t) buff[off + 15] * 4 | (((uint32_t) buff[off + 16]) / 64));
 8007f90:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007f94:	330f      	adds	r3, #15
 8007f96:	3370      	adds	r3, #112	@ 0x70
 8007f98:	443b      	add	r3, r7
 8007f9a:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007f9e:	009b      	lsls	r3, r3, #2
 8007fa0:	b29b      	uxth	r3, r3
 8007fa2:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8007fa6:	3210      	adds	r2, #16
 8007fa8:	3270      	adds	r2, #112	@ 0x70
 8007faa:	443a      	add	r2, r7
 8007fac:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8007fb0:	0992      	lsrs	r2, r2, #6
 8007fb2:	b2d2      	uxtb	r2, r2
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
        gas_range_l = buff[off + 14] & BME68X_GAS_RANGE_MSK;
 8007fba:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007fbe:	330e      	adds	r3, #14
 8007fc0:	3370      	adds	r3, #112	@ 0x70
 8007fc2:	443b      	add	r3, r7
 8007fc4:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007fc8:	f003 030f 	and.w	r3, r3, #15
 8007fcc:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
        gas_range_h = buff[off + 16] & BME68X_GAS_RANGE_MSK;
 8007fd0:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8007fd4:	3310      	adds	r3, #16
 8007fd6:	3370      	adds	r3, #112	@ 0x70
 8007fd8:	443b      	add	r3, r7
 8007fda:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8007fde:	f003 030f 	and.w	r3, r3, #15
 8007fe2:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d13a      	bne.n	8008064 <read_all_field_data+0x29a>
        {
            data[i]->status |= buff[off + 16] & BME68X_GASM_VALID_MSK;
 8007fee:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8007ff2:	009b      	lsls	r3, r3, #2
 8007ff4:	687a      	ldr	r2, [r7, #4]
 8007ff6:	4413      	add	r3, r2
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	b25a      	sxtb	r2, r3
 8007ffe:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8008002:	3310      	adds	r3, #16
 8008004:	3370      	adds	r3, #112	@ 0x70
 8008006:	443b      	add	r3, r7
 8008008:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 800800c:	b25b      	sxtb	r3, r3
 800800e:	f003 0320 	and.w	r3, r3, #32
 8008012:	b25b      	sxtb	r3, r3
 8008014:	4313      	orrs	r3, r2
 8008016:	b259      	sxtb	r1, r3
 8008018:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800801c:	009b      	lsls	r3, r3, #2
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4413      	add	r3, r2
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	b2ca      	uxtb	r2, r1
 8008026:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 16] & BME68X_HEAT_STAB_MSK;
 8008028:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	4413      	add	r3, r2
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	b25a      	sxtb	r2, r3
 8008038:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 800803c:	3310      	adds	r3, #16
 800803e:	3370      	adds	r3, #112	@ 0x70
 8008040:	443b      	add	r3, r7
 8008042:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008046:	b25b      	sxtb	r3, r3
 8008048:	f003 0310 	and.w	r3, r3, #16
 800804c:	b25b      	sxtb	r3, r3
 800804e:	4313      	orrs	r3, r2
 8008050:	b259      	sxtb	r1, r3
 8008052:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008056:	009b      	lsls	r3, r3, #2
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	4413      	add	r3, r2
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	b2ca      	uxtb	r2, r1
 8008060:	701a      	strb	r2, [r3, #0]
 8008062:	e039      	b.n	80080d8 <read_all_field_data+0x30e>
        }
        else
        {
            data[i]->status |= buff[off + 14] & BME68X_GASM_VALID_MSK;
 8008064:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	687a      	ldr	r2, [r7, #4]
 800806c:	4413      	add	r3, r2
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	b25a      	sxtb	r2, r3
 8008074:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 8008078:	330e      	adds	r3, #14
 800807a:	3370      	adds	r3, #112	@ 0x70
 800807c:	443b      	add	r3, r7
 800807e:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 8008082:	b25b      	sxtb	r3, r3
 8008084:	f003 0320 	and.w	r3, r3, #32
 8008088:	b25b      	sxtb	r3, r3
 800808a:	4313      	orrs	r3, r2
 800808c:	b259      	sxtb	r1, r3
 800808e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	4413      	add	r3, r2
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	b2ca      	uxtb	r2, r1
 800809c:	701a      	strb	r2, [r3, #0]
            data[i]->status |= buff[off + 14] & BME68X_HEAT_STAB_MSK;
 800809e:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	4413      	add	r3, r2
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	b25a      	sxtb	r2, r3
 80080ae:	f897 306d 	ldrb.w	r3, [r7, #109]	@ 0x6d
 80080b2:	330e      	adds	r3, #14
 80080b4:	3370      	adds	r3, #112	@ 0x70
 80080b6:	443b      	add	r3, r7
 80080b8:	f813 3c48 	ldrb.w	r3, [r3, #-72]
 80080bc:	b25b      	sxtb	r3, r3
 80080be:	f003 0310 	and.w	r3, r3, #16
 80080c2:	b25b      	sxtb	r3, r3
 80080c4:	4313      	orrs	r3, r2
 80080c6:	b259      	sxtb	r1, r3
 80080c8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	4413      	add	r3, r2
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	b2ca      	uxtb	r2, r1
 80080d6:	701a      	strb	r2, [r3, #0]
        }

        data[i]->idac = set_val[data[i]->gas_index];
 80080d8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	687a      	ldr	r2, [r7, #4]
 80080e0:	4413      	add	r3, r2
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	785b      	ldrb	r3, [r3, #1]
 80080e6:	4619      	mov	r1, r3
 80080e8:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	4413      	add	r3, r2
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f101 0270 	add.w	r2, r1, #112	@ 0x70
 80080f8:	443a      	add	r2, r7
 80080fa:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 80080fe:	711a      	strb	r2, [r3, #4]
        data[i]->res_heat = set_val[10 + data[i]->gas_index];
 8008100:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008104:	009b      	lsls	r3, r3, #2
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	4413      	add	r3, r2
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	785b      	ldrb	r3, [r3, #1]
 800810e:	f103 020a 	add.w	r2, r3, #10
 8008112:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	6879      	ldr	r1, [r7, #4]
 800811a:	440b      	add	r3, r1
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3270      	adds	r2, #112	@ 0x70
 8008120:	443a      	add	r2, r7
 8008122:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 8008126:	70da      	strb	r2, [r3, #3]
        data[i]->gas_wait = set_val[20 + data[i]->gas_index];
 8008128:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	4413      	add	r3, r2
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	785b      	ldrb	r3, [r3, #1]
 8008136:	f103 0214 	add.w	r2, r3, #20
 800813a:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800813e:	009b      	lsls	r3, r3, #2
 8008140:	6879      	ldr	r1, [r7, #4]
 8008142:	440b      	add	r3, r1
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	3270      	adds	r2, #112	@ 0x70
 8008148:	443a      	add	r2, r7
 800814a:	f812 2c68 	ldrb.w	r2, [r2, #-104]
 800814e:	715a      	strb	r2, [r3, #5]
        data[i]->temperature = calc_temperature(adc_temp, dev);
 8008150:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	4413      	add	r3, r2
 800815a:	681c      	ldr	r4, [r3, #0]
 800815c:	6839      	ldr	r1, [r7, #0]
 800815e:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8008160:	f7ff f8aa 	bl	80072b8 <calc_temperature>
 8008164:	eef0 7a40 	vmov.f32	s15, s0
 8008168:	edc4 7a03 	vstr	s15, [r4, #12]
        data[i]->pressure = calc_pressure(adc_pres, dev);
 800816c:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	4413      	add	r3, r2
 8008176:	681c      	ldr	r4, [r3, #0]
 8008178:	6839      	ldr	r1, [r7, #0]
 800817a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800817c:	f7ff f922 	bl	80073c4 <calc_pressure>
 8008180:	eef0 7a40 	vmov.f32	s15, s0
 8008184:	edc4 7a04 	vstr	s15, [r4, #16]
        data[i]->humidity = calc_humidity(adc_hum, dev);
 8008188:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	4413      	add	r3, r2
 8008192:	681c      	ldr	r4, [r3, #0]
 8008194:	f8b7 3062 	ldrh.w	r3, [r7, #98]	@ 0x62
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fa54 	bl	8007648 <calc_humidity>
 80081a0:	eef0 7a40 	vmov.f32	s15, s0
 80081a4:	edc4 7a05 	vstr	s15, [r4, #20]
        if (dev->variant_id == BME68X_VARIANT_GAS_HIGH)
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	689b      	ldr	r3, [r3, #8]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d112      	bne.n	80081d6 <read_all_field_data+0x40c>
        {
            data[i]->gas_resistance = calc_gas_resistance_high(adc_gas_res_high, gas_range_h);
 80081b0:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	4413      	add	r3, r2
 80081ba:	681c      	ldr	r4, [r3, #0]
 80081bc:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 80081c0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	@ 0x5e
 80081c4:	4611      	mov	r1, r2
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7ff fbac 	bl	8007924 <calc_gas_resistance_high>
 80081cc:	eef0 7a40 	vmov.f32	s15, s0
 80081d0:	edc4 7a06 	vstr	s15, [r4, #24]
 80081d4:	e011      	b.n	80081fa <read_all_field_data+0x430>
        }
        else
        {
            data[i]->gas_resistance = calc_gas_resistance_low(adc_gas_res_low, gas_range_l, dev);
 80081d6:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80081da:	009b      	lsls	r3, r3, #2
 80081dc:	687a      	ldr	r2, [r7, #4]
 80081de:	4413      	add	r3, r2
 80081e0:	681c      	ldr	r4, [r3, #0]
 80081e2:	f897 105d 	ldrb.w	r1, [r7, #93]	@ 0x5d
 80081e6:	f8b7 3060 	ldrh.w	r3, [r7, #96]	@ 0x60
 80081ea:	683a      	ldr	r2, [r7, #0]
 80081ec:	4618      	mov	r0, r3
 80081ee:	f7ff faf7 	bl	80077e0 <calc_gas_resistance_low>
 80081f2:	eef0 7a40 	vmov.f32	s15, s0
 80081f6:	edc4 7a06 	vstr	s15, [r4, #24]
    for (i = 0; ((i < 3) && (rslt == BME68X_OK)); i++)
 80081fa:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 80081fe:	3301      	adds	r3, #1
 8008200:	f887 306e 	strb.w	r3, [r7, #110]	@ 0x6e
 8008204:	f897 306e 	ldrb.w	r3, [r7, #110]	@ 0x6e
 8008208:	2b02      	cmp	r3, #2
 800820a:	d804      	bhi.n	8008216 <read_all_field_data+0x44c>
 800820c:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
 8008210:	2b00      	cmp	r3, #0
 8008212:	f43f ae28 	beq.w	8007e66 <read_all_field_data+0x9c>
        }
    }

    return rslt;
 8008216:	f997 306f 	ldrsb.w	r3, [r7, #111]	@ 0x6f
}
 800821a:	4618      	mov	r0, r3
 800821c:	3774      	adds	r7, #116	@ 0x74
 800821e:	46bd      	mov	sp, r7
 8008220:	bd90      	pop	{r4, r7, pc}

08008222 <set_mem_page>:

/* This internal API is used to switch between SPI memory pages */
static int8_t set_mem_page(uint8_t reg_addr, struct bme68x_dev *dev)
{
 8008222:	b590      	push	{r4, r7, lr}
 8008224:	b085      	sub	sp, #20
 8008226:	af00      	add	r7, sp, #0
 8008228:	4603      	mov	r3, r0
 800822a:	6039      	str	r1, [r7, #0]
 800822c:	71fb      	strb	r3, [r7, #7]
    int8_t rslt;
    uint8_t reg;
    uint8_t mem_page;

    /* Check for null pointers in the device structure*/
    rslt = null_ptr_check(dev);
 800822e:	6838      	ldr	r0, [r7, #0]
 8008230:	f000 f8b8 	bl	80083a4 <null_ptr_check>
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 8008238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d14f      	bne.n	80082e0 <set_mem_page+0xbe>
    {
        if (reg_addr > 0x7f)
 8008240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008244:	2b00      	cmp	r3, #0
 8008246:	da02      	bge.n	800824e <set_mem_page+0x2c>
        {
            mem_page = BME68X_MEM_PAGE1;
 8008248:	2300      	movs	r3, #0
 800824a:	73bb      	strb	r3, [r7, #14]
 800824c:	e001      	b.n	8008252 <set_mem_page+0x30>
        }
        else
        {
            mem_page = BME68X_MEM_PAGE0;
 800824e:	2310      	movs	r3, #16
 8008250:	73bb      	strb	r3, [r7, #14]
        }

        if (mem_page != dev->mem_page)
 8008252:	683b      	ldr	r3, [r7, #0]
 8008254:	7b5b      	ldrb	r3, [r3, #13]
 8008256:	7bba      	ldrb	r2, [r7, #14]
 8008258:	429a      	cmp	r2, r3
 800825a:	d041      	beq.n	80082e0 <set_mem_page+0xbe>
        {
            dev->mem_page = mem_page;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	7bba      	ldrb	r2, [r7, #14]
 8008260:	735a      	strb	r2, [r3, #13]
            dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	685b      	ldr	r3, [r3, #4]
 800826a:	f107 010d 	add.w	r1, r7, #13
 800826e:	2201      	movs	r2, #1
 8008270:	20f3      	movs	r0, #243	@ 0xf3
 8008272:	47a0      	blx	r4
 8008274:	4603      	mov	r3, r0
 8008276:	461a      	mov	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            if (dev->intf_rslt != 0)
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <set_mem_page+0x6a>
            {
                rslt = BME68X_E_COM_FAIL;
 8008288:	23fe      	movs	r3, #254	@ 0xfe
 800828a:	73fb      	strb	r3, [r7, #15]
            }

            if (rslt == BME68X_OK)
 800828c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d125      	bne.n	80082e0 <set_mem_page+0xbe>
            {
                reg = reg & (~BME68X_MEM_PAGE_MSK);
 8008294:	7b7b      	ldrb	r3, [r7, #13]
 8008296:	f023 0310 	bic.w	r3, r3, #16
 800829a:	b2db      	uxtb	r3, r3
 800829c:	737b      	strb	r3, [r7, #13]
                reg = reg | (dev->mem_page & BME68X_MEM_PAGE_MSK);
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	7b5b      	ldrb	r3, [r3, #13]
 80082a2:	b25b      	sxtb	r3, r3
 80082a4:	f003 0310 	and.w	r3, r3, #16
 80082a8:	b25a      	sxtb	r2, r3
 80082aa:	7b7b      	ldrb	r3, [r7, #13]
 80082ac:	b25b      	sxtb	r3, r3
 80082ae:	4313      	orrs	r3, r2
 80082b0:	b25b      	sxtb	r3, r3
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	737b      	strb	r3, [r7, #13]
                dev->intf_rslt = dev->write(BME68X_REG_MEM_PAGE & BME68X_SPI_WR_MSK, &reg, 1, dev->intf_ptr);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	685b      	ldr	r3, [r3, #4]
 80082be:	f107 010d 	add.w	r1, r7, #13
 80082c2:	2201      	movs	r2, #1
 80082c4:	2073      	movs	r0, #115	@ 0x73
 80082c6:	47a0      	blx	r4
 80082c8:	4603      	mov	r3, r0
 80082ca:	461a      	mov	r2, r3
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
                if (dev->intf_rslt != 0)
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d001      	beq.n	80082e0 <set_mem_page+0xbe>
                {
                    rslt = BME68X_E_COM_FAIL;
 80082dc:	23fe      	movs	r3, #254	@ 0xfe
 80082de:	73fb      	strb	r3, [r7, #15]
                }
            }
        }
    }

    return rslt;
 80082e0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3714      	adds	r7, #20
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd90      	pop	{r4, r7, pc}

080082ec <get_mem_page>:

/* This internal API is used to get the current SPI memory page */
static int8_t get_mem_page(struct bme68x_dev *dev)
{
 80082ec:	b590      	push	{r4, r7, lr}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg;

    /* Check for null pointer in the device structure*/
    rslt = null_ptr_check(dev);
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 f855 	bl	80083a4 <null_ptr_check>
 80082fa:	4603      	mov	r3, r0
 80082fc:	73fb      	strb	r3, [r7, #15]
    if (rslt == BME68X_OK)
 80082fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d11b      	bne.n	800833e <get_mem_page+0x52>
    {
        dev->intf_rslt = dev->read(BME68X_REG_MEM_PAGE | BME68X_SPI_RD_MSK, &reg, 1, dev->intf_ptr);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f107 010e 	add.w	r1, r7, #14
 8008312:	2201      	movs	r2, #1
 8008314:	20f3      	movs	r0, #243	@ 0xf3
 8008316:	47a0      	blx	r4
 8008318:	4603      	mov	r3, r0
 800831a:	461a      	mov	r2, r3
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (dev->intf_rslt != 0)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f993 304c 	ldrsb.w	r3, [r3, #76]	@ 0x4c
 8008328:	2b00      	cmp	r3, #0
 800832a:	d002      	beq.n	8008332 <get_mem_page+0x46>
        {
            rslt = BME68X_E_COM_FAIL;
 800832c:	23fe      	movs	r3, #254	@ 0xfe
 800832e:	73fb      	strb	r3, [r7, #15]
 8008330:	e005      	b.n	800833e <get_mem_page+0x52>
        }
        else
        {
            dev->mem_page = reg & BME68X_MEM_PAGE_MSK;
 8008332:	7bbb      	ldrb	r3, [r7, #14]
 8008334:	f003 0310 	and.w	r3, r3, #16
 8008338:	b2da      	uxtb	r2, r3
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	735a      	strb	r2, [r3, #13]
        }
    }

    return rslt;
 800833e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3714      	adds	r7, #20
 8008346:	46bd      	mov	sp, r7
 8008348:	bd90      	pop	{r4, r7, pc}

0800834a <boundary_check>:

/* This internal API is used to limit the max value of a parameter */
static int8_t boundary_check(uint8_t *value, uint8_t max, struct bme68x_dev *dev)
{
 800834a:	b580      	push	{r7, lr}
 800834c:	b086      	sub	sp, #24
 800834e:	af00      	add	r7, sp, #0
 8008350:	60f8      	str	r0, [r7, #12]
 8008352:	460b      	mov	r3, r1
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	72fb      	strb	r3, [r7, #11]
    int8_t rslt;

    rslt = null_ptr_check(dev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f823 	bl	80083a4 <null_ptr_check>
 800835e:	4603      	mov	r3, r0
 8008360:	75fb      	strb	r3, [r7, #23]
    if ((value != NULL) && (rslt == BME68X_OK))
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d015      	beq.n	8008394 <boundary_check+0x4a>
 8008368:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d111      	bne.n	8008394 <boundary_check+0x4a>
    {
        /* Check if value is above maximum value */
        if (*value > max)
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	7afa      	ldrb	r2, [r7, #11]
 8008376:	429a      	cmp	r2, r3
 8008378:	d20e      	bcs.n	8008398 <boundary_check+0x4e>
        {
            /* Auto correct the invalid value to maximum value */
            *value = max;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	7afa      	ldrb	r2, [r7, #11]
 800837e:	701a      	strb	r2, [r3, #0]
            dev->info_msg |= BME68X_I_PARAM_CORR;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	b2da      	uxtb	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
        if (*value > max)
 8008392:	e001      	b.n	8008398 <boundary_check+0x4e>
        }
    }
    else
    {
        rslt = BME68X_E_NULL_PTR;
 8008394:	23ff      	movs	r3, #255	@ 0xff
 8008396:	75fb      	strb	r3, [r7, #23]
    }

    return rslt;
 8008398:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3718      	adds	r7, #24
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <null_ptr_check>:

/* This internal API is used to check the bme68x_dev for null pointers */
static int8_t null_ptr_check(const struct bme68x_dev *dev)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
    int8_t rslt = BME68X_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]

    if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_us == NULL))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d00b      	beq.n	80083ce <null_ptr_check+0x2a>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d007      	beq.n	80083ce <null_ptr_check+0x2a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <null_ptr_check+0x2a>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <null_ptr_check+0x2e>
    {
        /* Device structure pointer is not valid */
        rslt = BME68X_E_NULL_PTR;
 80083ce:	23ff      	movs	r3, #255	@ 0xff
 80083d0:	73fb      	strb	r3, [r7, #15]
    }

    return rslt;
 80083d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3714      	adds	r7, #20
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <set_conf>:

/* This internal API is used to set heater configurations */
static int8_t set_conf(const struct bme68x_heatr_conf *conf, uint8_t op_mode, uint8_t *nb_conv, struct bme68x_dev *dev)
{
 80083e4:	b590      	push	{r4, r7, lr}
 80083e6:	b093      	sub	sp, #76	@ 0x4c
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	60f8      	str	r0, [r7, #12]
 80083ec:	607a      	str	r2, [r7, #4]
 80083ee:	603b      	str	r3, [r7, #0]
 80083f0:	460b      	mov	r3, r1
 80083f2:	72fb      	strb	r3, [r7, #11]
    int8_t rslt = BME68X_OK;
 80083f4:	2300      	movs	r3, #0
 80083f6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t i;
    uint8_t shared_dur;
    uint8_t write_len = 0;
 80083fa:	2300      	movs	r3, #0
 80083fc:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    uint8_t heater_dur_shared_addr = BME68X_REG_SHD_HEATR_DUR;
 8008400:	236e      	movs	r3, #110	@ 0x6e
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
    uint8_t rh_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008406:	4aa1      	ldr	r2, [pc, #644]	@ (800868c <set_conf+0x2a8>)
 8008408:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800840c:	ca07      	ldmia	r2, {r0, r1, r2}
 800840e:	c303      	stmia	r3!, {r0, r1}
 8008410:	801a      	strh	r2, [r3, #0]
    uint8_t rh_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 8008412:	4a9e      	ldr	r2, [pc, #632]	@ (800868c <set_conf+0x2a8>)
 8008414:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008418:	ca07      	ldmia	r2, {r0, r1, r2}
 800841a:	c303      	stmia	r3!, {r0, r1}
 800841c:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_addr[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800841e:	4a9b      	ldr	r2, [pc, #620]	@ (800868c <set_conf+0x2a8>)
 8008420:	f107 0320 	add.w	r3, r7, #32
 8008424:	ca07      	ldmia	r2, {r0, r1, r2}
 8008426:	c303      	stmia	r3!, {r0, r1}
 8008428:	801a      	strh	r2, [r3, #0]
    uint8_t gw_reg_data[10] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
 800842a:	4a98      	ldr	r2, [pc, #608]	@ (800868c <set_conf+0x2a8>)
 800842c:	f107 0314 	add.w	r3, r7, #20
 8008430:	ca07      	ldmia	r2, {r0, r1, r2}
 8008432:	c303      	stmia	r3!, {r0, r1}
 8008434:	801a      	strh	r2, [r3, #0]

    switch (op_mode)
 8008436:	7afb      	ldrb	r3, [r7, #11]
 8008438:	2b03      	cmp	r3, #3
 800843a:	d024      	beq.n	8008486 <set_conf+0xa2>
 800843c:	2b03      	cmp	r3, #3
 800843e:	f300 80f9 	bgt.w	8008634 <set_conf+0x250>
 8008442:	2b01      	cmp	r3, #1
 8008444:	d002      	beq.n	800844c <set_conf+0x68>
 8008446:	2b02      	cmp	r3, #2
 8008448:	d07c      	beq.n	8008544 <set_conf+0x160>
 800844a:	e0f3      	b.n	8008634 <set_conf+0x250>
    {
        case BME68X_FORCED_MODE:
            rh_reg_addr[0] = BME68X_REG_RES_HEAT0;
 800844c:	235a      	movs	r3, #90	@ 0x5a
 800844e:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            rh_reg_data[0] = calc_res_heat(conf->heatr_temp, dev);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	885b      	ldrh	r3, [r3, #2]
 8008456:	6839      	ldr	r1, [r7, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f7ff fa9d 	bl	8007998 <calc_res_heat>
 800845e:	4603      	mov	r3, r0
 8008460:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
            gw_reg_addr[0] = BME68X_REG_GAS_WAIT0;
 8008464:	2364      	movs	r3, #100	@ 0x64
 8008466:	f887 3020 	strb.w	r3, [r7, #32]
            gw_reg_data[0] = calc_gas_wait(conf->heatr_dur);
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	889b      	ldrh	r3, [r3, #4]
 800846e:	4618      	mov	r0, r3
 8008470:	f7ff fb42 	bl	8007af8 <calc_gas_wait>
 8008474:	4603      	mov	r3, r0
 8008476:	753b      	strb	r3, [r7, #20]
            (*nb_conv) = 0;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	701a      	strb	r2, [r3, #0]
            write_len = 1;
 800847e:	2301      	movs	r3, #1
 8008480:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8008484:	e0db      	b.n	800863e <set_conf+0x25a>
        case BME68X_SEQUENTIAL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d003      	beq.n	8008496 <set_conf+0xb2>
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d103      	bne.n	800849e <set_conf+0xba>
            {
                rslt = BME68X_E_NULL_PTR;
 8008496:	23ff      	movs	r3, #255	@ 0xff
 8008498:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 800849c:	e0cf      	b.n	800863e <set_conf+0x25a>
            }

            for (i = 0; i < conf->profile_len; i++)
 800849e:	2300      	movs	r3, #0
 80084a0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80084a4:	e03f      	b.n	8008526 <set_conf+0x142>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 80084a6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084aa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80084ae:	325a      	adds	r2, #90	@ 0x5a
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	3348      	adds	r3, #72	@ 0x48
 80084b4:	443b      	add	r3, r7
 80084b6:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	689a      	ldr	r2, [r3, #8]
 80084be:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084c2:	005b      	lsls	r3, r3, #1
 80084c4:	4413      	add	r3, r2
 80084c6:	881b      	ldrh	r3, [r3, #0]
 80084c8:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 80084cc:	6839      	ldr	r1, [r7, #0]
 80084ce:	4618      	mov	r0, r3
 80084d0:	f7ff fa62 	bl	8007998 <calc_res_heat>
 80084d4:	4603      	mov	r3, r0
 80084d6:	461a      	mov	r2, r3
 80084d8:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80084dc:	443b      	add	r3, r7
 80084de:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80084e2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084e6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80084ea:	3264      	adds	r2, #100	@ 0x64
 80084ec:	b2d2      	uxtb	r2, r2
 80084ee:	3348      	adds	r3, #72	@ 0x48
 80084f0:	443b      	add	r3, r7
 80084f2:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = calc_gas_wait(conf->heatr_dur_prof[i]);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	68da      	ldr	r2, [r3, #12]
 80084fa:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80084fe:	005b      	lsls	r3, r3, #1
 8008500:	4413      	add	r3, r2
 8008502:	881b      	ldrh	r3, [r3, #0]
 8008504:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8008508:	4618      	mov	r0, r3
 800850a:	f7ff faf5 	bl	8007af8 <calc_gas_wait>
 800850e:	4603      	mov	r3, r0
 8008510:	461a      	mov	r2, r3
 8008512:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 8008516:	443b      	add	r3, r7
 8008518:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 800851c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008520:	3301      	adds	r3, #1
 8008522:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7c1b      	ldrb	r3, [r3, #16]
 800852a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800852e:	429a      	cmp	r2, r3
 8008530:	d3b9      	bcc.n	80084a6 <set_conf+0xc2>
            }

            (*nb_conv) = conf->profile_len;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	7c1a      	ldrb	r2, [r3, #16]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	7c1b      	ldrb	r3, [r3, #16]
 800853e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            break;
 8008542:	e07c      	b.n	800863e <set_conf+0x25a>
        case BME68X_PARALLEL_MODE:
            if ((!conf->heatr_dur_prof) || (!conf->heatr_temp_prof))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	68db      	ldr	r3, [r3, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d003      	beq.n	8008554 <set_conf+0x170>
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d103      	bne.n	800855c <set_conf+0x178>
            {
                rslt = BME68X_E_NULL_PTR;
 8008554:	23ff      	movs	r3, #255	@ 0xff
 8008556:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                break;
 800855a:	e070      	b.n	800863e <set_conf+0x25a>
            }

            if (conf->shared_heatr_dur == 0)
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	8a5b      	ldrh	r3, [r3, #18]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d102      	bne.n	800856a <set_conf+0x186>
            {
                rslt = BME68X_W_DEFINE_SHD_HEATR_DUR;
 8008564:	2303      	movs	r3, #3
 8008566:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            for (i = 0; i < conf->profile_len; i++)
 800856a:	2300      	movs	r3, #0
 800856c:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 8008570:	e03a      	b.n	80085e8 <set_conf+0x204>
            {
                rh_reg_addr[i] = BME68X_REG_RES_HEAT0 + i;
 8008572:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8008576:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800857a:	325a      	adds	r2, #90	@ 0x5a
 800857c:	b2d2      	uxtb	r2, r2
 800857e:	3348      	adds	r3, #72	@ 0x48
 8008580:	443b      	add	r3, r7
 8008582:	f803 2c10 	strb.w	r2, [r3, #-16]
                rh_reg_data[i] = calc_res_heat(conf->heatr_temp_prof[i], dev);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689a      	ldr	r2, [r3, #8]
 800858a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800858e:	005b      	lsls	r3, r3, #1
 8008590:	4413      	add	r3, r2
 8008592:	881b      	ldrh	r3, [r3, #0]
 8008594:	f897 4046 	ldrb.w	r4, [r7, #70]	@ 0x46
 8008598:	6839      	ldr	r1, [r7, #0]
 800859a:	4618      	mov	r0, r3
 800859c:	f7ff f9fc 	bl	8007998 <calc_res_heat>
 80085a0:	4603      	mov	r3, r0
 80085a2:	461a      	mov	r2, r3
 80085a4:	f104 0348 	add.w	r3, r4, #72	@ 0x48
 80085a8:	443b      	add	r3, r7
 80085aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
                gw_reg_addr[i] = BME68X_REG_GAS_WAIT0 + i;
 80085ae:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085b2:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80085b6:	3264      	adds	r2, #100	@ 0x64
 80085b8:	b2d2      	uxtb	r2, r2
 80085ba:	3348      	adds	r3, #72	@ 0x48
 80085bc:	443b      	add	r3, r7
 80085be:	f803 2c28 	strb.w	r2, [r3, #-40]
                gw_reg_data[i] = (uint8_t) conf->heatr_dur_prof[i];
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085ca:	005b      	lsls	r3, r3, #1
 80085cc:	4413      	add	r3, r2
 80085ce:	881a      	ldrh	r2, [r3, #0]
 80085d0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085d4:	b2d2      	uxtb	r2, r2
 80085d6:	3348      	adds	r3, #72	@ 0x48
 80085d8:	443b      	add	r3, r7
 80085da:	f803 2c34 	strb.w	r2, [r3, #-52]
            for (i = 0; i < conf->profile_len; i++)
 80085de:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80085e2:	3301      	adds	r3, #1
 80085e4:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	7c1b      	ldrb	r3, [r3, #16]
 80085ec:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d3be      	bcc.n	8008572 <set_conf+0x18e>
            }

            (*nb_conv) = conf->profile_len;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	7c1a      	ldrb	r2, [r3, #16]
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	701a      	strb	r2, [r3, #0]
            write_len = conf->profile_len;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	7c1b      	ldrb	r3, [r3, #16]
 8008600:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
            shared_dur = calc_heatr_dur_shared(conf->shared_heatr_dur);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	8a5b      	ldrh	r3, [r3, #18]
 8008608:	4618      	mov	r0, r3
 800860a:	f000 f841 	bl	8008690 <calc_heatr_dur_shared>
 800860e:	4603      	mov	r3, r0
 8008610:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            if (rslt == BME68X_OK)
 8008614:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008618:	2b00      	cmp	r3, #0
 800861a:	d10f      	bne.n	800863c <set_conf+0x258>
            {
                rslt = bme68x_set_regs(&heater_dur_shared_addr, &shared_dur, 1, dev);
 800861c:	f107 0144 	add.w	r1, r7, #68	@ 0x44
 8008620:	f107 0043 	add.w	r0, r7, #67	@ 0x43
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	2201      	movs	r2, #1
 8008628:	f7fe f9ae 	bl	8006988 <bme68x_set_regs>
 800862c:	4603      	mov	r3, r0
 800862e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            }

            break;
 8008632:	e003      	b.n	800863c <set_conf+0x258>
        default:
            rslt = BME68X_W_DEFINE_OP_MODE;
 8008634:	2301      	movs	r3, #1
 8008636:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800863a:	e000      	b.n	800863e <set_conf+0x25a>
            break;
 800863c:	bf00      	nop
    }

    if (rslt == BME68X_OK)
 800863e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10b      	bne.n	800865e <set_conf+0x27a>
    {
        rslt = bme68x_set_regs(rh_reg_addr, rh_reg_data, write_len, dev);
 8008646:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800864a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800864e:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	f7fe f998 	bl	8006988 <bme68x_set_regs>
 8008658:	4603      	mov	r3, r0
 800865a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    if (rslt == BME68X_OK)
 800865e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
 8008662:	2b00      	cmp	r3, #0
 8008664:	d10b      	bne.n	800867e <set_conf+0x29a>
    {
        rslt = bme68x_set_regs(gw_reg_addr, gw_reg_data, write_len, dev);
 8008666:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800866a:	f107 0114 	add.w	r1, r7, #20
 800866e:	f107 0020 	add.w	r0, r7, #32
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	f7fe f988 	bl	8006988 <bme68x_set_regs>
 8008678:	4603      	mov	r3, r0
 800867a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }

    return rslt;
 800867e:	f997 3047 	ldrsb.w	r3, [r7, #71]	@ 0x47
}
 8008682:	4618      	mov	r0, r3
 8008684:	374c      	adds	r7, #76	@ 0x4c
 8008686:	46bd      	mov	sp, r7
 8008688:	bd90      	pop	{r4, r7, pc}
 800868a:	bf00      	nop
 800868c:	0800f890 	.word	0x0800f890

08008690 <calc_heatr_dur_shared>:

/* This internal API is used to calculate the register value for
 * shared heater duration */
static uint8_t calc_heatr_dur_shared(uint16_t dur)
{
 8008690:	b480      	push	{r7}
 8008692:	b085      	sub	sp, #20
 8008694:	af00      	add	r7, sp, #0
 8008696:	4603      	mov	r3, r0
 8008698:	80fb      	strh	r3, [r7, #6]
    uint8_t factor = 0;
 800869a:	2300      	movs	r3, #0
 800869c:	73fb      	strb	r3, [r7, #15]
    uint8_t heatdurval;

    if (dur >= 0x783)
 800869e:	88fb      	ldrh	r3, [r7, #6]
 80086a0:	f240 7282 	movw	r2, #1922	@ 0x782
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d902      	bls.n	80086ae <calc_heatr_dur_shared+0x1e>
    {
        heatdurval = 0xff; /* Max duration */
 80086a8:	23ff      	movs	r3, #255	@ 0xff
 80086aa:	73bb      	strb	r3, [r7, #14]
 80086ac:	e01d      	b.n	80086ea <calc_heatr_dur_shared+0x5a>
    }
    else
    {
        /* Step size of 0.477ms */
        dur = (uint16_t)(((uint32_t)dur * 1000) / 477);
 80086ae:	88fb      	ldrh	r3, [r7, #6]
 80086b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80086b4:	fb03 f202 	mul.w	r2, r3, r2
 80086b8:	4b0f      	ldr	r3, [pc, #60]	@ (80086f8 <calc_heatr_dur_shared+0x68>)
 80086ba:	fba3 1302 	umull	r1, r3, r3, r2
 80086be:	1ad2      	subs	r2, r2, r3
 80086c0:	0852      	lsrs	r2, r2, #1
 80086c2:	4413      	add	r3, r2
 80086c4:	0a1b      	lsrs	r3, r3, #8
 80086c6:	80fb      	strh	r3, [r7, #6]
        while (dur > 0x3F)
 80086c8:	e005      	b.n	80086d6 <calc_heatr_dur_shared+0x46>
        {
            dur = dur >> 2;
 80086ca:	88fb      	ldrh	r3, [r7, #6]
 80086cc:	089b      	lsrs	r3, r3, #2
 80086ce:	80fb      	strh	r3, [r7, #6]
            factor += 1;
 80086d0:	7bfb      	ldrb	r3, [r7, #15]
 80086d2:	3301      	adds	r3, #1
 80086d4:	73fb      	strb	r3, [r7, #15]
        while (dur > 0x3F)
 80086d6:	88fb      	ldrh	r3, [r7, #6]
 80086d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80086da:	d8f6      	bhi.n	80086ca <calc_heatr_dur_shared+0x3a>
        }

        heatdurval = (uint8_t)(dur + (factor * 64));
 80086dc:	88fb      	ldrh	r3, [r7, #6]
 80086de:	b2da      	uxtb	r2, r3
 80086e0:	7bfb      	ldrb	r3, [r7, #15]
 80086e2:	019b      	lsls	r3, r3, #6
 80086e4:	b2db      	uxtb	r3, r3
 80086e6:	4413      	add	r3, r2
 80086e8:	73bb      	strb	r3, [r7, #14]
    }

    return heatdurval;
 80086ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	12c8b89f 	.word	0x12c8b89f

080086fc <sort_sensor_data>:

/* This internal API is used sort the sensor data */
static void sort_sensor_data(uint8_t low_index, uint8_t high_index, struct bme68x_data *field[])
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	4603      	mov	r3, r0
 8008704:	603a      	str	r2, [r7, #0]
 8008706:	71fb      	strb	r3, [r7, #7]
 8008708:	460b      	mov	r3, r1
 800870a:	71bb      	strb	r3, [r7, #6]
    int16_t meas_index1;
    int16_t meas_index2;

    meas_index1 = (int16_t)field[low_index]->meas_index;
 800870c:	79fb      	ldrb	r3, [r7, #7]
 800870e:	009b      	lsls	r3, r3, #2
 8008710:	683a      	ldr	r2, [r7, #0]
 8008712:	4413      	add	r3, r2
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	789b      	ldrb	r3, [r3, #2]
 8008718:	81fb      	strh	r3, [r7, #14]
    meas_index2 = (int16_t)field[high_index]->meas_index;
 800871a:	79bb      	ldrb	r3, [r7, #6]
 800871c:	009b      	lsls	r3, r3, #2
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	4413      	add	r3, r2
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	789b      	ldrb	r3, [r3, #2]
 8008726:	81bb      	strh	r3, [r7, #12]
    if ((field[low_index]->status & BME68X_NEW_DATA_MSK) && (field[high_index]->status & BME68X_NEW_DATA_MSK))
 8008728:	79fb      	ldrb	r3, [r7, #7]
 800872a:	009b      	lsls	r3, r3, #2
 800872c:	683a      	ldr	r2, [r7, #0]
 800872e:	4413      	add	r3, r2
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	781b      	ldrb	r3, [r3, #0]
 8008734:	b25b      	sxtb	r3, r3
 8008736:	2b00      	cmp	r3, #0
 8008738:	da21      	bge.n	800877e <sort_sensor_data+0x82>
 800873a:	79bb      	ldrb	r3, [r7, #6]
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	683a      	ldr	r2, [r7, #0]
 8008740:	4413      	add	r3, r2
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	b25b      	sxtb	r3, r3
 8008748:	2b00      	cmp	r3, #0
 800874a:	da18      	bge.n	800877e <sort_sensor_data+0x82>
    {
        int16_t diff = meas_index2 - meas_index1;
 800874c:	89ba      	ldrh	r2, [r7, #12]
 800874e:	89fb      	ldrh	r3, [r7, #14]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	b29b      	uxth	r3, r3
 8008754:	817b      	strh	r3, [r7, #10]
        if (((diff > -3) && (diff < 0)) || (diff > 2))
 8008756:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800875a:	f113 0f02 	cmn.w	r3, #2
 800875e:	db03      	blt.n	8008768 <sort_sensor_data+0x6c>
 8008760:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8008764:	2b00      	cmp	r3, #0
 8008766:	db03      	blt.n	8008770 <sort_sensor_data+0x74>
 8008768:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800876c:	2b02      	cmp	r3, #2
 800876e:	dd16      	ble.n	800879e <sort_sensor_data+0xa2>
        {
            swap_fields(low_index, high_index, field);
 8008770:	79b9      	ldrb	r1, [r7, #6]
 8008772:	79fb      	ldrb	r3, [r7, #7]
 8008774:	683a      	ldr	r2, [r7, #0]
 8008776:	4618      	mov	r0, r3
 8008778:	f000 f816 	bl	80087a8 <swap_fields>
    {
 800877c:	e00f      	b.n	800879e <sort_sensor_data+0xa2>
        }
    }
    else if (field[high_index]->status & BME68X_NEW_DATA_MSK)
 800877e:	79bb      	ldrb	r3, [r7, #6]
 8008780:	009b      	lsls	r3, r3, #2
 8008782:	683a      	ldr	r2, [r7, #0]
 8008784:	4413      	add	r3, r2
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	781b      	ldrb	r3, [r3, #0]
 800878a:	b25b      	sxtb	r3, r3
 800878c:	2b00      	cmp	r3, #0
 800878e:	da07      	bge.n	80087a0 <sort_sensor_data+0xa4>
    {
        swap_fields(low_index, high_index, field);
 8008790:	79b9      	ldrb	r1, [r7, #6]
 8008792:	79fb      	ldrb	r3, [r7, #7]
 8008794:	683a      	ldr	r2, [r7, #0]
 8008796:	4618      	mov	r0, r3
 8008798:	f000 f806 	bl	80087a8 <swap_fields>
     *         - diff > 2, case 4.
     *
     *     Here the limits of -3 and 2 derive from the fact that there are 3 fields.
     *     These values decrease or increase respectively if the number of fields increases.
     */
}
 800879c:	e000      	b.n	80087a0 <sort_sensor_data+0xa4>
    {
 800879e:	bf00      	nop
}
 80087a0:	bf00      	nop
 80087a2:	3710      	adds	r7, #16
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <swap_fields>:

/* This internal API is used sort the sensor data */
static void swap_fields(uint8_t index1, uint8_t index2, struct bme68x_data *field[])
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	603a      	str	r2, [r7, #0]
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	460b      	mov	r3, r1
 80087b6:	71bb      	strb	r3, [r7, #6]
    struct bme68x_data *temp;

    temp = field[index1];
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	683a      	ldr	r2, [r7, #0]
 80087be:	4413      	add	r3, r2
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]
    field[index1] = field[index2];
 80087c4:	79bb      	ldrb	r3, [r7, #6]
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	683a      	ldr	r2, [r7, #0]
 80087ca:	441a      	add	r2, r3
 80087cc:	79fb      	ldrb	r3, [r7, #7]
 80087ce:	009b      	lsls	r3, r3, #2
 80087d0:	6839      	ldr	r1, [r7, #0]
 80087d2:	440b      	add	r3, r1
 80087d4:	6812      	ldr	r2, [r2, #0]
 80087d6:	601a      	str	r2, [r3, #0]
    field[index2] = temp;
 80087d8:	79bb      	ldrb	r3, [r7, #6]
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	683a      	ldr	r2, [r7, #0]
 80087de:	4413      	add	r3, r2
 80087e0:	68fa      	ldr	r2, [r7, #12]
 80087e2:	601a      	str	r2, [r3, #0]
}
 80087e4:	bf00      	nop
 80087e6:	3714      	adds	r7, #20
 80087e8:	46bd      	mov	sp, r7
 80087ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ee:	4770      	bx	lr

080087f0 <get_calib_data>:
    return rslt;
}

/* This internal API is used to read the calibration coefficients */
static int8_t get_calib_data(struct bme68x_dev *dev)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b08e      	sub	sp, #56	@ 0x38
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t coeff_array[BME68X_LEN_COEFF_ALL];

    rslt = bme68x_get_regs(BME68X_REG_COEFF1, coeff_array, BME68X_LEN_COEFF1, dev);
 80087f8:	f107 010c 	add.w	r1, r7, #12
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2217      	movs	r2, #23
 8008800:	208a      	movs	r0, #138	@ 0x8a
 8008802:	f7fe f951 	bl	8006aa8 <bme68x_get_regs>
 8008806:	4603      	mov	r3, r0
 8008808:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (rslt == BME68X_OK)
 800880c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <get_calib_data+0x3c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF2, &coeff_array[BME68X_LEN_COEFF1], BME68X_LEN_COEFF2, dev);
 8008814:	f107 030c 	add.w	r3, r7, #12
 8008818:	f103 0117 	add.w	r1, r3, #23
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	220e      	movs	r2, #14
 8008820:	20e1      	movs	r0, #225	@ 0xe1
 8008822:	f7fe f941 	bl	8006aa8 <bme68x_get_regs>
 8008826:	4603      	mov	r3, r0
 8008828:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    }

    if (rslt == BME68X_OK)
 800882c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10b      	bne.n	800884c <get_calib_data+0x5c>
    {
        rslt = bme68x_get_regs(BME68X_REG_COEFF3,
 8008834:	f107 030c 	add.w	r3, r7, #12
 8008838:	f103 0125 	add.w	r1, r3, #37	@ 0x25
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2205      	movs	r2, #5
 8008840:	2000      	movs	r0, #0
 8008842:	f7fe f931 	bl	8006aa8 <bme68x_get_regs>
 8008846:	4603      	mov	r3, r0
 8008848:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                               &coeff_array[BME68X_LEN_COEFF1 + BME68X_LEN_COEFF2],
                               BME68X_LEN_COEFF3,
                               dev);
    }

    if (rslt == BME68X_OK)
 800884c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8008850:	2b00      	cmp	r3, #0
 8008852:	f040 80cb 	bne.w	80089ec <get_calib_data+0x1fc>
    {
        /* Temperature related coefficients */
        dev->calib.par_t1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T1_MSB], coeff_array[BME68X_IDX_T1_LSB]));
 8008856:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800885a:	021b      	lsls	r3, r3, #8
 800885c:	b21a      	sxth	r2, r3
 800885e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008862:	b21b      	sxth	r3, r3
 8008864:	4313      	orrs	r3, r2
 8008866:	b21b      	sxth	r3, r3
 8008868:	b29a      	uxth	r2, r3
        dev->calib.par_t1 =
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	83da      	strh	r2, [r3, #30]
        dev->calib.par_t2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_T2_MSB], coeff_array[BME68X_IDX_T2_LSB]));
 800886e:	7b7b      	ldrb	r3, [r7, #13]
 8008870:	021b      	lsls	r3, r3, #8
 8008872:	b21a      	sxth	r2, r3
 8008874:	7b3b      	ldrb	r3, [r7, #12]
 8008876:	b21b      	sxth	r3, r3
 8008878:	4313      	orrs	r3, r2
 800887a:	b21a      	sxth	r2, r3
        dev->calib.par_t2 =
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	841a      	strh	r2, [r3, #32]
        dev->calib.par_t3 = (int8_t)(coeff_array[BME68X_IDX_T3]);
 8008880:	7bbb      	ldrb	r3, [r7, #14]
 8008882:	b25a      	sxtb	r2, r3
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

        /* Pressure related coefficients */
        dev->calib.par_p1 =
            (uint16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P1_MSB], coeff_array[BME68X_IDX_P1_LSB]));
 800888a:	7c7b      	ldrb	r3, [r7, #17]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	b21a      	sxth	r2, r3
 8008890:	7c3b      	ldrb	r3, [r7, #16]
 8008892:	b21b      	sxth	r3, r3
 8008894:	4313      	orrs	r3, r2
 8008896:	b21b      	sxth	r3, r3
 8008898:	b29a      	uxth	r2, r3
        dev->calib.par_p1 =
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	849a      	strh	r2, [r3, #36]	@ 0x24
        dev->calib.par_p2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P2_MSB], coeff_array[BME68X_IDX_P2_LSB]));
 800889e:	7cfb      	ldrb	r3, [r7, #19]
 80088a0:	021b      	lsls	r3, r3, #8
 80088a2:	b21a      	sxth	r2, r3
 80088a4:	7cbb      	ldrb	r3, [r7, #18]
 80088a6:	b21b      	sxth	r3, r3
 80088a8:	4313      	orrs	r3, r2
 80088aa:	b21a      	sxth	r2, r3
        dev->calib.par_p2 =
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	84da      	strh	r2, [r3, #38]	@ 0x26
        dev->calib.par_p3 = (int8_t)coeff_array[BME68X_IDX_P3];
 80088b0:	7d3b      	ldrb	r3, [r7, #20]
 80088b2:	b25a      	sxtb	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        dev->calib.par_p4 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P4_MSB], coeff_array[BME68X_IDX_P4_LSB]));
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	b21a      	sxth	r2, r3
 80088c0:	7dbb      	ldrb	r3, [r7, #22]
 80088c2:	b21b      	sxth	r3, r3
 80088c4:	4313      	orrs	r3, r2
 80088c6:	b21a      	sxth	r2, r3
        dev->calib.par_p4 =
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
        dev->calib.par_p5 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P5_MSB], coeff_array[BME68X_IDX_P5_LSB]));
 80088cc:	7e7b      	ldrb	r3, [r7, #25]
 80088ce:	021b      	lsls	r3, r3, #8
 80088d0:	b21a      	sxth	r2, r3
 80088d2:	7e3b      	ldrb	r3, [r7, #24]
 80088d4:	b21b      	sxth	r3, r3
 80088d6:	4313      	orrs	r3, r2
 80088d8:	b21a      	sxth	r2, r3
        dev->calib.par_p5 =
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	859a      	strh	r2, [r3, #44]	@ 0x2c
        dev->calib.par_p6 = (int8_t)(coeff_array[BME68X_IDX_P6]);
 80088de:	7efb      	ldrb	r3, [r7, #27]
 80088e0:	b25a      	sxtb	r2, r3
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
        dev->calib.par_p7 = (int8_t)(coeff_array[BME68X_IDX_P7]);
 80088e8:	7ebb      	ldrb	r3, [r7, #26]
 80088ea:	b25a      	sxtb	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        dev->calib.par_p8 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P8_MSB], coeff_array[BME68X_IDX_P8_LSB]));
 80088f2:	7ffb      	ldrb	r3, [r7, #31]
 80088f4:	021b      	lsls	r3, r3, #8
 80088f6:	b21a      	sxth	r2, r3
 80088f8:	7fbb      	ldrb	r3, [r7, #30]
 80088fa:	b21b      	sxth	r3, r3
 80088fc:	4313      	orrs	r3, r2
 80088fe:	b21a      	sxth	r2, r3
        dev->calib.par_p8 =
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	861a      	strh	r2, [r3, #48]	@ 0x30
        dev->calib.par_p9 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_P9_MSB], coeff_array[BME68X_IDX_P9_LSB]));
 8008904:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008908:	021b      	lsls	r3, r3, #8
 800890a:	b21a      	sxth	r2, r3
 800890c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008910:	b21b      	sxth	r3, r3
 8008912:	4313      	orrs	r3, r2
 8008914:	b21a      	sxth	r2, r3
        dev->calib.par_p9 =
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	865a      	strh	r2, [r3, #50]	@ 0x32
        dev->calib.par_p10 = (uint8_t)(coeff_array[BME68X_IDX_P10]);
 800891a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        /* Humidity related coefficients */
        dev->calib.par_h1 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008924:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008928:	011b      	lsls	r3, r3, #4
 800892a:	b21a      	sxth	r2, r3
                       (coeff_array[BME68X_IDX_H1_LSB] & BME68X_BIT_H1_DATA_MSK));
 800892c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008930:	b21b      	sxth	r3, r3
 8008932:	f003 030f 	and.w	r3, r3, #15
 8008936:	b21b      	sxth	r3, r3
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H1_MSB] << 4) |
 8008938:	4313      	orrs	r3, r2
 800893a:	b21b      	sxth	r3, r3
 800893c:	b29a      	uxth	r2, r3
        dev->calib.par_h1 =
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	821a      	strh	r2, [r3, #16]
        dev->calib.par_h2 =
            (uint16_t)(((uint16_t)coeff_array[BME68X_IDX_H2_MSB] << 4) | ((coeff_array[BME68X_IDX_H2_LSB]) >> 4));
 8008942:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008946:	011b      	lsls	r3, r3, #4
 8008948:	b21a      	sxth	r2, r3
 800894a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800894e:	091b      	lsrs	r3, r3, #4
 8008950:	b2db      	uxtb	r3, r3
 8008952:	b21b      	sxth	r3, r3
 8008954:	4313      	orrs	r3, r2
 8008956:	b21b      	sxth	r3, r3
 8008958:	b29a      	uxth	r2, r3
        dev->calib.par_h2 =
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	825a      	strh	r2, [r3, #18]
        dev->calib.par_h3 = (int8_t)coeff_array[BME68X_IDX_H3];
 800895e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008962:	b25a      	sxtb	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	751a      	strb	r2, [r3, #20]
        dev->calib.par_h4 = (int8_t)coeff_array[BME68X_IDX_H4];
 8008968:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800896c:	b25a      	sxtb	r2, r3
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	755a      	strb	r2, [r3, #21]
        dev->calib.par_h5 = (int8_t)coeff_array[BME68X_IDX_H5];
 8008972:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008976:	b25a      	sxtb	r2, r3
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	759a      	strb	r2, [r3, #22]
        dev->calib.par_h6 = (uint8_t)coeff_array[BME68X_IDX_H6];
 800897c:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	75da      	strb	r2, [r3, #23]
        dev->calib.par_h7 = (int8_t)coeff_array[BME68X_IDX_H7];
 8008984:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008988:	b25a      	sxtb	r2, r3
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	761a      	strb	r2, [r3, #24]

        /* Gas heater related coefficients */
        dev->calib.par_gh1 = (int8_t)coeff_array[BME68X_IDX_GH1];
 800898e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008992:	b25a      	sxtb	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	765a      	strb	r2, [r3, #25]
        dev->calib.par_gh2 =
            (int16_t)(BME68X_CONCAT_BYTES(coeff_array[BME68X_IDX_GH2_MSB], coeff_array[BME68X_IDX_GH2_LSB]));
 8008998:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800899c:	021b      	lsls	r3, r3, #8
 800899e:	b21a      	sxth	r2, r3
 80089a0:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80089a4:	b21b      	sxth	r3, r3
 80089a6:	4313      	orrs	r3, r2
 80089a8:	b21a      	sxth	r2, r3
        dev->calib.par_gh2 =
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	835a      	strh	r2, [r3, #26]
        dev->calib.par_gh3 = (int8_t)coeff_array[BME68X_IDX_GH3];
 80089ae:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80089b2:	b25a      	sxtb	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	771a      	strb	r2, [r3, #28]

        /* Other coefficients */
        dev->calib.res_heat_range = ((coeff_array[BME68X_IDX_RES_HEAT_RANGE] & BME68X_RHRANGE_MSK) / 16);
 80089b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80089bc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	da00      	bge.n	80089c6 <get_calib_data+0x1d6>
 80089c4:	330f      	adds	r3, #15
 80089c6:	111b      	asrs	r3, r3, #4
 80089c8:	b2da      	uxtb	r2, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        dev->calib.res_heat_val = (int8_t)coeff_array[BME68X_IDX_RES_HEAT_VAL];
 80089d0:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 80089d4:	b25a      	sxtb	r2, r3
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        dev->calib.range_sw_err = ((int8_t)(coeff_array[BME68X_IDX_RANGE_SW_ERR] & BME68X_RSERROR_MSK)) / 16;
 80089dc:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80089e0:	b25b      	sxtb	r3, r3
 80089e2:	111b      	asrs	r3, r3, #4
 80089e4:	b25a      	sxtb	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }

    return rslt;
 80089ec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3738      	adds	r7, #56	@ 0x38
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bd80      	pop	{r7, pc}

080089f8 <read_variant_id>:

/* This internal API is used to read variant ID information from the register */
static int8_t read_variant_id(struct bme68x_dev *dev)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b084      	sub	sp, #16
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
    int8_t rslt;
    uint8_t reg_data = 0;
 8008a00:	2300      	movs	r3, #0
 8008a02:	73bb      	strb	r3, [r7, #14]

    /* Read variant ID information register */
    rslt = bme68x_get_regs(BME68X_REG_VARIANT_ID, &reg_data, 1, dev);
 8008a04:	f107 010e 	add.w	r1, r7, #14
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	20f0      	movs	r0, #240	@ 0xf0
 8008a0e:	f7fe f84b 	bl	8006aa8 <bme68x_get_regs>
 8008a12:	4603      	mov	r3, r0
 8008a14:	73fb      	strb	r3, [r7, #15]

    if (rslt == BME68X_OK)
 8008a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d103      	bne.n	8008a26 <read_variant_id+0x2e>
    {
        dev->variant_id = reg_data;
 8008a1e:	7bbb      	ldrb	r3, [r7, #14]
 8008a20:	461a      	mov	r2, r3
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	609a      	str	r2, [r3, #8]
    }

    return rslt;
 8008a26:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	3710      	adds	r7, #16
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	bd80      	pop	{r7, pc}
	...

08008a34 <bme68x_start>:
int8_t getgasreference_count = 0;
float gas_lower_limit = 5000;   // Bad air quality limit
float gas_upper_limit = 50000;  // Good air quality limit

/* Complete init. function. */
int8_t bme68x_start(struct bme68x_data *dataPtr, I2C_HandleTypeDef *handler) {
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b082      	sub	sp, #8
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]

	// I2C handler copy
	memcpy(&BME68x_I2C_Handler, handler, sizeof(*handler));
 8008a3e:	2254      	movs	r2, #84	@ 0x54
 8008a40:	6839      	ldr	r1, [r7, #0]
 8008a42:	481e      	ldr	r0, [pc, #120]	@ (8008abc <bme68x_start+0x88>)
 8008a44:	f005 fdab 	bl	800e59e <memcpy>

	// Init.
	bme68x_interface_init(&bme, BME68X_I2C_INTF);
 8008a48:	2101      	movs	r1, #1
 8008a4a:	481d      	ldr	r0, [pc, #116]	@ (8008ac0 <bme68x_start+0x8c>)
 8008a4c:	f000 f8e8 	bl	8008c20 <bme68x_interface_init>
	bme68x_init(&bme);
 8008a50:	481b      	ldr	r0, [pc, #108]	@ (8008ac0 <bme68x_start+0x8c>)
 8008a52:	f7fd ff65 	bl	8006920 <bme68x_init>

	// Init. for data variable
	BME68x_DATA = dataPtr;
 8008a56:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac4 <bme68x_start+0x90>)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6013      	str	r3, [r2, #0]

	// Configuration
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	conf.filter = BME68X_FILTER_SIZE_3;
 8008a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8008ac8 <bme68x_start+0x94>)
 8008a5e:	2202      	movs	r2, #2
 8008a60:	70da      	strb	r2, [r3, #3]
	conf.odr = BME68X_ODR_NONE;
 8008a62:	4b19      	ldr	r3, [pc, #100]	@ (8008ac8 <bme68x_start+0x94>)
 8008a64:	2208      	movs	r2, #8
 8008a66:	711a      	strb	r2, [r3, #4]
	conf.os_hum = BME68X_OS_2X;
 8008a68:	4b17      	ldr	r3, [pc, #92]	@ (8008ac8 <bme68x_start+0x94>)
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	701a      	strb	r2, [r3, #0]
	conf.os_pres = BME68X_OS_4X;
 8008a6e:	4b16      	ldr	r3, [pc, #88]	@ (8008ac8 <bme68x_start+0x94>)
 8008a70:	2203      	movs	r2, #3
 8008a72:	709a      	strb	r2, [r3, #2]
	conf.os_temp = BME68X_OS_8X;
 8008a74:	4b14      	ldr	r3, [pc, #80]	@ (8008ac8 <bme68x_start+0x94>)
 8008a76:	2204      	movs	r2, #4
 8008a78:	705a      	strb	r2, [r3, #1]
	bme68x_set_conf(&conf, &bme);
 8008a7a:	4911      	ldr	r1, [pc, #68]	@ (8008ac0 <bme68x_start+0x8c>)
 8008a7c:	4812      	ldr	r0, [pc, #72]	@ (8008ac8 <bme68x_start+0x94>)
 8008a7e:	f7fe f89b 	bl	8006bb8 <bme68x_set_conf>

	// Heat conf.
	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	heatr_conf.enable = BME68X_ENABLE;
 8008a82:	4b12      	ldr	r3, [pc, #72]	@ (8008acc <bme68x_start+0x98>)
 8008a84:	2201      	movs	r2, #1
 8008a86:	701a      	strb	r2, [r3, #0]
	heatr_conf.heatr_temp = 320;
 8008a88:	4b10      	ldr	r3, [pc, #64]	@ (8008acc <bme68x_start+0x98>)
 8008a8a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8008a8e:	805a      	strh	r2, [r3, #2]
	heatr_conf.heatr_dur = 150;
 8008a90:	4b0e      	ldr	r3, [pc, #56]	@ (8008acc <bme68x_start+0x98>)
 8008a92:	2296      	movs	r2, #150	@ 0x96
 8008a94:	809a      	strh	r2, [r3, #4]
	rslt = bme68x_set_heatr_conf(BME68X_FORCED_MODE, &heatr_conf, &bme);
 8008a96:	4a0a      	ldr	r2, [pc, #40]	@ (8008ac0 <bme68x_start+0x8c>)
 8008a98:	490c      	ldr	r1, [pc, #48]	@ (8008acc <bme68x_start+0x98>)
 8008a9a:	2001      	movs	r0, #1
 8008a9c:	f7fe fb84 	bl	80071a8 <bme68x_set_heatr_conf>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ad0 <bme68x_start+0x9c>)
 8008aa6:	701a      	strb	r2, [r3, #0]

	// Gather gas reference for the IAQ calculation
	bme68x_GetGasReference();
 8008aa8:	f000 f904 	bl	8008cb4 <bme68x_GetGasReference>

	return rslt;
 8008aac:	4b08      	ldr	r3, [pc, #32]	@ (8008ad0 <bme68x_start+0x9c>)
 8008aae:	f993 3000 	ldrsb.w	r3, [r3]
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3708      	adds	r7, #8
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
 8008aba:	bf00      	nop
 8008abc:	200005b8 	.word	0x200005b8
 8008ac0:	2000060c 	.word	0x2000060c
 8008ac4:	2000065c 	.word	0x2000065c
 8008ac8:	20000664 	.word	0x20000664
 8008acc:	2000066c 	.word	0x2000066c
 8008ad0:	20000660 	.word	0x20000660

08008ad4 <bme68x_single_measure>:

/* Force mode measurement. */
int8_t bme68x_single_measure(struct bme68x_data *dataPtr) {
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b082      	sub	sp, #8
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]

	bme68x_set_op_mode(BME68X_FORCED_MODE, &bme);
 8008adc:	4916      	ldr	r1, [pc, #88]	@ (8008b38 <bme68x_single_measure+0x64>)
 8008ade:	2001      	movs	r0, #1
 8008ae0:	f7fe f96e 	bl	8006dc0 <bme68x_set_op_mode>

	/* Calculate delay period in microseconds */
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8008ae4:	4a14      	ldr	r2, [pc, #80]	@ (8008b38 <bme68x_single_measure+0x64>)
 8008ae6:	4915      	ldr	r1, [pc, #84]	@ (8008b3c <bme68x_single_measure+0x68>)
 8008ae8:	2001      	movs	r0, #1
 8008aea:	f7fe f9eb 	bl	8006ec4 <bme68x_get_meas_dur>
 8008aee:	4603      	mov	r3, r0
			+ (heatr_conf.heatr_dur * 1000);
 8008af0:	4a13      	ldr	r2, [pc, #76]	@ (8008b40 <bme68x_single_measure+0x6c>)
 8008af2:	8892      	ldrh	r2, [r2, #4]
 8008af4:	4611      	mov	r1, r2
 8008af6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8008afa:	fb01 f202 	mul.w	r2, r1, r2
 8008afe:	4413      	add	r3, r2
	del_period = bme68x_get_meas_dur(BME68X_FORCED_MODE, &conf, &bme)
 8008b00:	4a10      	ldr	r2, [pc, #64]	@ (8008b44 <bme68x_single_measure+0x70>)
 8008b02:	6013      	str	r3, [r2, #0]
	bme.delay_us(del_period, bme.intf_ptr);
 8008b04:	4b0c      	ldr	r3, [pc, #48]	@ (8008b38 <bme68x_single_measure+0x64>)
 8008b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b08:	4a0e      	ldr	r2, [pc, #56]	@ (8008b44 <bme68x_single_measure+0x70>)
 8008b0a:	6812      	ldr	r2, [r2, #0]
 8008b0c:	490a      	ldr	r1, [pc, #40]	@ (8008b38 <bme68x_single_measure+0x64>)
 8008b0e:	6849      	ldr	r1, [r1, #4]
 8008b10:	4610      	mov	r0, r2
 8008b12:	4798      	blx	r3

	/* Check if rslt == BME68X_OK, report or handle if otherwise */
	rslt = bme68x_get_data(BME68X_FORCED_MODE, dataPtr, &n_fields, &bme);
 8008b14:	4b08      	ldr	r3, [pc, #32]	@ (8008b38 <bme68x_single_measure+0x64>)
 8008b16:	4a0c      	ldr	r2, [pc, #48]	@ (8008b48 <bme68x_single_measure+0x74>)
 8008b18:	6879      	ldr	r1, [r7, #4]
 8008b1a:	2001      	movs	r0, #1
 8008b1c:	f7fe fa46 	bl	8006fac <bme68x_get_data>
 8008b20:	4603      	mov	r3, r0
 8008b22:	461a      	mov	r2, r3
 8008b24:	4b09      	ldr	r3, [pc, #36]	@ (8008b4c <bme68x_single_measure+0x78>)
 8008b26:	701a      	strb	r2, [r3, #0]

	return rslt;
 8008b28:	4b08      	ldr	r3, [pc, #32]	@ (8008b4c <bme68x_single_measure+0x78>)
 8008b2a:	f993 3000 	ldrsb.w	r3, [r3]
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	3708      	adds	r7, #8
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd80      	pop	{r7, pc}
 8008b36:	bf00      	nop
 8008b38:	2000060c 	.word	0x2000060c
 8008b3c:	20000664 	.word	0x20000664
 8008b40:	2000066c 	.word	0x2000066c
 8008b44:	20000680 	.word	0x20000680
 8008b48:	20000684 	.word	0x20000684
 8008b4c:	20000660 	.word	0x20000660

08008b50 <bme68x_i2c_write>:

/* Necessary functions. */
// I2C write function.
BME68X_INTF_RET_TYPE bme68x_i2c_write(uint8_t reg_addr, const uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b08a      	sub	sp, #40	@ 0x28
 8008b54:	af04      	add	r7, sp, #16
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	607a      	str	r2, [r7, #4]
 8008b5a:	603b      	str	r3, [r7, #0]
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8008b60:	683b      	ldr	r3, [r7, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Write(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), reg_addr, 1,
 8008b66:	7dfb      	ldrb	r3, [r7, #23]
 8008b68:	b29b      	uxth	r3, r3
 8008b6a:	005b      	lsls	r3, r3, #1
 8008b6c:	b299      	uxth	r1, r3
 8008b6e:	7bfb      	ldrb	r3, [r7, #15]
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	b29b      	uxth	r3, r3
 8008b76:	200f      	movs	r0, #15
 8008b78:	9002      	str	r0, [sp, #8]
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	2301      	movs	r3, #1
 8008b82:	4806      	ldr	r0, [pc, #24]	@ (8008b9c <bme68x_i2c_write+0x4c>)
 8008b84:	f001 ff4c 	bl	800aa20 <HAL_I2C_Mem_Write>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d101      	bne.n	8008b92 <bme68x_i2c_write+0x42>
			(uint8_t*) reg_data, len, 15) == HAL_OK)
		return 0;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	e000      	b.n	8008b94 <bme68x_i2c_write+0x44>

	return 1;
 8008b92:	2301      	movs	r3, #1
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3718      	adds	r7, #24
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	200005b8 	.word	0x200005b8

08008ba0 <bme68x_i2c_read>:

// I2C read function.
BME68X_INTF_RET_TYPE bme68x_i2c_read(uint8_t reg_addr, uint8_t *reg_data,
		uint32_t len, void *intf_ptr) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b08a      	sub	sp, #40	@ 0x28
 8008ba4:	af04      	add	r7, sp, #16
 8008ba6:	60b9      	str	r1, [r7, #8]
 8008ba8:	607a      	str	r2, [r7, #4]
 8008baa:	603b      	str	r3, [r7, #0]
 8008bac:	4603      	mov	r3, r0
 8008bae:	73fb      	strb	r3, [r7, #15]
	uint8_t dev_addr = *(uint8_t*) intf_ptr;
 8008bb0:	683b      	ldr	r3, [r7, #0]
 8008bb2:	781b      	ldrb	r3, [r3, #0]
 8008bb4:	75fb      	strb	r3, [r7, #23]

	if (HAL_I2C_Mem_Read(&BME68x_I2C_Handler, (uint16_t) ((dev_addr << 1) | 0x1), reg_addr,
 8008bb6:	7dfb      	ldrb	r3, [r7, #23]
 8008bb8:	005b      	lsls	r3, r3, #1
 8008bba:	b21b      	sxth	r3, r3
 8008bbc:	f043 0301 	orr.w	r3, r3, #1
 8008bc0:	b21b      	sxth	r3, r3
 8008bc2:	b299      	uxth	r1, r3
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
 8008bc6:	b29a      	uxth	r2, r3
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	b29b      	uxth	r3, r3
 8008bcc:	200f      	movs	r0, #15
 8008bce:	9002      	str	r0, [sp, #8]
 8008bd0:	9301      	str	r3, [sp, #4]
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	9300      	str	r3, [sp, #0]
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	4806      	ldr	r0, [pc, #24]	@ (8008bf4 <bme68x_i2c_read+0x54>)
 8008bda:	f002 f835 	bl	800ac48 <HAL_I2C_Mem_Read>
 8008bde:	4603      	mov	r3, r0
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <bme68x_i2c_read+0x48>
			1, reg_data, len, 15) == HAL_OK)
		return 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	e000      	b.n	8008bea <bme68x_i2c_read+0x4a>

	return 1;
 8008be8:	2301      	movs	r3, #1
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	200005b8 	.word	0x200005b8

08008bf8 <bme68x_delay_us>:

// BME68x delay function
void bme68x_delay_us(uint32_t period, void *intf_ptr) {
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
 8008c00:	6039      	str	r1, [r7, #0]
	HAL_Delay(period / 1000);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	4a05      	ldr	r2, [pc, #20]	@ (8008c1c <bme68x_delay_us+0x24>)
 8008c06:	fba2 2303 	umull	r2, r3, r2, r3
 8008c0a:	099b      	lsrs	r3, r3, #6
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	f000 fac1 	bl	8009194 <HAL_Delay>
}
 8008c12:	bf00      	nop
 8008c14:	3708      	adds	r7, #8
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	10624dd3 	.word	0x10624dd3

08008c20 <bme68x_interface_init>:

// BME68x interface function
int8_t bme68x_interface_init(struct bme68x_dev *bme, uint8_t intf) {
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	460b      	mov	r3, r1
 8008c2a:	70fb      	strb	r3, [r7, #3]
	int8_t rslt = BME68X_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	73fb      	strb	r3, [r7, #15]

	if (bme != NULL) {
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d02c      	beq.n	8008c90 <bme68x_interface_init+0x70>

		// Check for the device on the I2C line
		if (HAL_I2C_IsDeviceReady(&BME68x_I2C_Handler, (uint16_t) (dev_addr << 1), 5, 5)
 8008c36:	4b1a      	ldr	r3, [pc, #104]	@ (8008ca0 <bme68x_interface_init+0x80>)
 8008c38:	781b      	ldrb	r3, [r3, #0]
 8008c3a:	005b      	lsls	r3, r3, #1
 8008c3c:	b299      	uxth	r1, r3
 8008c3e:	2305      	movs	r3, #5
 8008c40:	2205      	movs	r2, #5
 8008c42:	4818      	ldr	r0, [pc, #96]	@ (8008ca4 <bme68x_interface_init+0x84>)
 8008c44:	f002 f91a 	bl	800ae7c <HAL_I2C_IsDeviceReady>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d105      	bne.n	8008c5a <bme68x_interface_init+0x3a>
				== HAL_OK) {
			// Device found at the I2C line.
			rslt = 0;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	73fb      	strb	r3, [r7, #15]
			rslt = -2; // Communication error.
			return rslt;
		}

		/* Bus configuration : I2C */
		if (intf == BME68X_I2C_INTF) {
 8008c52:	78fb      	ldrb	r3, [r7, #3]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d118      	bne.n	8008c8a <bme68x_interface_init+0x6a>
 8008c58:	e004      	b.n	8008c64 <bme68x_interface_init+0x44>
			rslt = -2; // Communication error.
 8008c5a:	23fe      	movs	r3, #254	@ 0xfe
 8008c5c:	73fb      	strb	r3, [r7, #15]
			return rslt;
 8008c5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008c62:	e019      	b.n	8008c98 <bme68x_interface_init+0x78>
			bme->read = bme68x_i2c_read;
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a10      	ldr	r2, [pc, #64]	@ (8008ca8 <bme68x_interface_init+0x88>)
 8008c68:	641a      	str	r2, [r3, #64]	@ 0x40
			bme->write = bme68x_i2c_write;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a0f      	ldr	r2, [pc, #60]	@ (8008cac <bme68x_interface_init+0x8c>)
 8008c6e:	645a      	str	r2, [r3, #68]	@ 0x44
			bme->intf = BME68X_I2C_INTF;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	731a      	strb	r2, [r3, #12]
		} else {
			return -2;
		}

		bme->delay_us = bme68x_delay_us;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a0d      	ldr	r2, [pc, #52]	@ (8008cb0 <bme68x_interface_init+0x90>)
 8008c7a:	649a      	str	r2, [r3, #72]	@ 0x48
		bme->intf_ptr = &dev_addr;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a08      	ldr	r2, [pc, #32]	@ (8008ca0 <bme68x_interface_init+0x80>)
 8008c80:	605a      	str	r2, [r3, #4]
		bme->amb_temp = 30; /* The ambient temperature in deg C is used for defining the heater temperature */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	221e      	movs	r2, #30
 8008c86:	739a      	strb	r2, [r3, #14]
 8008c88:	e004      	b.n	8008c94 <bme68x_interface_init+0x74>
			return -2;
 8008c8a:	f06f 0301 	mvn.w	r3, #1
 8008c8e:	e003      	b.n	8008c98 <bme68x_interface_init+0x78>
	} else {
		rslt = BME68X_E_NULL_PTR;
 8008c90:	23ff      	movs	r3, #255	@ 0xff
 8008c92:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8008c94:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3710      	adds	r7, #16
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	2000004c 	.word	0x2000004c
 8008ca4:	200005b8 	.word	0x200005b8
 8008ca8:	08008ba1 	.word	0x08008ba1
 8008cac:	08008b51 	.word	0x08008b51
 8008cb0:	08008bf9 	.word	0x08008bf9

08008cb4 <bme68x_GetGasReference>:
 FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 See more at http://www.dsbird.org.uk
*/

/* IAQ functions */
void bme68x_GetGasReference() {
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b082      	sub	sp, #8
 8008cb8:	af00      	add	r7, sp, #0
	// Now run the sensor for a burn-in period, then use combination of relative humidity and gas resistance to estimate indoor air quality as a percentage.

	int readings = 10;
 8008cba:	230a      	movs	r3, #10
 8008cbc:	603b      	str	r3, [r7, #0]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	607b      	str	r3, [r7, #4]
 8008cc2:	e013      	b.n	8008cec <bme68x_GetGasReference+0x38>
		bme68x_single_measure(BME68x_DATA);
 8008cc4:	4b14      	ldr	r3, [pc, #80]	@ (8008d18 <bme68x_GetGasReference+0x64>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	4618      	mov	r0, r3
 8008cca:	f7ff ff03 	bl	8008ad4 <bme68x_single_measure>
		gas_reference += BME68x_DATA->gas_resistance;
 8008cce:	4b12      	ldr	r3, [pc, #72]	@ (8008d18 <bme68x_GetGasReference+0x64>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	ed93 7a06 	vldr	s14, [r3, #24]
 8008cd6:	4b11      	ldr	r3, [pc, #68]	@ (8008d1c <bme68x_GetGasReference+0x68>)
 8008cd8:	edd3 7a00 	vldr	s15, [r3]
 8008cdc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008ce0:	4b0e      	ldr	r3, [pc, #56]	@ (8008d1c <bme68x_GetGasReference+0x68>)
 8008ce2:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 1; i <= readings; i++) { // read gas for 10 x 0.150mS = 1.5secs
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	3301      	adds	r3, #1
 8008cea:	607b      	str	r3, [r7, #4]
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	dde7      	ble.n	8008cc4 <bme68x_GetGasReference+0x10>
	}
	gas_reference = gas_reference / readings;
 8008cf4:	4b09      	ldr	r3, [pc, #36]	@ (8008d1c <bme68x_GetGasReference+0x68>)
 8008cf6:	edd3 6a00 	vldr	s13, [r3]
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	ee07 3a90 	vmov	s15, r3
 8008d00:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008d04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008d08:	4b04      	ldr	r3, [pc, #16]	@ (8008d1c <bme68x_GetGasReference+0x68>)
 8008d0a:	edc3 7a00 	vstr	s15, [r3]

}
 8008d0e:	bf00      	nop
 8008d10:	3708      	adds	r7, #8
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	2000065c 	.word	0x2000065c
 8008d1c:	20000050 	.word	0x20000050

08008d20 <bme68x_GetHumidityScore>:

//Calculate humidity contribution to IAQ index
int8_t bme68x_GetHumidityScore() {
 8008d20:	b5b0      	push	{r4, r5, r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af00      	add	r7, sp, #0

	if (BME68x_DATA->humidity >= 38 && BME68x_DATA->humidity <= 42) // Humidity +/-5% around optimum
 8008d26:	4b52      	ldr	r3, [pc, #328]	@ (8008e70 <bme68x_GetHumidityScore+0x150>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d2e:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8008e74 <bme68x_GetHumidityScore+0x154>
 8008d32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d3a:	db0e      	blt.n	8008d5a <bme68x_GetHumidityScore+0x3a>
 8008d3c:	4b4c      	ldr	r3, [pc, #304]	@ (8008e70 <bme68x_GetHumidityScore+0x150>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d44:	ed9f 7a4c 	vldr	s14, [pc, #304]	@ 8008e78 <bme68x_GetHumidityScore+0x158>
 8008d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d50:	d803      	bhi.n	8008d5a <bme68x_GetHumidityScore+0x3a>
		humidity_score = 0.25 * 100;
 8008d52:	4b4a      	ldr	r3, [pc, #296]	@ (8008e7c <bme68x_GetHumidityScore+0x15c>)
 8008d54:	4a4a      	ldr	r2, [pc, #296]	@ (8008e80 <bme68x_GetHumidityScore+0x160>)
 8008d56:	601a      	str	r2, [r3, #0]
 8008d58:	e076      	b.n	8008e48 <bme68x_GetHumidityScore+0x128>
	else { // Humidity is sub-optimal
		if (BME68x_DATA->humidity < 38)
 8008d5a:	4b45      	ldr	r3, [pc, #276]	@ (8008e70 <bme68x_GetHumidityScore+0x150>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8008d62:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8008e74 <bme68x_GetHumidityScore+0x154>
 8008d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d6e:	d52e      	bpl.n	8008dce <bme68x_GetHumidityScore+0xae>
			humidity_score = 0.25 / hum_reference * BME68x_DATA->humidity * 100;
 8008d70:	4b44      	ldr	r3, [pc, #272]	@ (8008e84 <bme68x_GetHumidityScore+0x164>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4618      	mov	r0, r3
 8008d76:	f7f7 fbdf 	bl	8000538 <__aeabi_f2d>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	f04f 0000 	mov.w	r0, #0
 8008d82:	4941      	ldr	r1, [pc, #260]	@ (8008e88 <bme68x_GetHumidityScore+0x168>)
 8008d84:	f7f7 fd5a 	bl	800083c <__aeabi_ddiv>
 8008d88:	4602      	mov	r2, r0
 8008d8a:	460b      	mov	r3, r1
 8008d8c:	4614      	mov	r4, r2
 8008d8e:	461d      	mov	r5, r3
 8008d90:	4b37      	ldr	r3, [pc, #220]	@ (8008e70 <bme68x_GetHumidityScore+0x150>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	695b      	ldr	r3, [r3, #20]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7f7 fbce 	bl	8000538 <__aeabi_f2d>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	460b      	mov	r3, r1
 8008da0:	4620      	mov	r0, r4
 8008da2:	4629      	mov	r1, r5
 8008da4:	f7f7 fc20 	bl	80005e8 <__aeabi_dmul>
 8008da8:	4602      	mov	r2, r0
 8008daa:	460b      	mov	r3, r1
 8008dac:	4610      	mov	r0, r2
 8008dae:	4619      	mov	r1, r3
 8008db0:	f04f 0200 	mov.w	r2, #0
 8008db4:	4b35      	ldr	r3, [pc, #212]	@ (8008e8c <bme68x_GetHumidityScore+0x16c>)
 8008db6:	f7f7 fc17 	bl	80005e8 <__aeabi_dmul>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4610      	mov	r0, r2
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	f7f7 fe23 	bl	8000a0c <__aeabi_d2f>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	4a2c      	ldr	r2, [pc, #176]	@ (8008e7c <bme68x_GetHumidityScore+0x15c>)
 8008dca:	6013      	str	r3, [r2, #0]
 8008dcc:	e03c      	b.n	8008e48 <bme68x_GetHumidityScore+0x128>
		else {
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008dce:	4b2d      	ldr	r3, [pc, #180]	@ (8008e84 <bme68x_GetHumidityScore+0x164>)
 8008dd0:	edd3 7a00 	vldr	s15, [r3]
 8008dd4:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8008e90 <bme68x_GetHumidityScore+0x170>
 8008dd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008ddc:	ee17 0a90 	vmov	r0, s15
 8008de0:	f7f7 fbaa 	bl	8000538 <__aeabi_f2d>
 8008de4:	4602      	mov	r2, r0
 8008de6:	460b      	mov	r3, r1
 8008de8:	f04f 0000 	mov.w	r0, #0
 8008dec:	4929      	ldr	r1, [pc, #164]	@ (8008e94 <bme68x_GetHumidityScore+0x174>)
 8008dee:	f7f7 fd25 	bl	800083c <__aeabi_ddiv>
 8008df2:	4602      	mov	r2, r0
 8008df4:	460b      	mov	r3, r1
 8008df6:	4614      	mov	r4, r2
 8008df8:	461d      	mov	r5, r3
					* BME68x_DATA->humidity) + 0.416666) * 100;
 8008dfa:	4b1d      	ldr	r3, [pc, #116]	@ (8008e70 <bme68x_GetHumidityScore+0x150>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	695b      	ldr	r3, [r3, #20]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f7f7 fb99 	bl	8000538 <__aeabi_f2d>
 8008e06:	4602      	mov	r2, r0
 8008e08:	460b      	mov	r3, r1
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	4629      	mov	r1, r5
 8008e0e:	f7f7 fbeb 	bl	80005e8 <__aeabi_dmul>
 8008e12:	4602      	mov	r2, r0
 8008e14:	460b      	mov	r3, r1
 8008e16:	4610      	mov	r0, r2
 8008e18:	4619      	mov	r1, r3
 8008e1a:	a313      	add	r3, pc, #76	@ (adr r3, 8008e68 <bme68x_GetHumidityScore+0x148>)
 8008e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e20:	f7f7 fa2c 	bl	800027c <__adddf3>
 8008e24:	4602      	mov	r2, r0
 8008e26:	460b      	mov	r3, r1
 8008e28:	4610      	mov	r0, r2
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	f04f 0200 	mov.w	r2, #0
 8008e30:	4b16      	ldr	r3, [pc, #88]	@ (8008e8c <bme68x_GetHumidityScore+0x16c>)
 8008e32:	f7f7 fbd9 	bl	80005e8 <__aeabi_dmul>
 8008e36:	4602      	mov	r2, r0
 8008e38:	460b      	mov	r3, r1
 8008e3a:	4610      	mov	r0, r2
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	f7f7 fde5 	bl	8000a0c <__aeabi_d2f>
 8008e42:	4603      	mov	r3, r0
			humidity_score = ((-0.25 / (100 - hum_reference)
 8008e44:	4a0d      	ldr	r2, [pc, #52]	@ (8008e7c <bme68x_GetHumidityScore+0x15c>)
 8008e46:	6013      	str	r3, [r2, #0]
		}
	}

	return humidity_score;
 8008e48:	4b0c      	ldr	r3, [pc, #48]	@ (8008e7c <bme68x_GetHumidityScore+0x15c>)
 8008e4a:	edd3 7a00 	vldr	s15, [r3]
 8008e4e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008e52:	edc7 7a01 	vstr	s15, [r7, #4]
 8008e56:	793b      	ldrb	r3, [r7, #4]
 8008e58:	b25b      	sxtb	r3, r3
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bdb0      	pop	{r4, r5, r7, pc}
 8008e62:	bf00      	nop
 8008e64:	f3af 8000 	nop.w
 8008e68:	ded6ba8c 	.word	0xded6ba8c
 8008e6c:	3fdaaaa7 	.word	0x3fdaaaa7
 8008e70:	2000065c 	.word	0x2000065c
 8008e74:	42180000 	.word	0x42180000
 8008e78:	42280000 	.word	0x42280000
 8008e7c:	20000688 	.word	0x20000688
 8008e80:	41c80000 	.word	0x41c80000
 8008e84:	20000054 	.word	0x20000054
 8008e88:	3fd00000 	.word	0x3fd00000
 8008e8c:	40590000 	.word	0x40590000
 8008e90:	42c80000 	.word	0x42c80000
 8008e94:	bfd00000 	.word	0xbfd00000

08008e98 <bme68x_GetGasScore>:

//Calculate gas contribution to IAQ index
int8_t bme68x_GetGasScore() {
 8008e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8008e9c:	b082      	sub	sp, #8
 8008e9e:	af00      	add	r7, sp, #0

	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008ea0:	4b42      	ldr	r3, [pc, #264]	@ (8008fac <bme68x_GetGasScore+0x114>)
 8008ea2:	ed93 7a00 	vldr	s14, [r3]
 8008ea6:	4b42      	ldr	r3, [pc, #264]	@ (8008fb0 <bme68x_GetGasScore+0x118>)
 8008ea8:	edd3 7a00 	vldr	s15, [r3]
 8008eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008eb0:	ee17 0a90 	vmov	r0, s15
 8008eb4:	f7f7 fb40 	bl	8000538 <__aeabi_f2d>
 8008eb8:	4602      	mov	r2, r0
 8008eba:	460b      	mov	r3, r1
 8008ebc:	f04f 0000 	mov.w	r0, #0
 8008ec0:	493c      	ldr	r1, [pc, #240]	@ (8008fb4 <bme68x_GetGasScore+0x11c>)
 8008ec2:	f7f7 fcbb 	bl	800083c <__aeabi_ddiv>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4614      	mov	r4, r2
 8008ecc:	461d      	mov	r5, r3
 8008ece:	4b3a      	ldr	r3, [pc, #232]	@ (8008fb8 <bme68x_GetGasScore+0x120>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f7f7 fb30 	bl	8000538 <__aeabi_f2d>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	460b      	mov	r3, r1
 8008edc:	4620      	mov	r0, r4
 8008ede:	4629      	mov	r1, r5
 8008ee0:	f7f7 fb82 	bl	80005e8 <__aeabi_dmul>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4690      	mov	r8, r2
 8008eea:	4699      	mov	r9, r3
			- (gas_lower_limit * (0.75 / (gas_upper_limit - gas_lower_limit))))
 8008eec:	4b30      	ldr	r3, [pc, #192]	@ (8008fb0 <bme68x_GetGasScore+0x118>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f7f7 fb21 	bl	8000538 <__aeabi_f2d>
 8008ef6:	4604      	mov	r4, r0
 8008ef8:	460d      	mov	r5, r1
 8008efa:	4b2c      	ldr	r3, [pc, #176]	@ (8008fac <bme68x_GetGasScore+0x114>)
 8008efc:	ed93 7a00 	vldr	s14, [r3]
 8008f00:	4b2b      	ldr	r3, [pc, #172]	@ (8008fb0 <bme68x_GetGasScore+0x118>)
 8008f02:	edd3 7a00 	vldr	s15, [r3]
 8008f06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008f0a:	ee17 0a90 	vmov	r0, s15
 8008f0e:	f7f7 fb13 	bl	8000538 <__aeabi_f2d>
 8008f12:	4602      	mov	r2, r0
 8008f14:	460b      	mov	r3, r1
 8008f16:	f04f 0000 	mov.w	r0, #0
 8008f1a:	4926      	ldr	r1, [pc, #152]	@ (8008fb4 <bme68x_GetGasScore+0x11c>)
 8008f1c:	f7f7 fc8e 	bl	800083c <__aeabi_ddiv>
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	4620      	mov	r0, r4
 8008f26:	4629      	mov	r1, r5
 8008f28:	f7f7 fb5e 	bl	80005e8 <__aeabi_dmul>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	460b      	mov	r3, r1
 8008f30:	4640      	mov	r0, r8
 8008f32:	4649      	mov	r1, r9
 8008f34:	f7f7 f9a0 	bl	8000278 <__aeabi_dsub>
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4619      	mov	r1, r3
			* 100.00;
 8008f40:	f04f 0200 	mov.w	r2, #0
 8008f44:	4b1d      	ldr	r3, [pc, #116]	@ (8008fbc <bme68x_GetGasScore+0x124>)
 8008f46:	f7f7 fb4f 	bl	80005e8 <__aeabi_dmul>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4610      	mov	r0, r2
 8008f50:	4619      	mov	r1, r3
 8008f52:	f7f7 fd5b 	bl	8000a0c <__aeabi_d2f>
 8008f56:	4603      	mov	r3, r0
	gas_score = (0.75 / (gas_upper_limit - gas_lower_limit) * gas_reference
 8008f58:	4a19      	ldr	r2, [pc, #100]	@ (8008fc0 <bme68x_GetGasScore+0x128>)
 8008f5a:	6013      	str	r3, [r2, #0]
	if (gas_score > 75)
 8008f5c:	4b18      	ldr	r3, [pc, #96]	@ (8008fc0 <bme68x_GetGasScore+0x128>)
 8008f5e:	edd3 7a00 	vldr	s15, [r3]
 8008f62:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008fc4 <bme68x_GetGasScore+0x12c>
 8008f66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008f6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f6e:	dd02      	ble.n	8008f76 <bme68x_GetGasScore+0xde>
		gas_score = 75; // Sometimes gas readings can go outside of expected scale maximum
 8008f70:	4b13      	ldr	r3, [pc, #76]	@ (8008fc0 <bme68x_GetGasScore+0x128>)
 8008f72:	4a15      	ldr	r2, [pc, #84]	@ (8008fc8 <bme68x_GetGasScore+0x130>)
 8008f74:	601a      	str	r2, [r3, #0]
	if (gas_score < 0)
 8008f76:	4b12      	ldr	r3, [pc, #72]	@ (8008fc0 <bme68x_GetGasScore+0x128>)
 8008f78:	edd3 7a00 	vldr	s15, [r3]
 8008f7c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008f84:	d503      	bpl.n	8008f8e <bme68x_GetGasScore+0xf6>
		gas_score = 0; // Sometimes gas readings can go outside of expected scale minimum
 8008f86:	4b0e      	ldr	r3, [pc, #56]	@ (8008fc0 <bme68x_GetGasScore+0x128>)
 8008f88:	f04f 0200 	mov.w	r2, #0
 8008f8c:	601a      	str	r2, [r3, #0]

	return gas_score;
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008fc0 <bme68x_GetGasScore+0x128>)
 8008f90:	edd3 7a00 	vldr	s15, [r3]
 8008f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008f98:	edc7 7a01 	vstr	s15, [r7, #4]
 8008f9c:	793b      	ldrb	r3, [r7, #4]
 8008f9e:	b25b      	sxtb	r3, r3
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8008faa:	bf00      	nop
 8008fac:	2000005c 	.word	0x2000005c
 8008fb0:	20000058 	.word	0x20000058
 8008fb4:	3fe80000 	.word	0x3fe80000
 8008fb8:	20000050 	.word	0x20000050
 8008fbc:	40590000 	.word	0x40590000
 8008fc0:	2000068c 	.word	0x2000068c
 8008fc4:	42960000 	.word	0x42960000
 8008fc8:	42960000 	.word	0x42960000

08008fcc <bme68x_iaq>:

float bme68x_iaq() {
 8008fcc:	b590      	push	{r4, r7, lr}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0

	float air_quality_score = (100
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800904c <bme68x_iaq+0x80>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	f7ff fea2 	bl	8008d20 <bme68x_GetHumidityScore>
 8008fdc:	4603      	mov	r3, r0
 8008fde:	461c      	mov	r4, r3
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8008fe0:	4b1a      	ldr	r3, [pc, #104]	@ (800904c <bme68x_iaq+0x80>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff ff57 	bl	8008e98 <bme68x_GetGasScore>
 8008fea:	4603      	mov	r3, r0
 8008fec:	4423      	add	r3, r4
			- (bme68x_GetHumidityScore(BME68x_DATA)
 8008fee:	f1c3 0264 	rsb	r2, r3, #100	@ 0x64
					+ bme68x_GetGasScore(BME68x_DATA))) * 5;
 8008ff2:	4613      	mov	r3, r2
 8008ff4:	009b      	lsls	r3, r3, #2
 8008ff6:	4413      	add	r3, r2
	float air_quality_score = (100
 8008ff8:	ee07 3a90 	vmov	s15, r3
 8008ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009000:	edc7 7a01 	vstr	s15, [r7, #4]

	// If 5 measurements passed, recalculate the gas reference.
	if ((getgasreference_count++) % 5 == 0)
 8009004:	4b12      	ldr	r3, [pc, #72]	@ (8009050 <bme68x_iaq+0x84>)
 8009006:	f993 2000 	ldrsb.w	r2, [r3]
 800900a:	b2d3      	uxtb	r3, r2
 800900c:	3301      	adds	r3, #1
 800900e:	b2db      	uxtb	r3, r3
 8009010:	b259      	sxtb	r1, r3
 8009012:	4b0f      	ldr	r3, [pc, #60]	@ (8009050 <bme68x_iaq+0x84>)
 8009014:	7019      	strb	r1, [r3, #0]
 8009016:	4b0f      	ldr	r3, [pc, #60]	@ (8009054 <bme68x_iaq+0x88>)
 8009018:	fb83 1302 	smull	r1, r3, r3, r2
 800901c:	1059      	asrs	r1, r3, #1
 800901e:	17d3      	asrs	r3, r2, #31
 8009020:	1ac9      	subs	r1, r1, r3
 8009022:	460b      	mov	r3, r1
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	440b      	add	r3, r1
 8009028:	1ad3      	subs	r3, r2, r3
 800902a:	b25b      	sxtb	r3, r3
 800902c:	2b00      	cmp	r3, #0
 800902e:	d104      	bne.n	800903a <bme68x_iaq+0x6e>
		bme68x_GetGasReference(BME68x_DATA);
 8009030:	4b06      	ldr	r3, [pc, #24]	@ (800904c <bme68x_iaq+0x80>)
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	4618      	mov	r0, r3
 8009036:	f7ff fe3d 	bl	8008cb4 <bme68x_GetGasReference>

	return air_quality_score;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	ee07 3a90 	vmov	s15, r3

}
 8009040:	eeb0 0a67 	vmov.f32	s0, s15
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	bd90      	pop	{r4, r7, pc}
 800904a:	bf00      	nop
 800904c:	2000065c 	.word	0x2000065c
 8009050:	20000690 	.word	0x20000690
 8009054:	66666667 	.word	0x66666667

08009058 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8009058:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8009090 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800905c:	f7fd fb68 	bl	8006730 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009060:	480c      	ldr	r0, [pc, #48]	@ (8009094 <LoopForever+0x6>)
  ldr r1, =_edata
 8009062:	490d      	ldr	r1, [pc, #52]	@ (8009098 <LoopForever+0xa>)
  ldr r2, =_sidata
 8009064:	4a0d      	ldr	r2, [pc, #52]	@ (800909c <LoopForever+0xe>)
  movs r3, #0
 8009066:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009068:	e002      	b.n	8009070 <LoopCopyDataInit>

0800906a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800906a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800906c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800906e:	3304      	adds	r3, #4

08009070 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009070:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009072:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009074:	d3f9      	bcc.n	800906a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009076:	4a0a      	ldr	r2, [pc, #40]	@ (80090a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8009078:	4c0a      	ldr	r4, [pc, #40]	@ (80090a4 <LoopForever+0x16>)
  movs r3, #0
 800907a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800907c:	e001      	b.n	8009082 <LoopFillZerobss>

0800907e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800907e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009080:	3204      	adds	r2, #4

08009082 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009082:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009084:	d3fb      	bcc.n	800907e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8009086:	f005 fa63 	bl	800e550 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800908a:	f7fc faa9 	bl	80055e0 <main>

0800908e <LoopForever>:

LoopForever:
    b LoopForever
 800908e:	e7fe      	b.n	800908e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8009090:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8009094:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009098:	200000c4 	.word	0x200000c4
  ldr r2, =_sidata
 800909c:	08010b6c 	.word	0x08010b6c
  ldr r2, =_sbss
 80090a0:	200000c4 	.word	0x200000c4
  ldr r4, =_ebss
 80090a4:	200007e4 	.word	0x200007e4

080090a8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80090a8:	e7fe      	b.n	80090a8 <CAN1_RX0_IRQHandler>

080090aa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b082      	sub	sp, #8
 80090ae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80090b0:	2300      	movs	r3, #0
 80090b2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80090b4:	2003      	movs	r0, #3
 80090b6:	f001 fa3b 	bl	800a530 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80090ba:	200f      	movs	r0, #15
 80090bc:	f000 f80e 	bl	80090dc <HAL_InitTick>
 80090c0:	4603      	mov	r3, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d002      	beq.n	80090cc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	71fb      	strb	r3, [r7, #7]
 80090ca:	e001      	b.n	80090d0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80090cc:	f7fd f9f8 	bl	80064c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80090d0:	79fb      	ldrb	r3, [r7, #7]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	3708      	adds	r7, #8
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80090e4:	2300      	movs	r3, #0
 80090e6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80090e8:	4b17      	ldr	r3, [pc, #92]	@ (8009148 <HAL_InitTick+0x6c>)
 80090ea:	781b      	ldrb	r3, [r3, #0]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d023      	beq.n	8009138 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80090f0:	4b16      	ldr	r3, [pc, #88]	@ (800914c <HAL_InitTick+0x70>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	4b14      	ldr	r3, [pc, #80]	@ (8009148 <HAL_InitTick+0x6c>)
 80090f6:	781b      	ldrb	r3, [r3, #0]
 80090f8:	4619      	mov	r1, r3
 80090fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80090fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009102:	fbb2 f3f3 	udiv	r3, r2, r3
 8009106:	4618      	mov	r0, r3
 8009108:	f001 fa47 	bl	800a59a <HAL_SYSTICK_Config>
 800910c:	4603      	mov	r3, r0
 800910e:	2b00      	cmp	r3, #0
 8009110:	d10f      	bne.n	8009132 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b0f      	cmp	r3, #15
 8009116:	d809      	bhi.n	800912c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009118:	2200      	movs	r2, #0
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	f04f 30ff 	mov.w	r0, #4294967295
 8009120:	f001 fa11 	bl	800a546 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009124:	4a0a      	ldr	r2, [pc, #40]	@ (8009150 <HAL_InitTick+0x74>)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6013      	str	r3, [r2, #0]
 800912a:	e007      	b.n	800913c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	73fb      	strb	r3, [r7, #15]
 8009130:	e004      	b.n	800913c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	73fb      	strb	r3, [r7, #15]
 8009136:	e001      	b.n	800913c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009138:	2301      	movs	r3, #1
 800913a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800913c:	7bfb      	ldrb	r3, [r7, #15]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3710      	adds	r7, #16
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	20000064 	.word	0x20000064
 800914c:	20000048 	.word	0x20000048
 8009150:	20000060 	.word	0x20000060

08009154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009154:	b480      	push	{r7}
 8009156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009158:	4b06      	ldr	r3, [pc, #24]	@ (8009174 <HAL_IncTick+0x20>)
 800915a:	781b      	ldrb	r3, [r3, #0]
 800915c:	461a      	mov	r2, r3
 800915e:	4b06      	ldr	r3, [pc, #24]	@ (8009178 <HAL_IncTick+0x24>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	4413      	add	r3, r2
 8009164:	4a04      	ldr	r2, [pc, #16]	@ (8009178 <HAL_IncTick+0x24>)
 8009166:	6013      	str	r3, [r2, #0]
}
 8009168:	bf00      	nop
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr
 8009172:	bf00      	nop
 8009174:	20000064 	.word	0x20000064
 8009178:	20000694 	.word	0x20000694

0800917c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800917c:	b480      	push	{r7}
 800917e:	af00      	add	r7, sp, #0
  return uwTick;
 8009180:	4b03      	ldr	r3, [pc, #12]	@ (8009190 <HAL_GetTick+0x14>)
 8009182:	681b      	ldr	r3, [r3, #0]
}
 8009184:	4618      	mov	r0, r3
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	20000694 	.word	0x20000694

08009194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800919c:	f7ff ffee 	bl	800917c <HAL_GetTick>
 80091a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ac:	d005      	beq.n	80091ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80091ae:	4b0a      	ldr	r3, [pc, #40]	@ (80091d8 <HAL_Delay+0x44>)
 80091b0:	781b      	ldrb	r3, [r3, #0]
 80091b2:	461a      	mov	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80091ba:	bf00      	nop
 80091bc:	f7ff ffde 	bl	800917c <HAL_GetTick>
 80091c0:	4602      	mov	r2, r0
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	1ad3      	subs	r3, r2, r3
 80091c6:	68fa      	ldr	r2, [r7, #12]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d8f7      	bhi.n	80091bc <HAL_Delay+0x28>
  {
  }
}
 80091cc:	bf00      	nop
 80091ce:	bf00      	nop
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
 80091d6:	bf00      	nop
 80091d8:	20000064 	.word	0x20000064

080091dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80091dc:	b480      	push	{r7}
 80091de:	b083      	sub	sp, #12
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	431a      	orrs	r2, r3
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	609a      	str	r2, [r3, #8]
}
 80091f6:	bf00      	nop
 80091f8:	370c      	adds	r7, #12
 80091fa:	46bd      	mov	sp, r7
 80091fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009200:	4770      	bx	lr

08009202 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8009202:	b480      	push	{r7}
 8009204:	b083      	sub	sp, #12
 8009206:	af00      	add	r7, sp, #0
 8009208:	6078      	str	r0, [r7, #4]
 800920a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8009214:	683b      	ldr	r3, [r7, #0]
 8009216:	431a      	orrs	r2, r3
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	609a      	str	r2, [r3, #8]
}
 800921c:	bf00      	nop
 800921e:	370c      	adds	r7, #12
 8009220:	46bd      	mov	sp, r7
 8009222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009226:	4770      	bx	lr

08009228 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689b      	ldr	r3, [r3, #8]
 8009234:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8009238:	4618      	mov	r0, r3
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8009244:	b480      	push	{r7}
 8009246:	b087      	sub	sp, #28
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
 8009250:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	3360      	adds	r3, #96	@ 0x60
 8009256:	461a      	mov	r2, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	009b      	lsls	r3, r3, #2
 800925c:	4413      	add	r3, r2
 800925e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	681a      	ldr	r2, [r3, #0]
 8009264:	4b08      	ldr	r3, [pc, #32]	@ (8009288 <LL_ADC_SetOffset+0x44>)
 8009266:	4013      	ands	r3, r2
 8009268:	687a      	ldr	r2, [r7, #4]
 800926a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800926e:	683a      	ldr	r2, [r7, #0]
 8009270:	430a      	orrs	r2, r1
 8009272:	4313      	orrs	r3, r2
 8009274:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800927c:	bf00      	nop
 800927e:	371c      	adds	r7, #28
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr
 8009288:	03fff000 	.word	0x03fff000

0800928c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800928c:	b480      	push	{r7}
 800928e:	b085      	sub	sp, #20
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	3360      	adds	r3, #96	@ 0x60
 800929a:	461a      	mov	r2, r3
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3714      	adds	r7, #20
 80092b0:	46bd      	mov	sp, r7
 80092b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b6:	4770      	bx	lr

080092b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b087      	sub	sp, #28
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3360      	adds	r3, #96	@ 0x60
 80092c8:	461a      	mov	r2, r3
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	009b      	lsls	r3, r3, #2
 80092ce:	4413      	add	r3, r2
 80092d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	431a      	orrs	r2, r3
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr

080092ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80092ee:	b480      	push	{r7}
 80092f0:	b083      	sub	sp, #12
 80092f2:	af00      	add	r7, sp, #0
 80092f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	68db      	ldr	r3, [r3, #12]
 80092fa:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009306:	2300      	movs	r3, #0
}
 8009308:	4618      	mov	r0, r3
 800930a:	370c      	adds	r7, #12
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009314:	b480      	push	{r7}
 8009316:	b087      	sub	sp, #28
 8009318:	af00      	add	r7, sp, #0
 800931a:	60f8      	str	r0, [r7, #12]
 800931c:	60b9      	str	r1, [r7, #8]
 800931e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	3330      	adds	r3, #48	@ 0x30
 8009324:	461a      	mov	r2, r3
 8009326:	68bb      	ldr	r3, [r7, #8]
 8009328:	0a1b      	lsrs	r3, r3, #8
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	f003 030c 	and.w	r3, r3, #12
 8009330:	4413      	add	r3, r2
 8009332:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	f003 031f 	and.w	r3, r3, #31
 800933e:	211f      	movs	r1, #31
 8009340:	fa01 f303 	lsl.w	r3, r1, r3
 8009344:	43db      	mvns	r3, r3
 8009346:	401a      	ands	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	0e9b      	lsrs	r3, r3, #26
 800934c:	f003 011f 	and.w	r1, r3, #31
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	f003 031f 	and.w	r3, r3, #31
 8009356:	fa01 f303 	lsl.w	r3, r1, r3
 800935a:	431a      	orrs	r2, r3
 800935c:	697b      	ldr	r3, [r7, #20]
 800935e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009360:	bf00      	nop
 8009362:	371c      	adds	r7, #28
 8009364:	46bd      	mov	sp, r7
 8009366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936a:	4770      	bx	lr

0800936c <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009378:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3314      	adds	r3, #20
 80093a2:	461a      	mov	r2, r3
 80093a4:	68bb      	ldr	r3, [r7, #8]
 80093a6:	0e5b      	lsrs	r3, r3, #25
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	f003 0304 	and.w	r3, r3, #4
 80093ae:	4413      	add	r3, r2
 80093b0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	681a      	ldr	r2, [r3, #0]
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	0d1b      	lsrs	r3, r3, #20
 80093ba:	f003 031f 	and.w	r3, r3, #31
 80093be:	2107      	movs	r1, #7
 80093c0:	fa01 f303 	lsl.w	r3, r1, r3
 80093c4:	43db      	mvns	r3, r3
 80093c6:	401a      	ands	r2, r3
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	0d1b      	lsrs	r3, r3, #20
 80093cc:	f003 031f 	and.w	r3, r3, #31
 80093d0:	6879      	ldr	r1, [r7, #4]
 80093d2:	fa01 f303 	lsl.w	r3, r1, r3
 80093d6:	431a      	orrs	r2, r3
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80093dc:	bf00      	nop
 80093de:	371c      	adds	r7, #28
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009400:	43db      	mvns	r3, r3
 8009402:	401a      	ands	r2, r3
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f003 0318 	and.w	r3, r3, #24
 800940a:	4908      	ldr	r1, [pc, #32]	@ (800942c <LL_ADC_SetChannelSingleDiff+0x44>)
 800940c:	40d9      	lsrs	r1, r3
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	400b      	ands	r3, r1
 8009412:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009416:	431a      	orrs	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	0007ffff 	.word	0x0007ffff

08009430 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009440:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	6093      	str	r3, [r2, #8]
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009464:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009468:	d101      	bne.n	800946e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800946a:	2301      	movs	r3, #1
 800946c:	e000      	b.n	8009470 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800946e:	2300      	movs	r3, #0
}
 8009470:	4618      	mov	r0, r3
 8009472:	370c      	adds	r7, #12
 8009474:	46bd      	mov	sp, r7
 8009476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947a:	4770      	bx	lr

0800947c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800947c:	b480      	push	{r7}
 800947e:	b083      	sub	sp, #12
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800948c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009490:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	689b      	ldr	r3, [r3, #8]
 80094b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80094b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80094b8:	d101      	bne.n	80094be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	689b      	ldr	r3, [r3, #8]
 80094d8:	f003 0301 	and.w	r3, r3, #1
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d101      	bne.n	80094e4 <LL_ADC_IsEnabled+0x18>
 80094e0:	2301      	movs	r3, #1
 80094e2:	e000      	b.n	80094e6 <LL_ADC_IsEnabled+0x1a>
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	4618      	mov	r0, r3
 80094e8:	370c      	adds	r7, #12
 80094ea:	46bd      	mov	sp, r7
 80094ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f0:	4770      	bx	lr

080094f2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80094f2:	b480      	push	{r7}
 80094f4:	b083      	sub	sp, #12
 80094f6:	af00      	add	r7, sp, #0
 80094f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	689b      	ldr	r3, [r3, #8]
 80094fe:	f003 0304 	and.w	r3, r3, #4
 8009502:	2b04      	cmp	r3, #4
 8009504:	d101      	bne.n	800950a <LL_ADC_REG_IsConversionOngoing+0x18>
 8009506:	2301      	movs	r3, #1
 8009508:	e000      	b.n	800950c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800950a:	2300      	movs	r3, #0
}
 800950c:	4618      	mov	r0, r3
 800950e:	370c      	adds	r7, #12
 8009510:	46bd      	mov	sp, r7
 8009512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009516:	4770      	bx	lr

08009518 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8009518:	b480      	push	{r7}
 800951a:	b083      	sub	sp, #12
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0308 	and.w	r3, r3, #8
 8009528:	2b08      	cmp	r3, #8
 800952a:	d101      	bne.n	8009530 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800952c:	2301      	movs	r3, #1
 800952e:	e000      	b.n	8009532 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009530:	2300      	movs	r3, #0
}
 8009532:	4618      	mov	r0, r3
 8009534:	370c      	adds	r7, #12
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
	...

08009540 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b088      	sub	sp, #32
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800954c:	2300      	movs	r3, #0
 800954e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d101      	bne.n	800955a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e126      	b.n	80097a8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	691b      	ldr	r3, [r3, #16]
 800955e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009564:	2b00      	cmp	r3, #0
 8009566:	d109      	bne.n	800957c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7f7 fccb 	bl	8000f04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4618      	mov	r0, r3
 8009582:	f7ff ff67 	bl	8009454 <LL_ADC_IsDeepPowerDownEnabled>
 8009586:	4603      	mov	r3, r0
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	4618      	mov	r0, r3
 8009592:	f7ff ff4d 	bl	8009430 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4618      	mov	r0, r3
 800959c:	f7ff ff82 	bl	80094a4 <LL_ADC_IsInternalRegulatorEnabled>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d115      	bne.n	80095d2 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4618      	mov	r0, r3
 80095ac:	f7ff ff66 	bl	800947c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80095b0:	4b7f      	ldr	r3, [pc, #508]	@ (80097b0 <HAL_ADC_Init+0x270>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	099b      	lsrs	r3, r3, #6
 80095b6:	4a7f      	ldr	r2, [pc, #508]	@ (80097b4 <HAL_ADC_Init+0x274>)
 80095b8:	fba2 2303 	umull	r2, r3, r2, r3
 80095bc:	099b      	lsrs	r3, r3, #6
 80095be:	3301      	adds	r3, #1
 80095c0:	005b      	lsls	r3, r3, #1
 80095c2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80095c4:	e002      	b.n	80095cc <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	3b01      	subs	r3, #1
 80095ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d1f9      	bne.n	80095c6 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4618      	mov	r0, r3
 80095d8:	f7ff ff64 	bl	80094a4 <LL_ADC_IsInternalRegulatorEnabled>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d10d      	bne.n	80095fe <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095e6:	f043 0210 	orr.w	r2, r3, #16
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095f2:	f043 0201 	orr.w	r2, r3, #1
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	4618      	mov	r0, r3
 8009604:	f7ff ff75 	bl	80094f2 <LL_ADC_REG_IsConversionOngoing>
 8009608:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800960e:	f003 0310 	and.w	r3, r3, #16
 8009612:	2b00      	cmp	r3, #0
 8009614:	f040 80bf 	bne.w	8009796 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2b00      	cmp	r3, #0
 800961c:	f040 80bb 	bne.w	8009796 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009624:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8009628:	f043 0202 	orr.w	r2, r3, #2
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4618      	mov	r0, r3
 8009636:	f7ff ff49 	bl	80094cc <LL_ADC_IsEnabled>
 800963a:	4603      	mov	r3, r0
 800963c:	2b00      	cmp	r3, #0
 800963e:	d10b      	bne.n	8009658 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009640:	485d      	ldr	r0, [pc, #372]	@ (80097b8 <HAL_ADC_Init+0x278>)
 8009642:	f7ff ff43 	bl	80094cc <LL_ADC_IsEnabled>
 8009646:	4603      	mov	r3, r0
 8009648:	2b00      	cmp	r3, #0
 800964a:	d105      	bne.n	8009658 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	685b      	ldr	r3, [r3, #4]
 8009650:	4619      	mov	r1, r3
 8009652:	485a      	ldr	r0, [pc, #360]	@ (80097bc <HAL_ADC_Init+0x27c>)
 8009654:	f7ff fdc2 	bl	80091dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	7e5b      	ldrb	r3, [r3, #25]
 800965c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009662:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8009668:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800966e:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009676:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8009678:	4313      	orrs	r3, r2
 800967a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d106      	bne.n	8009694 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968a:	3b01      	subs	r3, #1
 800968c:	045b      	lsls	r3, r3, #17
 800968e:	69ba      	ldr	r2, [r7, #24]
 8009690:	4313      	orrs	r3, r2
 8009692:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009698:	2b00      	cmp	r3, #0
 800969a:	d009      	beq.n	80096b0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80096a0:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096a8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80096aa:	69ba      	ldr	r2, [r7, #24]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	68da      	ldr	r2, [r3, #12]
 80096b6:	4b42      	ldr	r3, [pc, #264]	@ (80097c0 <HAL_ADC_Init+0x280>)
 80096b8:	4013      	ands	r3, r2
 80096ba:	687a      	ldr	r2, [r7, #4]
 80096bc:	6812      	ldr	r2, [r2, #0]
 80096be:	69b9      	ldr	r1, [r7, #24]
 80096c0:	430b      	orrs	r3, r1
 80096c2:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4618      	mov	r0, r3
 80096ca:	f7ff ff25 	bl	8009518 <LL_ADC_INJ_IsConversionOngoing>
 80096ce:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d13d      	bne.n	8009752 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d13a      	bne.n	8009752 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80096e0:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80096e8:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80096ea:	4313      	orrs	r3, r2
 80096ec:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80096f8:	f023 0302 	bic.w	r3, r3, #2
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	6812      	ldr	r2, [r2, #0]
 8009700:	69b9      	ldr	r1, [r7, #24]
 8009702:	430b      	orrs	r3, r1
 8009704:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800970c:	2b01      	cmp	r3, #1
 800970e:	d118      	bne.n	8009742 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	691b      	ldr	r3, [r3, #16]
 8009716:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800971a:	f023 0304 	bic.w	r3, r3, #4
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8009722:	687a      	ldr	r2, [r7, #4]
 8009724:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8009726:	4311      	orrs	r1, r2
 8009728:	687a      	ldr	r2, [r7, #4]
 800972a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800972c:	4311      	orrs	r1, r2
 800972e:	687a      	ldr	r2, [r7, #4]
 8009730:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8009732:	430a      	orrs	r2, r1
 8009734:	431a      	orrs	r2, r3
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f042 0201 	orr.w	r2, r2, #1
 800973e:	611a      	str	r2, [r3, #16]
 8009740:	e007      	b.n	8009752 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	691a      	ldr	r2, [r3, #16]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0201 	bic.w	r2, r2, #1
 8009750:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	691b      	ldr	r3, [r3, #16]
 8009756:	2b01      	cmp	r3, #1
 8009758:	d10c      	bne.n	8009774 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009760:	f023 010f 	bic.w	r1, r3, #15
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	69db      	ldr	r3, [r3, #28]
 8009768:	1e5a      	subs	r2, r3, #1
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	631a      	str	r2, [r3, #48]	@ 0x30
 8009772:	e007      	b.n	8009784 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	f022 020f 	bic.w	r2, r2, #15
 8009782:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009788:	f023 0303 	bic.w	r3, r3, #3
 800978c:	f043 0201 	orr.w	r2, r3, #1
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	655a      	str	r2, [r3, #84]	@ 0x54
 8009794:	e007      	b.n	80097a6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800979a:	f043 0210 	orr.w	r2, r3, #16
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80097a2:	2301      	movs	r3, #1
 80097a4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80097a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3720      	adds	r7, #32
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}
 80097b0:	20000048 	.word	0x20000048
 80097b4:	053e2d63 	.word	0x053e2d63
 80097b8:	50040000 	.word	0x50040000
 80097bc:	50040300 	.word	0x50040300
 80097c0:	fff0c007 	.word	0xfff0c007

080097c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b088      	sub	sp, #32
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80097cc:	2300      	movs	r3, #0
 80097ce:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	f003 0302 	and.w	r3, r3, #2
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d017      	beq.n	800981a <HAL_ADC_IRQHandler+0x56>
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	f003 0302 	and.w	r3, r3, #2
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d012      	beq.n	800981a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097f8:	f003 0310 	and.w	r3, r3, #16
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d105      	bne.n	800980c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009804:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	f000 fdb5 	bl	800a37c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2202      	movs	r2, #2
 8009818:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800981a:	69bb      	ldr	r3, [r7, #24]
 800981c:	f003 0304 	and.w	r3, r3, #4
 8009820:	2b00      	cmp	r3, #0
 8009822:	d004      	beq.n	800982e <HAL_ADC_IRQHandler+0x6a>
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	f003 0304 	and.w	r3, r3, #4
 800982a:	2b00      	cmp	r3, #0
 800982c:	d109      	bne.n	8009842 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8009834:	2b00      	cmp	r3, #0
 8009836:	d05e      	beq.n	80098f6 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8009838:	697b      	ldr	r3, [r7, #20]
 800983a:	f003 0308 	and.w	r3, r3, #8
 800983e:	2b00      	cmp	r3, #0
 8009840:	d059      	beq.n	80098f6 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	2b00      	cmp	r3, #0
 800984c:	d105      	bne.n	800985a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009852:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4618      	mov	r0, r3
 8009860:	f7ff fd45 	bl	80092ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8009864:	4603      	mov	r3, r0
 8009866:	2b00      	cmp	r3, #0
 8009868:	d03e      	beq.n	80098e8 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d135      	bne.n	80098e8 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	f003 0308 	and.w	r3, r3, #8
 8009886:	2b08      	cmp	r3, #8
 8009888:	d12e      	bne.n	80098e8 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	4618      	mov	r0, r3
 8009890:	f7ff fe2f 	bl	80094f2 <LL_ADC_REG_IsConversionOngoing>
 8009894:	4603      	mov	r3, r0
 8009896:	2b00      	cmp	r3, #0
 8009898:	d11a      	bne.n	80098d0 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	685a      	ldr	r2, [r3, #4]
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f022 020c 	bic.w	r2, r2, #12
 80098a8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ae:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d112      	bne.n	80098e8 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098c6:	f043 0201 	orr.w	r2, r3, #1
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	655a      	str	r2, [r3, #84]	@ 0x54
 80098ce:	e00b      	b.n	80098e8 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80098d4:	f043 0210 	orr.w	r2, r3, #16
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098e0:	f043 0201 	orr.w	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f91f 	bl	8009b2c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	220c      	movs	r2, #12
 80098f4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	f003 0320 	and.w	r3, r3, #32
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d004      	beq.n	800990a <HAL_ADC_IRQHandler+0x146>
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	f003 0320 	and.w	r3, r3, #32
 8009906:	2b00      	cmp	r3, #0
 8009908:	d109      	bne.n	800991e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800990a:	69bb      	ldr	r3, [r7, #24]
 800990c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8009910:	2b00      	cmp	r3, #0
 8009912:	d072      	beq.n	80099fa <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d06d      	beq.n	80099fa <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009922:	f003 0310 	and.w	r3, r3, #16
 8009926:	2b00      	cmp	r3, #0
 8009928:	d105      	bne.n	8009936 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800992e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4618      	mov	r0, r3
 800993c:	f7ff fd16 	bl	800936c <LL_ADC_INJ_IsTriggerSourceSWStart>
 8009940:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4618      	mov	r0, r3
 8009948:	f7ff fcd1 	bl	80092ee <LL_ADC_REG_IsTriggerSourceSWStart>
 800994c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d047      	beq.n	80099ec <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800995c:	693b      	ldr	r3, [r7, #16]
 800995e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d007      	beq.n	8009976 <HAL_ADC_IRQHandler+0x1b2>
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d03f      	beq.n	80099ec <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800996c:	693b      	ldr	r3, [r7, #16]
 800996e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8009972:	2b00      	cmp	r3, #0
 8009974:	d13a      	bne.n	80099ec <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009980:	2b40      	cmp	r3, #64	@ 0x40
 8009982:	d133      	bne.n	80099ec <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800998a:	2b00      	cmp	r3, #0
 800998c:	d12e      	bne.n	80099ec <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4618      	mov	r0, r3
 8009994:	f7ff fdc0 	bl	8009518 <LL_ADC_INJ_IsConversionOngoing>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d11a      	bne.n	80099d4 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	685a      	ldr	r2, [r3, #4]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80099ac:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d112      	bne.n	80099ec <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099ca:	f043 0201 	orr.w	r2, r3, #1
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	655a      	str	r2, [r3, #84]	@ 0x54
 80099d2:	e00b      	b.n	80099ec <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099d8:	f043 0210 	orr.w	r2, r3, #16
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099e4:	f043 0201 	orr.w	r2, r3, #1
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fc9d 	bl	800a32c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	2260      	movs	r2, #96	@ 0x60
 80099f8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d011      	beq.n	8009a28 <HAL_ADC_IRQHandler+0x264>
 8009a04:	697b      	ldr	r3, [r7, #20]
 8009a06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d00c      	beq.n	8009a28 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a12:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 f890 	bl	8009b40 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2280      	movs	r2, #128	@ 0x80
 8009a26:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8009a28:	69bb      	ldr	r3, [r7, #24]
 8009a2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d012      	beq.n	8009a58 <HAL_ADC_IRQHandler+0x294>
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d00d      	beq.n	8009a58 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a40:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f000 fc83 	bl	800a354 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009a56:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d012      	beq.n	8009a88 <HAL_ADC_IRQHandler+0x2c4>
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00d      	beq.n	8009a88 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a70:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 fc75 	bl	800a368 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009a86:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8009a88:	69bb      	ldr	r3, [r7, #24]
 8009a8a:	f003 0310 	and.w	r3, r3, #16
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d02a      	beq.n	8009ae8 <HAL_ADC_IRQHandler+0x324>
 8009a92:	697b      	ldr	r3, [r7, #20]
 8009a94:	f003 0310 	and.w	r3, r3, #16
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d025      	beq.n	8009ae8 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d102      	bne.n	8009aaa <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8009aa4:	2301      	movs	r3, #1
 8009aa6:	61fb      	str	r3, [r7, #28]
 8009aa8:	e008      	b.n	8009abc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	f003 0301 	and.w	r3, r3, #1
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d001      	beq.n	8009abc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8009abc:	69fb      	ldr	r3, [r7, #28]
 8009abe:	2b01      	cmp	r3, #1
 8009ac0:	d10e      	bne.n	8009ae0 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ac6:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ad2:	f043 0202 	orr.w	r2, r3, #2
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 f83a 	bl	8009b54 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	2210      	movs	r2, #16
 8009ae6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8009ae8:	69bb      	ldr	r3, [r7, #24]
 8009aea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d018      	beq.n	8009b24 <HAL_ADC_IRQHandler+0x360>
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d013      	beq.n	8009b24 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b00:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009b0c:	f043 0208 	orr.w	r2, r3, #8
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009b1c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	f000 fc0e 	bl	800a340 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8009b24:	bf00      	nop
 8009b26:	3720      	adds	r7, #32
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8009b34:	bf00      	nop
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr

08009b40 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b0b6      	sub	sp, #216	@ 0xd8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8009b78:	2300      	movs	r3, #0
 8009b7a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d101      	bne.n	8009b8a <HAL_ADC_ConfigChannel+0x22>
 8009b86:	2302      	movs	r3, #2
 8009b88:	e3bb      	b.n	800a302 <HAL_ADC_ConfigChannel+0x79a>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2201      	movs	r2, #1
 8009b8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff fcab 	bl	80094f2 <LL_ADC_REG_IsConversionOngoing>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f040 83a0 	bne.w	800a2e4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685b      	ldr	r3, [r3, #4]
 8009bb0:	2b05      	cmp	r3, #5
 8009bb2:	d824      	bhi.n	8009bfe <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	685b      	ldr	r3, [r3, #4]
 8009bb8:	3b02      	subs	r3, #2
 8009bba:	2b03      	cmp	r3, #3
 8009bbc:	d81b      	bhi.n	8009bf6 <HAL_ADC_ConfigChannel+0x8e>
 8009bbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009bc4 <HAL_ADC_ConfigChannel+0x5c>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009bd5 	.word	0x08009bd5
 8009bc8:	08009bdd 	.word	0x08009bdd
 8009bcc:	08009be5 	.word	0x08009be5
 8009bd0:	08009bed 	.word	0x08009bed
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8009bd4:	230c      	movs	r3, #12
 8009bd6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009bda:	e010      	b.n	8009bfe <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8009bdc:	2312      	movs	r3, #18
 8009bde:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009be2:	e00c      	b.n	8009bfe <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8009be4:	2318      	movs	r3, #24
 8009be6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009bea:	e008      	b.n	8009bfe <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8009bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009bf0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009bf4:	e003      	b.n	8009bfe <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8009bf6:	2306      	movs	r3, #6
 8009bf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8009bfc:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6818      	ldr	r0, [r3, #0]
 8009c02:	683b      	ldr	r3, [r7, #0]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	461a      	mov	r2, r3
 8009c08:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8009c0c:	f7ff fb82 	bl	8009314 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fc6c 	bl	80094f2 <LL_ADC_REG_IsConversionOngoing>
 8009c1a:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f7ff fc78 	bl	8009518 <LL_ADC_INJ_IsConversionOngoing>
 8009c28:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009c2c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	f040 81a4 	bne.w	8009f7e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009c36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f040 819f 	bne.w	8009f7e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	6818      	ldr	r0, [r3, #0]
 8009c44:	683b      	ldr	r3, [r7, #0]
 8009c46:	6819      	ldr	r1, [r3, #0]
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	689b      	ldr	r3, [r3, #8]
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	f7ff fba0 	bl	8009392 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	695a      	ldr	r2, [r3, #20]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	68db      	ldr	r3, [r3, #12]
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	005b      	lsls	r3, r3, #1
 8009c64:	fa02 f303 	lsl.w	r3, r2, r3
 8009c68:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	691b      	ldr	r3, [r3, #16]
 8009c70:	2b04      	cmp	r3, #4
 8009c72:	d00a      	beq.n	8009c8a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	6818      	ldr	r0, [r3, #0]
 8009c78:	683b      	ldr	r3, [r7, #0]
 8009c7a:	6919      	ldr	r1, [r3, #16]
 8009c7c:	683b      	ldr	r3, [r7, #0]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8009c84:	f7ff fade 	bl	8009244 <LL_ADC_SetOffset>
 8009c88:	e179      	b.n	8009f7e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	2100      	movs	r1, #0
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff fafb 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009c96:	4603      	mov	r3, r0
 8009c98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d10a      	bne.n	8009cb6 <HAL_ADC_ConfigChannel+0x14e>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2100      	movs	r1, #0
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f7ff faf0 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009cac:	4603      	mov	r3, r0
 8009cae:	0e9b      	lsrs	r3, r3, #26
 8009cb0:	f003 021f 	and.w	r2, r3, #31
 8009cb4:	e01e      	b.n	8009cf4 <HAL_ADC_ConfigChannel+0x18c>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2100      	movs	r1, #0
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7ff fae5 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cc8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8009ccc:	fa93 f3a3 	rbit	r3, r3
 8009cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8009cd4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009cd8:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8009cdc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	d101      	bne.n	8009ce8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8009ce4:	2320      	movs	r3, #32
 8009ce6:	e004      	b.n	8009cf2 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8009ce8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8009cec:	fab3 f383 	clz	r3, r3
 8009cf0:	b2db      	uxtb	r3, r3
 8009cf2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009cf4:	683b      	ldr	r3, [r7, #0]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d105      	bne.n	8009d0c <HAL_ADC_ConfigChannel+0x1a4>
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	0e9b      	lsrs	r3, r3, #26
 8009d06:	f003 031f 	and.w	r3, r3, #31
 8009d0a:	e018      	b.n	8009d3e <HAL_ADC_ConfigChannel+0x1d6>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d14:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009d18:	fa93 f3a3 	rbit	r3, r3
 8009d1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8009d20:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009d24:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8009d28:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d101      	bne.n	8009d34 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8009d30:	2320      	movs	r3, #32
 8009d32:	e004      	b.n	8009d3e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8009d34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8009d38:	fab3 f383 	clz	r3, r3
 8009d3c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d106      	bne.n	8009d50 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	2200      	movs	r2, #0
 8009d48:	2100      	movs	r1, #0
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f7ff fab4 	bl	80092b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	2101      	movs	r1, #1
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7ff fa98 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10a      	bne.n	8009d7c <HAL_ADC_ConfigChannel+0x214>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	4618      	mov	r0, r3
 8009d6e:	f7ff fa8d 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009d72:	4603      	mov	r3, r0
 8009d74:	0e9b      	lsrs	r3, r3, #26
 8009d76:	f003 021f 	and.w	r2, r3, #31
 8009d7a:	e01e      	b.n	8009dba <HAL_ADC_ConfigChannel+0x252>
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	2101      	movs	r1, #1
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7ff fa82 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009d88:	4603      	mov	r3, r0
 8009d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009d92:	fa93 f3a3 	rbit	r3, r3
 8009d96:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8009d9a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009d9e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 8009da2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d101      	bne.n	8009dae <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8009daa:	2320      	movs	r3, #32
 8009dac:	e004      	b.n	8009db8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8009dae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009db2:	fab3 f383 	clz	r3, r3
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d105      	bne.n	8009dd2 <HAL_ADC_ConfigChannel+0x26a>
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	0e9b      	lsrs	r3, r3, #26
 8009dcc:	f003 031f 	and.w	r3, r3, #31
 8009dd0:	e018      	b.n	8009e04 <HAL_ADC_ConfigChannel+0x29c>
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dda:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009dde:	fa93 f3a3 	rbit	r3, r3
 8009de2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8009de6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009dea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8009dee:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d101      	bne.n	8009dfa <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8009df6:	2320      	movs	r3, #32
 8009df8:	e004      	b.n	8009e04 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8009dfa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009dfe:	fab3 f383 	clz	r3, r3
 8009e02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8009e04:	429a      	cmp	r2, r3
 8009e06:	d106      	bne.n	8009e16 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	2101      	movs	r1, #1
 8009e10:	4618      	mov	r0, r3
 8009e12:	f7ff fa51 	bl	80092b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	2102      	movs	r1, #2
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f7ff fa35 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009e22:	4603      	mov	r3, r0
 8009e24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d10a      	bne.n	8009e42 <HAL_ADC_ConfigChannel+0x2da>
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2102      	movs	r1, #2
 8009e32:	4618      	mov	r0, r3
 8009e34:	f7ff fa2a 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009e38:	4603      	mov	r3, r0
 8009e3a:	0e9b      	lsrs	r3, r3, #26
 8009e3c:	f003 021f 	and.w	r2, r3, #31
 8009e40:	e01e      	b.n	8009e80 <HAL_ADC_ConfigChannel+0x318>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2102      	movs	r1, #2
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7ff fa1f 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009e4e:	4603      	mov	r3, r0
 8009e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009e58:	fa93 f3a3 	rbit	r3, r3
 8009e5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 8009e60:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009e64:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 8009e68:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d101      	bne.n	8009e74 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8009e70:	2320      	movs	r3, #32
 8009e72:	e004      	b.n	8009e7e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8009e74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009e78:	fab3 f383 	clz	r3, r3
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d105      	bne.n	8009e98 <HAL_ADC_ConfigChannel+0x330>
 8009e8c:	683b      	ldr	r3, [r7, #0]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	0e9b      	lsrs	r3, r3, #26
 8009e92:	f003 031f 	and.w	r3, r3, #31
 8009e96:	e014      	b.n	8009ec2 <HAL_ADC_ConfigChannel+0x35a>
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009ea0:	fa93 f3a3 	rbit	r3, r3
 8009ea4:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8009ea6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ea8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8009eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8009eb4:	2320      	movs	r3, #32
 8009eb6:	e004      	b.n	8009ec2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8009eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009ebc:	fab3 f383 	clz	r3, r3
 8009ec0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d106      	bne.n	8009ed4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2200      	movs	r2, #0
 8009ecc:	2102      	movs	r1, #2
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7ff f9f2 	bl	80092b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	2103      	movs	r1, #3
 8009eda:	4618      	mov	r0, r3
 8009edc:	f7ff f9d6 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <HAL_ADC_ConfigChannel+0x398>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2103      	movs	r1, #3
 8009ef0:	4618      	mov	r0, r3
 8009ef2:	f7ff f9cb 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009ef6:	4603      	mov	r3, r0
 8009ef8:	0e9b      	lsrs	r3, r3, #26
 8009efa:	f003 021f 	and.w	r2, r3, #31
 8009efe:	e017      	b.n	8009f30 <HAL_ADC_ConfigChannel+0x3c8>
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2103      	movs	r1, #3
 8009f06:	4618      	mov	r0, r3
 8009f08:	f7ff f9c0 	bl	800928c <LL_ADC_GetOffsetChannel>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009f12:	fa93 f3a3 	rbit	r3, r3
 8009f16:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8009f18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f1a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8009f1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d101      	bne.n	8009f26 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8009f22:	2320      	movs	r3, #32
 8009f24:	e003      	b.n	8009f2e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8009f26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f28:	fab3 f383 	clz	r3, r3
 8009f2c:	b2db      	uxtb	r3, r3
 8009f2e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8009f30:	683b      	ldr	r3, [r7, #0]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d105      	bne.n	8009f48 <HAL_ADC_ConfigChannel+0x3e0>
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	0e9b      	lsrs	r3, r3, #26
 8009f42:	f003 031f 	and.w	r3, r3, #31
 8009f46:	e011      	b.n	8009f6c <HAL_ADC_ConfigChannel+0x404>
 8009f48:	683b      	ldr	r3, [r7, #0]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009f4e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009f50:	fa93 f3a3 	rbit	r3, r3
 8009f54:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 8009f56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009f58:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 8009f5a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8009f60:	2320      	movs	r3, #32
 8009f62:	e003      	b.n	8009f6c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8009f64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009f66:	fab3 f383 	clz	r3, r3
 8009f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	d106      	bne.n	8009f7e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2200      	movs	r2, #0
 8009f76:	2103      	movs	r1, #3
 8009f78:	4618      	mov	r0, r3
 8009f7a:	f7ff f99d 	bl	80092b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4618      	mov	r0, r3
 8009f84:	f7ff faa2 	bl	80094cc <LL_ADC_IsEnabled>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f040 8140 	bne.w	800a210 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6818      	ldr	r0, [r3, #0]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	6819      	ldr	r1, [r3, #0]
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	68db      	ldr	r3, [r3, #12]
 8009f9c:	461a      	mov	r2, r3
 8009f9e:	f7ff fa23 	bl	80093e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	68db      	ldr	r3, [r3, #12]
 8009fa6:	4a8f      	ldr	r2, [pc, #572]	@ (800a1e4 <HAL_ADC_ConfigChannel+0x67c>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	f040 8131 	bne.w	800a210 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d10b      	bne.n	8009fd6 <HAL_ADC_ConfigChannel+0x46e>
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	0e9b      	lsrs	r3, r3, #26
 8009fc4:	3301      	adds	r3, #1
 8009fc6:	f003 031f 	and.w	r3, r3, #31
 8009fca:	2b09      	cmp	r3, #9
 8009fcc:	bf94      	ite	ls
 8009fce:	2301      	movls	r3, #1
 8009fd0:	2300      	movhi	r3, #0
 8009fd2:	b2db      	uxtb	r3, r3
 8009fd4:	e019      	b.n	800a00a <HAL_ADC_ConfigChannel+0x4a2>
 8009fd6:	683b      	ldr	r3, [r7, #0]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009fdc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009fde:	fa93 f3a3 	rbit	r3, r3
 8009fe2:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8009fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009fe6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8009fe8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d101      	bne.n	8009ff2 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8009fee:	2320      	movs	r3, #32
 8009ff0:	e003      	b.n	8009ffa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8009ff2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009ff4:	fab3 f383 	clz	r3, r3
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	f003 031f 	and.w	r3, r3, #31
 800a000:	2b09      	cmp	r3, #9
 800a002:	bf94      	ite	ls
 800a004:	2301      	movls	r3, #1
 800a006:	2300      	movhi	r3, #0
 800a008:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d079      	beq.n	800a102 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a016:	2b00      	cmp	r3, #0
 800a018:	d107      	bne.n	800a02a <HAL_ADC_ConfigChannel+0x4c2>
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	0e9b      	lsrs	r3, r3, #26
 800a020:	3301      	adds	r3, #1
 800a022:	069b      	lsls	r3, r3, #26
 800a024:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a028:	e015      	b.n	800a056 <HAL_ADC_ConfigChannel+0x4ee>
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a030:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a032:	fa93 f3a3 	rbit	r3, r3
 800a036:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 800a038:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800a03a:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 800a03c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d101      	bne.n	800a046 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800a042:	2320      	movs	r3, #32
 800a044:	e003      	b.n	800a04e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800a046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a048:	fab3 f383 	clz	r3, r3
 800a04c:	b2db      	uxtb	r3, r3
 800a04e:	3301      	adds	r3, #1
 800a050:	069b      	lsls	r3, r3, #26
 800a052:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d109      	bne.n	800a076 <HAL_ADC_ConfigChannel+0x50e>
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	0e9b      	lsrs	r3, r3, #26
 800a068:	3301      	adds	r3, #1
 800a06a:	f003 031f 	and.w	r3, r3, #31
 800a06e:	2101      	movs	r1, #1
 800a070:	fa01 f303 	lsl.w	r3, r1, r3
 800a074:	e017      	b.n	800a0a6 <HAL_ADC_ConfigChannel+0x53e>
 800a076:	683b      	ldr	r3, [r7, #0]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a07e:	fa93 f3a3 	rbit	r3, r3
 800a082:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800a084:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a086:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 800a088:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800a08e:	2320      	movs	r3, #32
 800a090:	e003      	b.n	800a09a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800a092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a094:	fab3 f383 	clz	r3, r3
 800a098:	b2db      	uxtb	r3, r3
 800a09a:	3301      	adds	r3, #1
 800a09c:	f003 031f 	and.w	r3, r3, #31
 800a0a0:	2101      	movs	r1, #1
 800a0a2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0a6:	ea42 0103 	orr.w	r1, r2, r3
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d10a      	bne.n	800a0cc <HAL_ADC_ConfigChannel+0x564>
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	0e9b      	lsrs	r3, r3, #26
 800a0bc:	3301      	adds	r3, #1
 800a0be:	f003 021f 	and.w	r2, r3, #31
 800a0c2:	4613      	mov	r3, r2
 800a0c4:	005b      	lsls	r3, r3, #1
 800a0c6:	4413      	add	r3, r2
 800a0c8:	051b      	lsls	r3, r3, #20
 800a0ca:	e018      	b.n	800a0fe <HAL_ADC_ConfigChannel+0x596>
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a0d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0d4:	fa93 f3a3 	rbit	r3, r3
 800a0d8:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800a0da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800a0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d101      	bne.n	800a0e8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800a0e4:	2320      	movs	r3, #32
 800a0e6:	e003      	b.n	800a0f0 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 800a0e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a0ea:	fab3 f383 	clz	r3, r3
 800a0ee:	b2db      	uxtb	r3, r3
 800a0f0:	3301      	adds	r3, #1
 800a0f2:	f003 021f 	and.w	r2, r3, #31
 800a0f6:	4613      	mov	r3, r2
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	4413      	add	r3, r2
 800a0fc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a0fe:	430b      	orrs	r3, r1
 800a100:	e081      	b.n	800a206 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d107      	bne.n	800a11e <HAL_ADC_ConfigChannel+0x5b6>
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	0e9b      	lsrs	r3, r3, #26
 800a114:	3301      	adds	r3, #1
 800a116:	069b      	lsls	r3, r3, #26
 800a118:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a11c:	e015      	b.n	800a14a <HAL_ADC_ConfigChannel+0x5e2>
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a126:	fa93 f3a3 	rbit	r3, r3
 800a12a:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 800a12c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a12e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800a130:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a132:	2b00      	cmp	r3, #0
 800a134:	d101      	bne.n	800a13a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800a136:	2320      	movs	r3, #32
 800a138:	e003      	b.n	800a142 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800a13a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a13c:	fab3 f383 	clz	r3, r3
 800a140:	b2db      	uxtb	r3, r3
 800a142:	3301      	adds	r3, #1
 800a144:	069b      	lsls	r3, r3, #26
 800a146:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a152:	2b00      	cmp	r3, #0
 800a154:	d109      	bne.n	800a16a <HAL_ADC_ConfigChannel+0x602>
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	0e9b      	lsrs	r3, r3, #26
 800a15c:	3301      	adds	r3, #1
 800a15e:	f003 031f 	and.w	r3, r3, #31
 800a162:	2101      	movs	r1, #1
 800a164:	fa01 f303 	lsl.w	r3, r1, r3
 800a168:	e017      	b.n	800a19a <HAL_ADC_ConfigChannel+0x632>
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	fa93 f3a3 	rbit	r3, r3
 800a176:	61bb      	str	r3, [r7, #24]
  return result;
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800a17c:	6a3b      	ldr	r3, [r7, #32]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d101      	bne.n	800a186 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 800a182:	2320      	movs	r3, #32
 800a184:	e003      	b.n	800a18e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800a186:	6a3b      	ldr	r3, [r7, #32]
 800a188:	fab3 f383 	clz	r3, r3
 800a18c:	b2db      	uxtb	r3, r3
 800a18e:	3301      	adds	r3, #1
 800a190:	f003 031f 	and.w	r3, r3, #31
 800a194:	2101      	movs	r1, #1
 800a196:	fa01 f303 	lsl.w	r3, r1, r3
 800a19a:	ea42 0103 	orr.w	r1, r2, r3
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d10d      	bne.n	800a1c6 <HAL_ADC_ConfigChannel+0x65e>
 800a1aa:	683b      	ldr	r3, [r7, #0]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	0e9b      	lsrs	r3, r3, #26
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	f003 021f 	and.w	r2, r3, #31
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	005b      	lsls	r3, r3, #1
 800a1ba:	4413      	add	r3, r2
 800a1bc:	3b1e      	subs	r3, #30
 800a1be:	051b      	lsls	r3, r3, #20
 800a1c0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a1c4:	e01e      	b.n	800a204 <HAL_ADC_ConfigChannel+0x69c>
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	fa93 f3a3 	rbit	r3, r3
 800a1d2:	60fb      	str	r3, [r7, #12]
  return result;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a1d8:	697b      	ldr	r3, [r7, #20]
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d104      	bne.n	800a1e8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800a1de:	2320      	movs	r3, #32
 800a1e0:	e006      	b.n	800a1f0 <HAL_ADC_ConfigChannel+0x688>
 800a1e2:	bf00      	nop
 800a1e4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	fab3 f383 	clz	r3, r3
 800a1ee:	b2db      	uxtb	r3, r3
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	f003 021f 	and.w	r2, r3, #31
 800a1f6:	4613      	mov	r3, r2
 800a1f8:	005b      	lsls	r3, r3, #1
 800a1fa:	4413      	add	r3, r2
 800a1fc:	3b1e      	subs	r3, #30
 800a1fe:	051b      	lsls	r3, r3, #20
 800a200:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a204:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800a206:	683a      	ldr	r2, [r7, #0]
 800a208:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800a20a:	4619      	mov	r1, r3
 800a20c:	f7ff f8c1 	bl	8009392 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	4b3d      	ldr	r3, [pc, #244]	@ (800a30c <HAL_ADC_ConfigChannel+0x7a4>)
 800a216:	4013      	ands	r3, r2
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d06c      	beq.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800a21c:	483c      	ldr	r0, [pc, #240]	@ (800a310 <HAL_ADC_ConfigChannel+0x7a8>)
 800a21e:	f7ff f803 	bl	8009228 <LL_ADC_GetCommonPathInternalCh>
 800a222:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	4a3a      	ldr	r2, [pc, #232]	@ (800a314 <HAL_ADC_ConfigChannel+0x7ac>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d127      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800a230:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a234:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d121      	bne.n	800a280 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a35      	ldr	r2, [pc, #212]	@ (800a318 <HAL_ADC_ConfigChannel+0x7b0>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d157      	bne.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a246:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a24a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800a24e:	4619      	mov	r1, r3
 800a250:	482f      	ldr	r0, [pc, #188]	@ (800a310 <HAL_ADC_ConfigChannel+0x7a8>)
 800a252:	f7fe ffd6 	bl	8009202 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800a256:	4b31      	ldr	r3, [pc, #196]	@ (800a31c <HAL_ADC_ConfigChannel+0x7b4>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	099b      	lsrs	r3, r3, #6
 800a25c:	4a30      	ldr	r2, [pc, #192]	@ (800a320 <HAL_ADC_ConfigChannel+0x7b8>)
 800a25e:	fba2 2303 	umull	r2, r3, r2, r3
 800a262:	099b      	lsrs	r3, r3, #6
 800a264:	1c5a      	adds	r2, r3, #1
 800a266:	4613      	mov	r3, r2
 800a268:	005b      	lsls	r3, r3, #1
 800a26a:	4413      	add	r3, r2
 800a26c:	009b      	lsls	r3, r3, #2
 800a26e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a270:	e002      	b.n	800a278 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	3b01      	subs	r3, #1
 800a276:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800a278:	68bb      	ldr	r3, [r7, #8]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d1f9      	bne.n	800a272 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a27e:	e03a      	b.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	4a27      	ldr	r2, [pc, #156]	@ (800a324 <HAL_ADC_ConfigChannel+0x7bc>)
 800a286:	4293      	cmp	r3, r2
 800a288:	d113      	bne.n	800a2b2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800a28a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a28e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a292:	2b00      	cmp	r3, #0
 800a294:	d10d      	bne.n	800a2b2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a1f      	ldr	r2, [pc, #124]	@ (800a318 <HAL_ADC_ConfigChannel+0x7b0>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d12a      	bne.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a2a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2a4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	4819      	ldr	r0, [pc, #100]	@ (800a310 <HAL_ADC_ConfigChannel+0x7a8>)
 800a2ac:	f7fe ffa9 	bl	8009202 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a2b0:	e021      	b.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a1c      	ldr	r2, [pc, #112]	@ (800a328 <HAL_ADC_ConfigChannel+0x7c0>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d11c      	bne.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a2bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d116      	bne.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a12      	ldr	r2, [pc, #72]	@ (800a318 <HAL_ADC_ConfigChannel+0x7b0>)
 800a2ce:	4293      	cmp	r3, r2
 800a2d0:	d111      	bne.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a2d2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800a2d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800a2da:	4619      	mov	r1, r3
 800a2dc:	480c      	ldr	r0, [pc, #48]	@ (800a310 <HAL_ADC_ConfigChannel+0x7a8>)
 800a2de:	f7fe ff90 	bl	8009202 <LL_ADC_SetCommonPathInternalCh>
 800a2e2:	e008      	b.n	800a2f6 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2e8:	f043 0220 	orr.w	r2, r3, #32
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 800a2fe:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800a302:	4618      	mov	r0, r3
 800a304:	37d8      	adds	r7, #216	@ 0xd8
 800a306:	46bd      	mov	sp, r7
 800a308:	bd80      	pop	{r7, pc}
 800a30a:	bf00      	nop
 800a30c:	80080000 	.word	0x80080000
 800a310:	50040300 	.word	0x50040300
 800a314:	c7520000 	.word	0xc7520000
 800a318:	50040000 	.word	0x50040000
 800a31c:	20000048 	.word	0x20000048
 800a320:	053e2d63 	.word	0x053e2d63
 800a324:	cb840000 	.word	0xcb840000
 800a328:	80000001 	.word	0x80000001

0800a32c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800a334:	bf00      	nop
 800a336:	370c      	adds	r7, #12
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800a354:	b480      	push	{r7}
 800a356:	b083      	sub	sp, #12
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 800a35c:	bf00      	nop
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800a3a0:	4b0c      	ldr	r3, [pc, #48]	@ (800a3d4 <__NVIC_SetPriorityGrouping+0x44>)
 800a3a2:	68db      	ldr	r3, [r3, #12]
 800a3a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800a3ac:	4013      	ands	r3, r2
 800a3ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800a3b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800a3bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a3c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800a3c2:	4a04      	ldr	r2, [pc, #16]	@ (800a3d4 <__NVIC_SetPriorityGrouping+0x44>)
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	60d3      	str	r3, [r2, #12]
}
 800a3c8:	bf00      	nop
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr
 800a3d4:	e000ed00 	.word	0xe000ed00

0800a3d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800a3d8:	b480      	push	{r7}
 800a3da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800a3dc:	4b04      	ldr	r3, [pc, #16]	@ (800a3f0 <__NVIC_GetPriorityGrouping+0x18>)
 800a3de:	68db      	ldr	r3, [r3, #12]
 800a3e0:	0a1b      	lsrs	r3, r3, #8
 800a3e2:	f003 0307 	and.w	r3, r3, #7
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	e000ed00 	.word	0xe000ed00

0800a3f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b083      	sub	sp, #12
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a402:	2b00      	cmp	r3, #0
 800a404:	db0b      	blt.n	800a41e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800a406:	79fb      	ldrb	r3, [r7, #7]
 800a408:	f003 021f 	and.w	r2, r3, #31
 800a40c:	4907      	ldr	r1, [pc, #28]	@ (800a42c <__NVIC_EnableIRQ+0x38>)
 800a40e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a412:	095b      	lsrs	r3, r3, #5
 800a414:	2001      	movs	r0, #1
 800a416:	fa00 f202 	lsl.w	r2, r0, r2
 800a41a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800a41e:	bf00      	nop
 800a420:	370c      	adds	r7, #12
 800a422:	46bd      	mov	sp, r7
 800a424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop
 800a42c:	e000e100 	.word	0xe000e100

0800a430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
 800a436:	4603      	mov	r3, r0
 800a438:	6039      	str	r1, [r7, #0]
 800a43a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a43c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a440:	2b00      	cmp	r3, #0
 800a442:	db0a      	blt.n	800a45a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	b2da      	uxtb	r2, r3
 800a448:	490c      	ldr	r1, [pc, #48]	@ (800a47c <__NVIC_SetPriority+0x4c>)
 800a44a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a44e:	0112      	lsls	r2, r2, #4
 800a450:	b2d2      	uxtb	r2, r2
 800a452:	440b      	add	r3, r1
 800a454:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800a458:	e00a      	b.n	800a470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	4908      	ldr	r1, [pc, #32]	@ (800a480 <__NVIC_SetPriority+0x50>)
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	f003 030f 	and.w	r3, r3, #15
 800a466:	3b04      	subs	r3, #4
 800a468:	0112      	lsls	r2, r2, #4
 800a46a:	b2d2      	uxtb	r2, r2
 800a46c:	440b      	add	r3, r1
 800a46e:	761a      	strb	r2, [r3, #24]
}
 800a470:	bf00      	nop
 800a472:	370c      	adds	r7, #12
 800a474:	46bd      	mov	sp, r7
 800a476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47a:	4770      	bx	lr
 800a47c:	e000e100 	.word	0xe000e100
 800a480:	e000ed00 	.word	0xe000ed00

0800a484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a484:	b480      	push	{r7}
 800a486:	b089      	sub	sp, #36	@ 0x24
 800a488:	af00      	add	r7, sp, #0
 800a48a:	60f8      	str	r0, [r7, #12]
 800a48c:	60b9      	str	r1, [r7, #8]
 800a48e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	f003 0307 	and.w	r3, r3, #7
 800a496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800a498:	69fb      	ldr	r3, [r7, #28]
 800a49a:	f1c3 0307 	rsb	r3, r3, #7
 800a49e:	2b04      	cmp	r3, #4
 800a4a0:	bf28      	it	cs
 800a4a2:	2304      	movcs	r3, #4
 800a4a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	3304      	adds	r3, #4
 800a4aa:	2b06      	cmp	r3, #6
 800a4ac:	d902      	bls.n	800a4b4 <NVIC_EncodePriority+0x30>
 800a4ae:	69fb      	ldr	r3, [r7, #28]
 800a4b0:	3b03      	subs	r3, #3
 800a4b2:	e000      	b.n	800a4b6 <NVIC_EncodePriority+0x32>
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a4bc:	69bb      	ldr	r3, [r7, #24]
 800a4be:	fa02 f303 	lsl.w	r3, r2, r3
 800a4c2:	43da      	mvns	r2, r3
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	401a      	ands	r2, r3
 800a4c8:	697b      	ldr	r3, [r7, #20]
 800a4ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800a4cc:	f04f 31ff 	mov.w	r1, #4294967295
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d6:	43d9      	mvns	r1, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800a4dc:	4313      	orrs	r3, r2
         );
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3724      	adds	r7, #36	@ 0x24
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr
	...

0800a4ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b082      	sub	sp, #8
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	3b01      	subs	r3, #1
 800a4f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4fc:	d301      	bcc.n	800a502 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800a4fe:	2301      	movs	r3, #1
 800a500:	e00f      	b.n	800a522 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800a502:	4a0a      	ldr	r2, [pc, #40]	@ (800a52c <SysTick_Config+0x40>)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	3b01      	subs	r3, #1
 800a508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800a50a:	210f      	movs	r1, #15
 800a50c:	f04f 30ff 	mov.w	r0, #4294967295
 800a510:	f7ff ff8e 	bl	800a430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800a514:	4b05      	ldr	r3, [pc, #20]	@ (800a52c <SysTick_Config+0x40>)
 800a516:	2200      	movs	r2, #0
 800a518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800a51a:	4b04      	ldr	r3, [pc, #16]	@ (800a52c <SysTick_Config+0x40>)
 800a51c:	2207      	movs	r2, #7
 800a51e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800a520:	2300      	movs	r3, #0
}
 800a522:	4618      	mov	r0, r3
 800a524:	3708      	adds	r7, #8
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}
 800a52a:	bf00      	nop
 800a52c:	e000e010 	.word	0xe000e010

0800a530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800a538:	6878      	ldr	r0, [r7, #4]
 800a53a:	f7ff ff29 	bl	800a390 <__NVIC_SetPriorityGrouping>
}
 800a53e:	bf00      	nop
 800a540:	3708      	adds	r7, #8
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}

0800a546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800a546:	b580      	push	{r7, lr}
 800a548:	b086      	sub	sp, #24
 800a54a:	af00      	add	r7, sp, #0
 800a54c:	4603      	mov	r3, r0
 800a54e:	60b9      	str	r1, [r7, #8]
 800a550:	607a      	str	r2, [r7, #4]
 800a552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800a554:	2300      	movs	r3, #0
 800a556:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800a558:	f7ff ff3e 	bl	800a3d8 <__NVIC_GetPriorityGrouping>
 800a55c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	68b9      	ldr	r1, [r7, #8]
 800a562:	6978      	ldr	r0, [r7, #20]
 800a564:	f7ff ff8e 	bl	800a484 <NVIC_EncodePriority>
 800a568:	4602      	mov	r2, r0
 800a56a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a56e:	4611      	mov	r1, r2
 800a570:	4618      	mov	r0, r3
 800a572:	f7ff ff5d 	bl	800a430 <__NVIC_SetPriority>
}
 800a576:	bf00      	nop
 800a578:	3718      	adds	r7, #24
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b082      	sub	sp, #8
 800a582:	af00      	add	r7, sp, #0
 800a584:	4603      	mov	r3, r0
 800a586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800a588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a58c:	4618      	mov	r0, r3
 800a58e:	f7ff ff31 	bl	800a3f4 <__NVIC_EnableIRQ>
}
 800a592:	bf00      	nop
 800a594:	3708      	adds	r7, #8
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b082      	sub	sp, #8
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f7ff ffa2 	bl	800a4ec <SysTick_Config>
 800a5a8:	4603      	mov	r3, r0
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3708      	adds	r7, #8
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}
	...

0800a5b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a5c2:	e148      	b.n	800a856 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	681a      	ldr	r2, [r3, #0]
 800a5c8:	2101      	movs	r1, #1
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	f000 813a 	beq.w	800a850 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	f003 0303 	and.w	r3, r3, #3
 800a5e4:	2b01      	cmp	r3, #1
 800a5e6:	d005      	beq.n	800a5f4 <HAL_GPIO_Init+0x40>
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	685b      	ldr	r3, [r3, #4]
 800a5ec:	f003 0303 	and.w	r3, r3, #3
 800a5f0:	2b02      	cmp	r3, #2
 800a5f2:	d130      	bne.n	800a656 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	689b      	ldr	r3, [r3, #8]
 800a5f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	005b      	lsls	r3, r3, #1
 800a5fe:	2203      	movs	r2, #3
 800a600:	fa02 f303 	lsl.w	r3, r2, r3
 800a604:	43db      	mvns	r3, r3
 800a606:	693a      	ldr	r2, [r7, #16]
 800a608:	4013      	ands	r3, r2
 800a60a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	68da      	ldr	r2, [r3, #12]
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	005b      	lsls	r3, r3, #1
 800a614:	fa02 f303 	lsl.w	r3, r2, r3
 800a618:	693a      	ldr	r2, [r7, #16]
 800a61a:	4313      	orrs	r3, r2
 800a61c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	693a      	ldr	r2, [r7, #16]
 800a622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	685b      	ldr	r3, [r3, #4]
 800a628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a62a:	2201      	movs	r2, #1
 800a62c:	697b      	ldr	r3, [r7, #20]
 800a62e:	fa02 f303 	lsl.w	r3, r2, r3
 800a632:	43db      	mvns	r3, r3
 800a634:	693a      	ldr	r2, [r7, #16]
 800a636:	4013      	ands	r3, r2
 800a638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	091b      	lsrs	r3, r3, #4
 800a640:	f003 0201 	and.w	r2, r3, #1
 800a644:	697b      	ldr	r3, [r7, #20]
 800a646:	fa02 f303 	lsl.w	r3, r2, r3
 800a64a:	693a      	ldr	r2, [r7, #16]
 800a64c:	4313      	orrs	r3, r2
 800a64e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	f003 0303 	and.w	r3, r3, #3
 800a65e:	2b03      	cmp	r3, #3
 800a660:	d017      	beq.n	800a692 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	68db      	ldr	r3, [r3, #12]
 800a666:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	005b      	lsls	r3, r3, #1
 800a66c:	2203      	movs	r2, #3
 800a66e:	fa02 f303 	lsl.w	r3, r2, r3
 800a672:	43db      	mvns	r3, r3
 800a674:	693a      	ldr	r2, [r7, #16]
 800a676:	4013      	ands	r3, r2
 800a678:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	689a      	ldr	r2, [r3, #8]
 800a67e:	697b      	ldr	r3, [r7, #20]
 800a680:	005b      	lsls	r3, r3, #1
 800a682:	fa02 f303 	lsl.w	r3, r2, r3
 800a686:	693a      	ldr	r2, [r7, #16]
 800a688:	4313      	orrs	r3, r2
 800a68a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	693a      	ldr	r2, [r7, #16]
 800a690:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	685b      	ldr	r3, [r3, #4]
 800a696:	f003 0303 	and.w	r3, r3, #3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d123      	bne.n	800a6e6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	08da      	lsrs	r2, r3, #3
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	3208      	adds	r2, #8
 800a6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	f003 0307 	and.w	r3, r3, #7
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	220f      	movs	r2, #15
 800a6b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ba:	43db      	mvns	r3, r3
 800a6bc:	693a      	ldr	r2, [r7, #16]
 800a6be:	4013      	ands	r3, r2
 800a6c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	691a      	ldr	r2, [r3, #16]
 800a6c6:	697b      	ldr	r3, [r7, #20]
 800a6c8:	f003 0307 	and.w	r3, r3, #7
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a6d2:	693a      	ldr	r2, [r7, #16]
 800a6d4:	4313      	orrs	r3, r2
 800a6d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800a6d8:	697b      	ldr	r3, [r7, #20]
 800a6da:	08da      	lsrs	r2, r3, #3
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	3208      	adds	r2, #8
 800a6e0:	6939      	ldr	r1, [r7, #16]
 800a6e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800a6ec:	697b      	ldr	r3, [r7, #20]
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	2203      	movs	r2, #3
 800a6f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a6f6:	43db      	mvns	r3, r3
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	4013      	ands	r3, r2
 800a6fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800a6fe:	683b      	ldr	r3, [r7, #0]
 800a700:	685b      	ldr	r3, [r3, #4]
 800a702:	f003 0203 	and.w	r2, r3, #3
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	005b      	lsls	r3, r3, #1
 800a70a:	fa02 f303 	lsl.w	r3, r2, r3
 800a70e:	693a      	ldr	r2, [r7, #16]
 800a710:	4313      	orrs	r3, r2
 800a712:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	693a      	ldr	r2, [r7, #16]
 800a718:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	685b      	ldr	r3, [r3, #4]
 800a71e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 8094 	beq.w	800a850 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a728:	4b52      	ldr	r3, [pc, #328]	@ (800a874 <HAL_GPIO_Init+0x2c0>)
 800a72a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a72c:	4a51      	ldr	r2, [pc, #324]	@ (800a874 <HAL_GPIO_Init+0x2c0>)
 800a72e:	f043 0301 	orr.w	r3, r3, #1
 800a732:	6613      	str	r3, [r2, #96]	@ 0x60
 800a734:	4b4f      	ldr	r3, [pc, #316]	@ (800a874 <HAL_GPIO_Init+0x2c0>)
 800a736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a738:	f003 0301 	and.w	r3, r3, #1
 800a73c:	60bb      	str	r3, [r7, #8]
 800a73e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800a740:	4a4d      	ldr	r2, [pc, #308]	@ (800a878 <HAL_GPIO_Init+0x2c4>)
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	089b      	lsrs	r3, r3, #2
 800a746:	3302      	adds	r3, #2
 800a748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a74c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	f003 0303 	and.w	r3, r3, #3
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	220f      	movs	r2, #15
 800a758:	fa02 f303 	lsl.w	r3, r2, r3
 800a75c:	43db      	mvns	r3, r3
 800a75e:	693a      	ldr	r2, [r7, #16]
 800a760:	4013      	ands	r3, r2
 800a762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a76a:	d00d      	beq.n	800a788 <HAL_GPIO_Init+0x1d4>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	4a43      	ldr	r2, [pc, #268]	@ (800a87c <HAL_GPIO_Init+0x2c8>)
 800a770:	4293      	cmp	r3, r2
 800a772:	d007      	beq.n	800a784 <HAL_GPIO_Init+0x1d0>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	4a42      	ldr	r2, [pc, #264]	@ (800a880 <HAL_GPIO_Init+0x2cc>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d101      	bne.n	800a780 <HAL_GPIO_Init+0x1cc>
 800a77c:	2302      	movs	r3, #2
 800a77e:	e004      	b.n	800a78a <HAL_GPIO_Init+0x1d6>
 800a780:	2307      	movs	r3, #7
 800a782:	e002      	b.n	800a78a <HAL_GPIO_Init+0x1d6>
 800a784:	2301      	movs	r3, #1
 800a786:	e000      	b.n	800a78a <HAL_GPIO_Init+0x1d6>
 800a788:	2300      	movs	r3, #0
 800a78a:	697a      	ldr	r2, [r7, #20]
 800a78c:	f002 0203 	and.w	r2, r2, #3
 800a790:	0092      	lsls	r2, r2, #2
 800a792:	4093      	lsls	r3, r2
 800a794:	693a      	ldr	r2, [r7, #16]
 800a796:	4313      	orrs	r3, r2
 800a798:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800a79a:	4937      	ldr	r1, [pc, #220]	@ (800a878 <HAL_GPIO_Init+0x2c4>)
 800a79c:	697b      	ldr	r3, [r7, #20]
 800a79e:	089b      	lsrs	r3, r3, #2
 800a7a0:	3302      	adds	r3, #2
 800a7a2:	693a      	ldr	r2, [r7, #16]
 800a7a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a7a8:	4b36      	ldr	r3, [pc, #216]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a7aa:	689b      	ldr	r3, [r3, #8]
 800a7ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	43db      	mvns	r3, r3
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	685b      	ldr	r3, [r3, #4]
 800a7bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800a7c4:	693a      	ldr	r2, [r7, #16]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a7cc:	4a2d      	ldr	r2, [pc, #180]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a7d2:	4b2c      	ldr	r3, [pc, #176]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	43db      	mvns	r3, r3
 800a7dc:	693a      	ldr	r2, [r7, #16]
 800a7de:	4013      	ands	r3, r2
 800a7e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800a7e2:	683b      	ldr	r3, [r7, #0]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d003      	beq.n	800a7f6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800a7ee:	693a      	ldr	r2, [r7, #16]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	4313      	orrs	r3, r2
 800a7f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a7f6:	4a23      	ldr	r2, [pc, #140]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800a7fc:	4b21      	ldr	r3, [pc, #132]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a7fe:	685b      	ldr	r3, [r3, #4]
 800a800:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	43db      	mvns	r3, r3
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	4013      	ands	r3, r2
 800a80a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800a80c:	683b      	ldr	r3, [r7, #0]
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a814:	2b00      	cmp	r3, #0
 800a816:	d003      	beq.n	800a820 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800a818:	693a      	ldr	r2, [r7, #16]
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	4313      	orrs	r3, r2
 800a81e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a820:	4a18      	ldr	r2, [pc, #96]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800a826:	4b17      	ldr	r3, [pc, #92]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	43db      	mvns	r3, r3
 800a830:	693a      	ldr	r2, [r7, #16]
 800a832:	4013      	ands	r3, r2
 800a834:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d003      	beq.n	800a84a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800a842:	693a      	ldr	r2, [r7, #16]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4313      	orrs	r3, r2
 800a848:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a84a:	4a0e      	ldr	r2, [pc, #56]	@ (800a884 <HAL_GPIO_Init+0x2d0>)
 800a84c:	693b      	ldr	r3, [r7, #16]
 800a84e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	3301      	adds	r3, #1
 800a854:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	fa22 f303 	lsr.w	r3, r2, r3
 800a860:	2b00      	cmp	r3, #0
 800a862:	f47f aeaf 	bne.w	800a5c4 <HAL_GPIO_Init+0x10>
  }
}
 800a866:	bf00      	nop
 800a868:	bf00      	nop
 800a86a:	371c      	adds	r7, #28
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	40021000 	.word	0x40021000
 800a878:	40010000 	.word	0x40010000
 800a87c:	48000400 	.word	0x48000400
 800a880:	48000800 	.word	0x48000800
 800a884:	40010400 	.word	0x40010400

0800a888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	807b      	strh	r3, [r7, #2]
 800a894:	4613      	mov	r3, r2
 800a896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a898:	787b      	ldrb	r3, [r7, #1]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a89e:	887a      	ldrh	r2, [r7, #2]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a8a4:	e002      	b.n	800a8ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a8a6:	887a      	ldrh	r2, [r7, #2]
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a8ac:	bf00      	nop
 800a8ae:	370c      	adds	r7, #12
 800a8b0:	46bd      	mov	sp, r7
 800a8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b6:	4770      	bx	lr

0800a8b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	b082      	sub	sp, #8
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800a8c2:	4b08      	ldr	r3, [pc, #32]	@ (800a8e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a8c4:	695a      	ldr	r2, [r3, #20]
 800a8c6:	88fb      	ldrh	r3, [r7, #6]
 800a8c8:	4013      	ands	r3, r2
 800a8ca:	2b00      	cmp	r3, #0
 800a8cc:	d006      	beq.n	800a8dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800a8ce:	4a05      	ldr	r2, [pc, #20]	@ (800a8e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800a8d0:	88fb      	ldrh	r3, [r7, #6]
 800a8d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800a8d4:	88fb      	ldrh	r3, [r7, #6]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f7f7 fab2 	bl	8001e40 <HAL_GPIO_EXTI_Callback>
  }
}
 800a8dc:	bf00      	nop
 800a8de:	3708      	adds	r7, #8
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	40010400 	.word	0x40010400

0800a8e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	b082      	sub	sp, #8
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d101      	bne.n	800a8fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a8f6:	2301      	movs	r3, #1
 800a8f8:	e08d      	b.n	800aa16 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b00      	cmp	r3, #0
 800a904:	d106      	bne.n	800a914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	2200      	movs	r2, #0
 800a90a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f7f7 fc18 	bl	8002144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2224      	movs	r2, #36	@ 0x24
 800a918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681a      	ldr	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f022 0201 	bic.w	r2, r2, #1
 800a92a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a938:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	689a      	ldr	r2, [r3, #8]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a948:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	2b01      	cmp	r3, #1
 800a950:	d107      	bne.n	800a962 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689a      	ldr	r2, [r3, #8]
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a95e:	609a      	str	r2, [r3, #8]
 800a960:	e006      	b.n	800a970 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689a      	ldr	r2, [r3, #8]
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a96e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	68db      	ldr	r3, [r3, #12]
 800a974:	2b02      	cmp	r3, #2
 800a976:	d108      	bne.n	800a98a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	685a      	ldr	r2, [r3, #4]
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a986:	605a      	str	r2, [r3, #4]
 800a988:	e007      	b.n	800a99a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	685a      	ldr	r2, [r3, #4]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a998:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	687a      	ldr	r2, [r7, #4]
 800a9a2:	6812      	ldr	r2, [r2, #0]
 800a9a4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a9a8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a9ac:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	68da      	ldr	r2, [r3, #12]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a9bc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	691a      	ldr	r2, [r3, #16]
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	695b      	ldr	r3, [r3, #20]
 800a9c6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	699b      	ldr	r3, [r3, #24]
 800a9ce:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	430a      	orrs	r2, r1
 800a9d6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	69d9      	ldr	r1, [r3, #28]
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6a1a      	ldr	r2, [r3, #32]
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	430a      	orrs	r2, r1
 800a9e6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f042 0201 	orr.w	r2, r2, #1
 800a9f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	2220      	movs	r2, #32
 800aa02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800aa14:	2300      	movs	r3, #0
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3708      	adds	r7, #8
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af02      	add	r7, sp, #8
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	4608      	mov	r0, r1
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	461a      	mov	r2, r3
 800aa2e:	4603      	mov	r3, r0
 800aa30:	817b      	strh	r3, [r7, #10]
 800aa32:	460b      	mov	r3, r1
 800aa34:	813b      	strh	r3, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800aa40:	b2db      	uxtb	r3, r3
 800aa42:	2b20      	cmp	r3, #32
 800aa44:	f040 80f9 	bne.w	800ac3a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa48:	6a3b      	ldr	r3, [r7, #32]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d002      	beq.n	800aa54 <HAL_I2C_Mem_Write+0x34>
 800aa4e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d105      	bne.n	800aa60 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aa5a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e0ed      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d101      	bne.n	800aa6e <HAL_I2C_Mem_Write+0x4e>
 800aa6a:	2302      	movs	r3, #2
 800aa6c:	e0e6      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	2201      	movs	r2, #1
 800aa72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800aa76:	f7fe fb81 	bl	800917c <HAL_GetTick>
 800aa7a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	9300      	str	r3, [sp, #0]
 800aa80:	2319      	movs	r3, #25
 800aa82:	2201      	movs	r2, #1
 800aa84:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800aa88:	68f8      	ldr	r0, [r7, #12]
 800aa8a:	f000 fbaf 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800aa8e:	4603      	mov	r3, r0
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d001      	beq.n	800aa98 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800aa94:	2301      	movs	r3, #1
 800aa96:	e0d1      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	2221      	movs	r2, #33	@ 0x21
 800aa9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2240      	movs	r2, #64	@ 0x40
 800aaa4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6a3a      	ldr	r2, [r7, #32]
 800aab2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800aab8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2200      	movs	r2, #0
 800aabe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800aac0:	88f8      	ldrh	r0, [r7, #6]
 800aac2:	893a      	ldrh	r2, [r7, #8]
 800aac4:	8979      	ldrh	r1, [r7, #10]
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	9301      	str	r3, [sp, #4]
 800aaca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aacc:	9300      	str	r3, [sp, #0]
 800aace:	4603      	mov	r3, r0
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f000 fabf 	bl	800b054 <I2C_RequestMemoryWrite>
 800aad6:	4603      	mov	r3, r0
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d005      	beq.n	800aae8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	e0a9      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaec:	b29b      	uxth	r3, r3
 800aaee:	2bff      	cmp	r3, #255	@ 0xff
 800aaf0:	d90e      	bls.n	800ab10 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	22ff      	movs	r2, #255	@ 0xff
 800aaf6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	8979      	ldrh	r1, [r7, #10]
 800ab00:	2300      	movs	r3, #0
 800ab02:	9300      	str	r3, [sp, #0]
 800ab04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 fd33 	bl	800b574 <I2C_TransferConfig>
 800ab0e:	e00f      	b.n	800ab30 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab14:	b29a      	uxth	r2, r3
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	8979      	ldrh	r1, [r7, #10]
 800ab22:	2300      	movs	r3, #0
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ab2a:	68f8      	ldr	r0, [r7, #12]
 800ab2c:	f000 fd22 	bl	800b574 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab34:	68f8      	ldr	r0, [r7, #12]
 800ab36:	f000 fbb2 	bl	800b29e <I2C_WaitOnTXISFlagUntilTimeout>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d001      	beq.n	800ab44 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800ab40:	2301      	movs	r3, #1
 800ab42:	e07b      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab48:	781a      	ldrb	r2, [r3, #0]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab54:	1c5a      	adds	r2, r3, #1
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	3b01      	subs	r3, #1
 800ab62:	b29a      	uxth	r2, r3
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab6c:	3b01      	subs	r3, #1
 800ab6e:	b29a      	uxth	r2, r3
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab78:	b29b      	uxth	r3, r3
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d034      	beq.n	800abe8 <HAL_I2C_Mem_Write+0x1c8>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d130      	bne.n	800abe8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ab86:	697b      	ldr	r3, [r7, #20]
 800ab88:	9300      	str	r3, [sp, #0]
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	2200      	movs	r2, #0
 800ab8e:	2180      	movs	r1, #128	@ 0x80
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f000 fb2b 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800ab96:	4603      	mov	r3, r0
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d001      	beq.n	800aba0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e04d      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2bff      	cmp	r3, #255	@ 0xff
 800aba8:	d90e      	bls.n	800abc8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	22ff      	movs	r2, #255	@ 0xff
 800abae:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abb4:	b2da      	uxtb	r2, r3
 800abb6:	8979      	ldrh	r1, [r7, #10]
 800abb8:	2300      	movs	r3, #0
 800abba:	9300      	str	r3, [sp, #0]
 800abbc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800abc0:	68f8      	ldr	r0, [r7, #12]
 800abc2:	f000 fcd7 	bl	800b574 <I2C_TransferConfig>
 800abc6:	e00f      	b.n	800abe8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abcc:	b29a      	uxth	r2, r3
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abd6:	b2da      	uxtb	r2, r3
 800abd8:	8979      	ldrh	r1, [r7, #10]
 800abda:	2300      	movs	r3, #0
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f000 fcc6 	bl	800b574 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abec:	b29b      	uxth	r3, r3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d19e      	bne.n	800ab30 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800abf2:	697a      	ldr	r2, [r7, #20]
 800abf4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800abf6:	68f8      	ldr	r0, [r7, #12]
 800abf8:	f000 fb98 	bl	800b32c <I2C_WaitOnSTOPFlagUntilTimeout>
 800abfc:	4603      	mov	r3, r0
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d001      	beq.n	800ac06 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e01a      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2220      	movs	r2, #32
 800ac0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	6859      	ldr	r1, [r3, #4]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681a      	ldr	r2, [r3, #0]
 800ac18:	4b0a      	ldr	r3, [pc, #40]	@ (800ac44 <HAL_I2C_Mem_Write+0x224>)
 800ac1a:	400b      	ands	r3, r1
 800ac1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2220      	movs	r2, #32
 800ac22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ac36:	2300      	movs	r3, #0
 800ac38:	e000      	b.n	800ac3c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ac3a:	2302      	movs	r3, #2
  }
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	fe00e800 	.word	0xfe00e800

0800ac48 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b088      	sub	sp, #32
 800ac4c:	af02      	add	r7, sp, #8
 800ac4e:	60f8      	str	r0, [r7, #12]
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	461a      	mov	r2, r3
 800ac56:	4603      	mov	r3, r0
 800ac58:	817b      	strh	r3, [r7, #10]
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	813b      	strh	r3, [r7, #8]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ac68:	b2db      	uxtb	r3, r3
 800ac6a:	2b20      	cmp	r3, #32
 800ac6c:	f040 80fd 	bne.w	800ae6a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ac70:	6a3b      	ldr	r3, [r7, #32]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d002      	beq.n	800ac7c <HAL_I2C_Mem_Read+0x34>
 800ac76:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d105      	bne.n	800ac88 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ac82:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800ac84:	2301      	movs	r3, #1
 800ac86:	e0f1      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d101      	bne.n	800ac96 <HAL_I2C_Mem_Read+0x4e>
 800ac92:	2302      	movs	r3, #2
 800ac94:	e0ea      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ac9e:	f7fe fa6d 	bl	800917c <HAL_GetTick>
 800aca2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	9300      	str	r3, [sp, #0]
 800aca8:	2319      	movs	r3, #25
 800acaa:	2201      	movs	r2, #1
 800acac:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800acb0:	68f8      	ldr	r0, [r7, #12]
 800acb2:	f000 fa9b 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800acb6:	4603      	mov	r3, r0
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d001      	beq.n	800acc0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800acbc:	2301      	movs	r3, #1
 800acbe:	e0d5      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2222      	movs	r2, #34	@ 0x22
 800acc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2240      	movs	r2, #64	@ 0x40
 800accc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2200      	movs	r2, #0
 800acd4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	6a3a      	ldr	r2, [r7, #32]
 800acda:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800ace0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2200      	movs	r2, #0
 800ace6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ace8:	88f8      	ldrh	r0, [r7, #6]
 800acea:	893a      	ldrh	r2, [r7, #8]
 800acec:	8979      	ldrh	r1, [r7, #10]
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	9301      	str	r3, [sp, #4]
 800acf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf4:	9300      	str	r3, [sp, #0]
 800acf6:	4603      	mov	r3, r0
 800acf8:	68f8      	ldr	r0, [r7, #12]
 800acfa:	f000 f9ff 	bl	800b0fc <I2C_RequestMemoryRead>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	2200      	movs	r2, #0
 800ad08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ad0c:	2301      	movs	r3, #1
 800ad0e:	e0ad      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad14:	b29b      	uxth	r3, r3
 800ad16:	2bff      	cmp	r3, #255	@ 0xff
 800ad18:	d90e      	bls.n	800ad38 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2201      	movs	r2, #1
 800ad1e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	8979      	ldrh	r1, [r7, #10]
 800ad28:	4b52      	ldr	r3, [pc, #328]	@ (800ae74 <HAL_I2C_Mem_Read+0x22c>)
 800ad2a:	9300      	str	r3, [sp, #0]
 800ad2c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad30:	68f8      	ldr	r0, [r7, #12]
 800ad32:	f000 fc1f 	bl	800b574 <I2C_TransferConfig>
 800ad36:	e00f      	b.n	800ad58 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad46:	b2da      	uxtb	r2, r3
 800ad48:	8979      	ldrh	r1, [r7, #10]
 800ad4a:	4b4a      	ldr	r3, [pc, #296]	@ (800ae74 <HAL_I2C_Mem_Read+0x22c>)
 800ad4c:	9300      	str	r3, [sp, #0]
 800ad4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad52:	68f8      	ldr	r0, [r7, #12]
 800ad54:	f000 fc0e 	bl	800b574 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ad58:	697b      	ldr	r3, [r7, #20]
 800ad5a:	9300      	str	r3, [sp, #0]
 800ad5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad5e:	2200      	movs	r2, #0
 800ad60:	2104      	movs	r1, #4
 800ad62:	68f8      	ldr	r0, [r7, #12]
 800ad64:	f000 fa42 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800ad68:	4603      	mov	r3, r0
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d001      	beq.n	800ad72 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	e07c      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad7c:	b2d2      	uxtb	r2, r2
 800ad7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad84:	1c5a      	adds	r2, r3, #1
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad8e:	3b01      	subs	r3, #1
 800ad90:	b29a      	uxth	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d034      	beq.n	800ae18 <HAL_I2C_Mem_Read+0x1d0>
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d130      	bne.n	800ae18 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800adb6:	697b      	ldr	r3, [r7, #20]
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adbc:	2200      	movs	r2, #0
 800adbe:	2180      	movs	r1, #128	@ 0x80
 800adc0:	68f8      	ldr	r0, [r7, #12]
 800adc2:	f000 fa13 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800adc6:	4603      	mov	r3, r0
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d001      	beq.n	800add0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800adcc:	2301      	movs	r3, #1
 800adce:	e04d      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800add4:	b29b      	uxth	r3, r3
 800add6:	2bff      	cmp	r3, #255	@ 0xff
 800add8:	d90e      	bls.n	800adf8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	2201      	movs	r2, #1
 800adde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ade4:	b2da      	uxtb	r2, r3
 800ade6:	8979      	ldrh	r1, [r7, #10]
 800ade8:	2300      	movs	r3, #0
 800adea:	9300      	str	r3, [sp, #0]
 800adec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800adf0:	68f8      	ldr	r0, [r7, #12]
 800adf2:	f000 fbbf 	bl	800b574 <I2C_TransferConfig>
 800adf6:	e00f      	b.n	800ae18 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae06:	b2da      	uxtb	r2, r3
 800ae08:	8979      	ldrh	r1, [r7, #10]
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	9300      	str	r3, [sp, #0]
 800ae0e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ae12:	68f8      	ldr	r0, [r7, #12]
 800ae14:	f000 fbae 	bl	800b574 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae1c:	b29b      	uxth	r3, r3
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d19a      	bne.n	800ad58 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae22:	697a      	ldr	r2, [r7, #20]
 800ae24:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae26:	68f8      	ldr	r0, [r7, #12]
 800ae28:	f000 fa80 	bl	800b32c <I2C_WaitOnSTOPFlagUntilTimeout>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	d001      	beq.n	800ae36 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	e01a      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	2220      	movs	r2, #32
 800ae3c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6859      	ldr	r1, [r3, #4]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	4b0b      	ldr	r3, [pc, #44]	@ (800ae78 <HAL_I2C_Mem_Read+0x230>)
 800ae4a:	400b      	ands	r3, r1
 800ae4c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2220      	movs	r2, #32
 800ae52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	2200      	movs	r2, #0
 800ae62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ae66:	2300      	movs	r3, #0
 800ae68:	e000      	b.n	800ae6c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ae6a:	2302      	movs	r3, #2
  }
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3718      	adds	r7, #24
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}
 800ae74:	80002400 	.word	0x80002400
 800ae78:	fe00e800 	.word	0xfe00e800

0800ae7c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08a      	sub	sp, #40	@ 0x28
 800ae80:	af02      	add	r7, sp, #8
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	607a      	str	r2, [r7, #4]
 800ae86:	603b      	str	r3, [r7, #0]
 800ae88:	460b      	mov	r3, r1
 800ae8a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	2b20      	cmp	r3, #32
 800ae9a:	f040 80d6 	bne.w	800b04a <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	699b      	ldr	r3, [r3, #24]
 800aea4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aea8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800aeac:	d101      	bne.n	800aeb2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800aeae:	2302      	movs	r3, #2
 800aeb0:	e0cc      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d101      	bne.n	800aec0 <HAL_I2C_IsDeviceReady+0x44>
 800aebc:	2302      	movs	r3, #2
 800aebe:	e0c5      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	2201      	movs	r2, #1
 800aec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2224      	movs	r2, #36	@ 0x24
 800aecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d107      	bne.n	800aeee <HAL_I2C_IsDeviceReady+0x72>
 800aede:	897b      	ldrh	r3, [r7, #10]
 800aee0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aee4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aee8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800aeec:	e006      	b.n	800aefc <HAL_I2C_IsDeviceReady+0x80>
 800aeee:	897b      	ldrh	r3, [r7, #10]
 800aef0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800aef4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800aef8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 800aefc:	68fa      	ldr	r2, [r7, #12]
 800aefe:	6812      	ldr	r2, [r2, #0]
 800af00:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800af02:	f7fe f93b 	bl	800917c <HAL_GetTick>
 800af06:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	699b      	ldr	r3, [r3, #24]
 800af0e:	f003 0320 	and.w	r3, r3, #32
 800af12:	2b20      	cmp	r3, #32
 800af14:	bf0c      	ite	eq
 800af16:	2301      	moveq	r3, #1
 800af18:	2300      	movne	r3, #0
 800af1a:	b2db      	uxtb	r3, r3
 800af1c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	699b      	ldr	r3, [r3, #24]
 800af24:	f003 0310 	and.w	r3, r3, #16
 800af28:	2b10      	cmp	r3, #16
 800af2a:	bf0c      	ite	eq
 800af2c:	2301      	moveq	r3, #1
 800af2e:	2300      	movne	r3, #0
 800af30:	b2db      	uxtb	r3, r3
 800af32:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800af34:	e034      	b.n	800afa0 <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3c:	d01a      	beq.n	800af74 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800af3e:	f7fe f91d 	bl	800917c <HAL_GetTick>
 800af42:	4602      	mov	r2, r0
 800af44:	69bb      	ldr	r3, [r7, #24]
 800af46:	1ad3      	subs	r3, r2, r3
 800af48:	683a      	ldr	r2, [r7, #0]
 800af4a:	429a      	cmp	r2, r3
 800af4c:	d302      	bcc.n	800af54 <HAL_I2C_IsDeviceReady+0xd8>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	2b00      	cmp	r3, #0
 800af52:	d10f      	bne.n	800af74 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2220      	movs	r2, #32
 800af58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af60:	f043 0220 	orr.w	r2, r3, #32
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 800af70:	2301      	movs	r3, #1
 800af72:	e06b      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	699b      	ldr	r3, [r3, #24]
 800af7a:	f003 0320 	and.w	r3, r3, #32
 800af7e:	2b20      	cmp	r3, #32
 800af80:	bf0c      	ite	eq
 800af82:	2301      	moveq	r3, #1
 800af84:	2300      	movne	r3, #0
 800af86:	b2db      	uxtb	r3, r3
 800af88:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	699b      	ldr	r3, [r3, #24]
 800af90:	f003 0310 	and.w	r3, r3, #16
 800af94:	2b10      	cmp	r3, #16
 800af96:	bf0c      	ite	eq
 800af98:	2301      	moveq	r3, #1
 800af9a:	2300      	movne	r3, #0
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800afa0:	7ffb      	ldrb	r3, [r7, #31]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d102      	bne.n	800afac <HAL_I2C_IsDeviceReady+0x130>
 800afa6:	7fbb      	ldrb	r3, [r7, #30]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d0c4      	beq.n	800af36 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	699b      	ldr	r3, [r3, #24]
 800afb2:	f003 0310 	and.w	r3, r3, #16
 800afb6:	2b10      	cmp	r3, #16
 800afb8:	d01a      	beq.n	800aff0 <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	2200      	movs	r2, #0
 800afc2:	2120      	movs	r1, #32
 800afc4:	68f8      	ldr	r0, [r7, #12]
 800afc6:	f000 f911 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d001      	beq.n	800afd4 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 800afd0:	2301      	movs	r3, #1
 800afd2:	e03b      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	2220      	movs	r2, #32
 800afda:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2220      	movs	r2, #32
 800afe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 800afec:	2300      	movs	r3, #0
 800afee:	e02d      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800aff0:	69bb      	ldr	r3, [r7, #24]
 800aff2:	9300      	str	r3, [sp, #0]
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	2200      	movs	r2, #0
 800aff8:	2120      	movs	r1, #32
 800affa:	68f8      	ldr	r0, [r7, #12]
 800affc:	f000 f8f6 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800b000:	4603      	mov	r3, r0
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 800b006:	2301      	movs	r3, #1
 800b008:	e020      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2210      	movs	r2, #16
 800b010:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2220      	movs	r2, #32
 800b018:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	3301      	adds	r3, #1
 800b01e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	687a      	ldr	r2, [r7, #4]
 800b024:	429a      	cmp	r2, r3
 800b026:	f63f af56 	bhi.w	800aed6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b036:	f043 0220 	orr.w	r2, r3, #32
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 800b046:	2301      	movs	r3, #1
 800b048:	e000      	b.n	800b04c <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 800b04a:	2302      	movs	r3, #2
  }
}
 800b04c:	4618      	mov	r0, r3
 800b04e:	3720      	adds	r7, #32
 800b050:	46bd      	mov	sp, r7
 800b052:	bd80      	pop	{r7, pc}

0800b054 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b086      	sub	sp, #24
 800b058:	af02      	add	r7, sp, #8
 800b05a:	60f8      	str	r0, [r7, #12]
 800b05c:	4608      	mov	r0, r1
 800b05e:	4611      	mov	r1, r2
 800b060:	461a      	mov	r2, r3
 800b062:	4603      	mov	r3, r0
 800b064:	817b      	strh	r3, [r7, #10]
 800b066:	460b      	mov	r3, r1
 800b068:	813b      	strh	r3, [r7, #8]
 800b06a:	4613      	mov	r3, r2
 800b06c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b06e:	88fb      	ldrh	r3, [r7, #6]
 800b070:	b2da      	uxtb	r2, r3
 800b072:	8979      	ldrh	r1, [r7, #10]
 800b074:	4b20      	ldr	r3, [pc, #128]	@ (800b0f8 <I2C_RequestMemoryWrite+0xa4>)
 800b076:	9300      	str	r3, [sp, #0]
 800b078:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b07c:	68f8      	ldr	r0, [r7, #12]
 800b07e:	f000 fa79 	bl	800b574 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b082:	69fa      	ldr	r2, [r7, #28]
 800b084:	69b9      	ldr	r1, [r7, #24]
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f000 f909 	bl	800b29e <I2C_WaitOnTXISFlagUntilTimeout>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d001      	beq.n	800b096 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b092:	2301      	movs	r3, #1
 800b094:	e02c      	b.n	800b0f0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b096:	88fb      	ldrh	r3, [r7, #6]
 800b098:	2b01      	cmp	r3, #1
 800b09a:	d105      	bne.n	800b0a8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b09c:	893b      	ldrh	r3, [r7, #8]
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	629a      	str	r2, [r3, #40]	@ 0x28
 800b0a6:	e015      	b.n	800b0d4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b0a8:	893b      	ldrh	r3, [r7, #8]
 800b0aa:	0a1b      	lsrs	r3, r3, #8
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	b2da      	uxtb	r2, r3
 800b0b0:	68fb      	ldr	r3, [r7, #12]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0b6:	69fa      	ldr	r2, [r7, #28]
 800b0b8:	69b9      	ldr	r1, [r7, #24]
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f000 f8ef 	bl	800b29e <I2C_WaitOnTXISFlagUntilTimeout>
 800b0c0:	4603      	mov	r3, r0
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d001      	beq.n	800b0ca <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	e012      	b.n	800b0f0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b0ca:	893b      	ldrh	r3, [r7, #8]
 800b0cc:	b2da      	uxtb	r2, r3
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b0d4:	69fb      	ldr	r3, [r7, #28]
 800b0d6:	9300      	str	r3, [sp, #0]
 800b0d8:	69bb      	ldr	r3, [r7, #24]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	2180      	movs	r1, #128	@ 0x80
 800b0de:	68f8      	ldr	r0, [r7, #12]
 800b0e0:	f000 f884 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d001      	beq.n	800b0ee <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b0ea:	2301      	movs	r3, #1
 800b0ec:	e000      	b.n	800b0f0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b0ee:	2300      	movs	r3, #0
}
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	3710      	adds	r7, #16
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	80002000 	.word	0x80002000

0800b0fc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b0fc:	b580      	push	{r7, lr}
 800b0fe:	b086      	sub	sp, #24
 800b100:	af02      	add	r7, sp, #8
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	4608      	mov	r0, r1
 800b106:	4611      	mov	r1, r2
 800b108:	461a      	mov	r2, r3
 800b10a:	4603      	mov	r3, r0
 800b10c:	817b      	strh	r3, [r7, #10]
 800b10e:	460b      	mov	r3, r1
 800b110:	813b      	strh	r3, [r7, #8]
 800b112:	4613      	mov	r3, r2
 800b114:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b116:	88fb      	ldrh	r3, [r7, #6]
 800b118:	b2da      	uxtb	r2, r3
 800b11a:	8979      	ldrh	r1, [r7, #10]
 800b11c:	4b20      	ldr	r3, [pc, #128]	@ (800b1a0 <I2C_RequestMemoryRead+0xa4>)
 800b11e:	9300      	str	r3, [sp, #0]
 800b120:	2300      	movs	r3, #0
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f000 fa26 	bl	800b574 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b128:	69fa      	ldr	r2, [r7, #28]
 800b12a:	69b9      	ldr	r1, [r7, #24]
 800b12c:	68f8      	ldr	r0, [r7, #12]
 800b12e:	f000 f8b6 	bl	800b29e <I2C_WaitOnTXISFlagUntilTimeout>
 800b132:	4603      	mov	r3, r0
 800b134:	2b00      	cmp	r3, #0
 800b136:	d001      	beq.n	800b13c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b138:	2301      	movs	r3, #1
 800b13a:	e02c      	b.n	800b196 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b13c:	88fb      	ldrh	r3, [r7, #6]
 800b13e:	2b01      	cmp	r3, #1
 800b140:	d105      	bne.n	800b14e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b142:	893b      	ldrh	r3, [r7, #8]
 800b144:	b2da      	uxtb	r2, r3
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	629a      	str	r2, [r3, #40]	@ 0x28
 800b14c:	e015      	b.n	800b17a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b14e:	893b      	ldrh	r3, [r7, #8]
 800b150:	0a1b      	lsrs	r3, r3, #8
 800b152:	b29b      	uxth	r3, r3
 800b154:	b2da      	uxtb	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b15c:	69fa      	ldr	r2, [r7, #28]
 800b15e:	69b9      	ldr	r1, [r7, #24]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f000 f89c 	bl	800b29e <I2C_WaitOnTXISFlagUntilTimeout>
 800b166:	4603      	mov	r3, r0
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d001      	beq.n	800b170 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	e012      	b.n	800b196 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b170:	893b      	ldrh	r3, [r7, #8]
 800b172:	b2da      	uxtb	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b17a:	69fb      	ldr	r3, [r7, #28]
 800b17c:	9300      	str	r3, [sp, #0]
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2200      	movs	r2, #0
 800b182:	2140      	movs	r1, #64	@ 0x40
 800b184:	68f8      	ldr	r0, [r7, #12]
 800b186:	f000 f831 	bl	800b1ec <I2C_WaitOnFlagUntilTimeout>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d001      	beq.n	800b194 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b190:	2301      	movs	r3, #1
 800b192:	e000      	b.n	800b196 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3710      	adds	r7, #16
 800b19a:	46bd      	mov	sp, r7
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	bf00      	nop
 800b1a0:	80002000 	.word	0x80002000

0800b1a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b1a4:	b480      	push	{r7}
 800b1a6:	b083      	sub	sp, #12
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	699b      	ldr	r3, [r3, #24]
 800b1b2:	f003 0302 	and.w	r3, r3, #2
 800b1b6:	2b02      	cmp	r3, #2
 800b1b8:	d103      	bne.n	800b1c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2200      	movs	r2, #0
 800b1c0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	699b      	ldr	r3, [r3, #24]
 800b1c8:	f003 0301 	and.w	r3, r3, #1
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d007      	beq.n	800b1e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	699a      	ldr	r2, [r3, #24]
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	f042 0201 	orr.w	r2, r2, #1
 800b1de:	619a      	str	r2, [r3, #24]
  }
}
 800b1e0:	bf00      	nop
 800b1e2:	370c      	adds	r7, #12
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b1ec:	b580      	push	{r7, lr}
 800b1ee:	b084      	sub	sp, #16
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	60f8      	str	r0, [r7, #12]
 800b1f4:	60b9      	str	r1, [r7, #8]
 800b1f6:	603b      	str	r3, [r7, #0]
 800b1f8:	4613      	mov	r3, r2
 800b1fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1fc:	e03b      	b.n	800b276 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b1fe:	69ba      	ldr	r2, [r7, #24]
 800b200:	6839      	ldr	r1, [r7, #0]
 800b202:	68f8      	ldr	r0, [r7, #12]
 800b204:	f000 f8d6 	bl	800b3b4 <I2C_IsErrorOccurred>
 800b208:	4603      	mov	r3, r0
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d001      	beq.n	800b212 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b20e:	2301      	movs	r3, #1
 800b210:	e041      	b.n	800b296 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b218:	d02d      	beq.n	800b276 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b21a:	f7fd ffaf 	bl	800917c <HAL_GetTick>
 800b21e:	4602      	mov	r2, r0
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	1ad3      	subs	r3, r2, r3
 800b224:	683a      	ldr	r2, [r7, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d302      	bcc.n	800b230 <I2C_WaitOnFlagUntilTimeout+0x44>
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d122      	bne.n	800b276 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	699a      	ldr	r2, [r3, #24]
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	4013      	ands	r3, r2
 800b23a:	68ba      	ldr	r2, [r7, #8]
 800b23c:	429a      	cmp	r2, r3
 800b23e:	bf0c      	ite	eq
 800b240:	2301      	moveq	r3, #1
 800b242:	2300      	movne	r3, #0
 800b244:	b2db      	uxtb	r3, r3
 800b246:	461a      	mov	r2, r3
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d113      	bne.n	800b276 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b252:	f043 0220 	orr.w	r2, r3, #32
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2220      	movs	r2, #32
 800b25e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	e00f      	b.n	800b296 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	699a      	ldr	r2, [r3, #24]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	4013      	ands	r3, r2
 800b280:	68ba      	ldr	r2, [r7, #8]
 800b282:	429a      	cmp	r2, r3
 800b284:	bf0c      	ite	eq
 800b286:	2301      	moveq	r3, #1
 800b288:	2300      	movne	r3, #0
 800b28a:	b2db      	uxtb	r3, r3
 800b28c:	461a      	mov	r2, r3
 800b28e:	79fb      	ldrb	r3, [r7, #7]
 800b290:	429a      	cmp	r2, r3
 800b292:	d0b4      	beq.n	800b1fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b294:	2300      	movs	r3, #0
}
 800b296:	4618      	mov	r0, r3
 800b298:	3710      	adds	r7, #16
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd80      	pop	{r7, pc}

0800b29e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b29e:	b580      	push	{r7, lr}
 800b2a0:	b084      	sub	sp, #16
 800b2a2:	af00      	add	r7, sp, #0
 800b2a4:	60f8      	str	r0, [r7, #12]
 800b2a6:	60b9      	str	r1, [r7, #8]
 800b2a8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b2aa:	e033      	b.n	800b314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f87f 	bl	800b3b4 <I2C_IsErrorOccurred>
 800b2b6:	4603      	mov	r3, r0
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d001      	beq.n	800b2c0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2bc:	2301      	movs	r3, #1
 800b2be:	e031      	b.n	800b324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2c6:	d025      	beq.n	800b314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2c8:	f7fd ff58 	bl	800917c <HAL_GetTick>
 800b2cc:	4602      	mov	r2, r0
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	1ad3      	subs	r3, r2, r3
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	429a      	cmp	r2, r3
 800b2d6:	d302      	bcc.n	800b2de <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d11a      	bne.n	800b314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	699b      	ldr	r3, [r3, #24]
 800b2e4:	f003 0302 	and.w	r3, r3, #2
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d013      	beq.n	800b314 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2f0:	f043 0220 	orr.w	r2, r3, #32
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2200      	movs	r2, #0
 800b304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b310:	2301      	movs	r3, #1
 800b312:	e007      	b.n	800b324 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	699b      	ldr	r3, [r3, #24]
 800b31a:	f003 0302 	and.w	r3, r3, #2
 800b31e:	2b02      	cmp	r3, #2
 800b320:	d1c4      	bne.n	800b2ac <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b322:	2300      	movs	r3, #0
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}

0800b32c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b32c:	b580      	push	{r7, lr}
 800b32e:	b084      	sub	sp, #16
 800b330:	af00      	add	r7, sp, #0
 800b332:	60f8      	str	r0, [r7, #12]
 800b334:	60b9      	str	r1, [r7, #8]
 800b336:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b338:	e02f      	b.n	800b39a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b33a:	687a      	ldr	r2, [r7, #4]
 800b33c:	68b9      	ldr	r1, [r7, #8]
 800b33e:	68f8      	ldr	r0, [r7, #12]
 800b340:	f000 f838 	bl	800b3b4 <I2C_IsErrorOccurred>
 800b344:	4603      	mov	r3, r0
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e02d      	b.n	800b3aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b34e:	f7fd ff15 	bl	800917c <HAL_GetTick>
 800b352:	4602      	mov	r2, r0
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d302      	bcc.n	800b364 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d11a      	bne.n	800b39a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	699b      	ldr	r3, [r3, #24]
 800b36a:	f003 0320 	and.w	r3, r3, #32
 800b36e:	2b20      	cmp	r3, #32
 800b370:	d013      	beq.n	800b39a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b376:	f043 0220 	orr.w	r2, r3, #32
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	2220      	movs	r2, #32
 800b382:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2200      	movs	r2, #0
 800b38a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b396:	2301      	movs	r3, #1
 800b398:	e007      	b.n	800b3aa <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	699b      	ldr	r3, [r3, #24]
 800b3a0:	f003 0320 	and.w	r3, r3, #32
 800b3a4:	2b20      	cmp	r3, #32
 800b3a6:	d1c8      	bne.n	800b33a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b3a8:	2300      	movs	r3, #0
}
 800b3aa:	4618      	mov	r0, r3
 800b3ac:	3710      	adds	r7, #16
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	bd80      	pop	{r7, pc}
	...

0800b3b4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08a      	sub	sp, #40	@ 0x28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	699b      	ldr	r3, [r3, #24]
 800b3cc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b3d6:	69bb      	ldr	r3, [r7, #24]
 800b3d8:	f003 0310 	and.w	r3, r3, #16
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d068      	beq.n	800b4b2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2210      	movs	r2, #16
 800b3e6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b3e8:	e049      	b.n	800b47e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3f0:	d045      	beq.n	800b47e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b3f2:	f7fd fec3 	bl	800917c <HAL_GetTick>
 800b3f6:	4602      	mov	r2, r0
 800b3f8:	69fb      	ldr	r3, [r7, #28]
 800b3fa:	1ad3      	subs	r3, r2, r3
 800b3fc:	68ba      	ldr	r2, [r7, #8]
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d302      	bcc.n	800b408 <I2C_IsErrorOccurred+0x54>
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d13a      	bne.n	800b47e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	685b      	ldr	r3, [r3, #4]
 800b40e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b412:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b41a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	699b      	ldr	r3, [r3, #24]
 800b422:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b426:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b42a:	d121      	bne.n	800b470 <I2C_IsErrorOccurred+0xbc>
 800b42c:	697b      	ldr	r3, [r7, #20]
 800b42e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b432:	d01d      	beq.n	800b470 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b434:	7cfb      	ldrb	r3, [r7, #19]
 800b436:	2b20      	cmp	r3, #32
 800b438:	d01a      	beq.n	800b470 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	685a      	ldr	r2, [r3, #4]
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b448:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b44a:	f7fd fe97 	bl	800917c <HAL_GetTick>
 800b44e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b450:	e00e      	b.n	800b470 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b452:	f7fd fe93 	bl	800917c <HAL_GetTick>
 800b456:	4602      	mov	r2, r0
 800b458:	69fb      	ldr	r3, [r7, #28]
 800b45a:	1ad3      	subs	r3, r2, r3
 800b45c:	2b19      	cmp	r3, #25
 800b45e:	d907      	bls.n	800b470 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b460:	6a3b      	ldr	r3, [r7, #32]
 800b462:	f043 0320 	orr.w	r3, r3, #32
 800b466:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b468:	2301      	movs	r3, #1
 800b46a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b46e:	e006      	b.n	800b47e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	f003 0320 	and.w	r3, r3, #32
 800b47a:	2b20      	cmp	r3, #32
 800b47c:	d1e9      	bne.n	800b452 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	699b      	ldr	r3, [r3, #24]
 800b484:	f003 0320 	and.w	r3, r3, #32
 800b488:	2b20      	cmp	r3, #32
 800b48a:	d003      	beq.n	800b494 <I2C_IsErrorOccurred+0xe0>
 800b48c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b490:	2b00      	cmp	r3, #0
 800b492:	d0aa      	beq.n	800b3ea <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b494:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d103      	bne.n	800b4a4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	2220      	movs	r2, #32
 800b4a2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b4a4:	6a3b      	ldr	r3, [r7, #32]
 800b4a6:	f043 0304 	orr.w	r3, r3, #4
 800b4aa:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00b      	beq.n	800b4dc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b4c4:	6a3b      	ldr	r3, [r7, #32]
 800b4c6:	f043 0301 	orr.w	r3, r3, #1
 800b4ca:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b4d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b4d6:	2301      	movs	r3, #1
 800b4d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b4dc:	69bb      	ldr	r3, [r7, #24]
 800b4de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00b      	beq.n	800b4fe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	f043 0308 	orr.w	r3, r3, #8
 800b4ec:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b4f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b4fe:	69bb      	ldr	r3, [r7, #24]
 800b500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b504:	2b00      	cmp	r3, #0
 800b506:	d00b      	beq.n	800b520 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b508:	6a3b      	ldr	r3, [r7, #32]
 800b50a:	f043 0302 	orr.w	r3, r3, #2
 800b50e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b518:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b51a:	2301      	movs	r3, #1
 800b51c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b520:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b524:	2b00      	cmp	r3, #0
 800b526:	d01c      	beq.n	800b562 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b528:	68f8      	ldr	r0, [r7, #12]
 800b52a:	f7ff fe3b 	bl	800b1a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6859      	ldr	r1, [r3, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	4b0d      	ldr	r3, [pc, #52]	@ (800b570 <I2C_IsErrorOccurred+0x1bc>)
 800b53a:	400b      	ands	r3, r1
 800b53c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b542:	6a3b      	ldr	r3, [r7, #32]
 800b544:	431a      	orrs	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2220      	movs	r2, #32
 800b54e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	2200      	movs	r2, #0
 800b556:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	2200      	movs	r2, #0
 800b55e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b562:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b566:	4618      	mov	r0, r3
 800b568:	3728      	adds	r7, #40	@ 0x28
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}
 800b56e:	bf00      	nop
 800b570:	fe00e800 	.word	0xfe00e800

0800b574 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	607b      	str	r3, [r7, #4]
 800b57e:	460b      	mov	r3, r1
 800b580:	817b      	strh	r3, [r7, #10]
 800b582:	4613      	mov	r3, r2
 800b584:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b586:	897b      	ldrh	r3, [r7, #10]
 800b588:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b58c:	7a7b      	ldrb	r3, [r7, #9]
 800b58e:	041b      	lsls	r3, r3, #16
 800b590:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b594:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b59a:	6a3b      	ldr	r3, [r7, #32]
 800b59c:	4313      	orrs	r3, r2
 800b59e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b5a2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	6a3b      	ldr	r3, [r7, #32]
 800b5ac:	0d5b      	lsrs	r3, r3, #21
 800b5ae:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b5b2:	4b08      	ldr	r3, [pc, #32]	@ (800b5d4 <I2C_TransferConfig+0x60>)
 800b5b4:	430b      	orrs	r3, r1
 800b5b6:	43db      	mvns	r3, r3
 800b5b8:	ea02 0103 	and.w	r1, r2, r3
 800b5bc:	68fb      	ldr	r3, [r7, #12]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	697a      	ldr	r2, [r7, #20]
 800b5c2:	430a      	orrs	r2, r1
 800b5c4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b5c6:	bf00      	nop
 800b5c8:	371c      	adds	r7, #28
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	03ff63ff 	.word	0x03ff63ff

0800b5d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b083      	sub	sp, #12
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b5e8:	b2db      	uxtb	r3, r3
 800b5ea:	2b20      	cmp	r3, #32
 800b5ec:	d138      	bne.n	800b660 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	d101      	bne.n	800b5fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b5f8:	2302      	movs	r3, #2
 800b5fa:	e032      	b.n	800b662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	2201      	movs	r2, #1
 800b600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	2224      	movs	r2, #36	@ 0x24
 800b608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	681a      	ldr	r2, [r3, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f022 0201 	bic.w	r2, r2, #1
 800b61a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b62a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6819      	ldr	r1, [r3, #0]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	683a      	ldr	r2, [r7, #0]
 800b638:	430a      	orrs	r2, r1
 800b63a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	681a      	ldr	r2, [r3, #0]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	f042 0201 	orr.w	r2, r2, #1
 800b64a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2220      	movs	r2, #32
 800b650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2200      	movs	r2, #0
 800b658:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b65c:	2300      	movs	r3, #0
 800b65e:	e000      	b.n	800b662 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b660:	2302      	movs	r3, #2
  }
}
 800b662:	4618      	mov	r0, r3
 800b664:	370c      	adds	r7, #12
 800b666:	46bd      	mov	sp, r7
 800b668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66c:	4770      	bx	lr

0800b66e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b66e:	b480      	push	{r7}
 800b670:	b085      	sub	sp, #20
 800b672:	af00      	add	r7, sp, #0
 800b674:	6078      	str	r0, [r7, #4]
 800b676:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b67e:	b2db      	uxtb	r3, r3
 800b680:	2b20      	cmp	r3, #32
 800b682:	d139      	bne.n	800b6f8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d101      	bne.n	800b692 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b68e:	2302      	movs	r3, #2
 800b690:	e033      	b.n	800b6fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2201      	movs	r2, #1
 800b696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	2224      	movs	r2, #36	@ 0x24
 800b69e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f022 0201 	bic.w	r2, r2, #1
 800b6b0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b6c0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	021b      	lsls	r3, r3, #8
 800b6c6:	68fa      	ldr	r2, [r7, #12]
 800b6c8:	4313      	orrs	r3, r2
 800b6ca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	681a      	ldr	r2, [r3, #0]
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	f042 0201 	orr.w	r2, r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2220      	movs	r2, #32
 800b6e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
 800b6f6:	e000      	b.n	800b6fa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b6f8:	2302      	movs	r3, #2
  }
}
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	3714      	adds	r7, #20
 800b6fe:	46bd      	mov	sp, r7
 800b700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b704:	4770      	bx	lr
	...

0800b708 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800b708:	b480      	push	{r7}
 800b70a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800b70c:	4b04      	ldr	r3, [pc, #16]	@ (800b720 <HAL_PWREx_GetVoltageRange+0x18>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800b714:	4618      	mov	r0, r3
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr
 800b71e:	bf00      	nop
 800b720:	40007000 	.word	0x40007000

0800b724 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b724:	b480      	push	{r7}
 800b726:	b085      	sub	sp, #20
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b732:	d130      	bne.n	800b796 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800b734:	4b23      	ldr	r3, [pc, #140]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b73c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b740:	d038      	beq.n	800b7b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b742:	4b20      	ldr	r3, [pc, #128]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b74a:	4a1e      	ldr	r2, [pc, #120]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b74c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b750:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b752:	4b1d      	ldr	r3, [pc, #116]	@ (800b7c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	2232      	movs	r2, #50	@ 0x32
 800b758:	fb02 f303 	mul.w	r3, r2, r3
 800b75c:	4a1b      	ldr	r2, [pc, #108]	@ (800b7cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800b75e:	fba2 2303 	umull	r2, r3, r2, r3
 800b762:	0c9b      	lsrs	r3, r3, #18
 800b764:	3301      	adds	r3, #1
 800b766:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b768:	e002      	b.n	800b770 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	3b01      	subs	r3, #1
 800b76e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b770:	4b14      	ldr	r3, [pc, #80]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b772:	695b      	ldr	r3, [r3, #20]
 800b774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b778:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b77c:	d102      	bne.n	800b784 <HAL_PWREx_ControlVoltageScaling+0x60>
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d1f2      	bne.n	800b76a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b784:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b786:	695b      	ldr	r3, [r3, #20]
 800b788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b78c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b790:	d110      	bne.n	800b7b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800b792:	2303      	movs	r3, #3
 800b794:	e00f      	b.n	800b7b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800b796:	4b0b      	ldr	r3, [pc, #44]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b79e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b7a2:	d007      	beq.n	800b7b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b7a4:	4b07      	ldr	r3, [pc, #28]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b7ac:	4a05      	ldr	r2, [pc, #20]	@ (800b7c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800b7ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b7b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr
 800b7c2:	bf00      	nop
 800b7c4:	40007000 	.word	0x40007000
 800b7c8:	20000048 	.word	0x20000048
 800b7cc:	431bde83 	.word	0x431bde83

0800b7d0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d102      	bne.n	800b7e4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b7de:	2301      	movs	r3, #1
 800b7e0:	f000 bc02 	b.w	800bfe8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b7e4:	4b96      	ldr	r3, [pc, #600]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b7e6:	689b      	ldr	r3, [r3, #8]
 800b7e8:	f003 030c 	and.w	r3, r3, #12
 800b7ec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b7ee:	4b94      	ldr	r3, [pc, #592]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	f003 0303 	and.w	r3, r3, #3
 800b7f6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0310 	and.w	r3, r3, #16
 800b800:	2b00      	cmp	r3, #0
 800b802:	f000 80e4 	beq.w	800b9ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800b806:	69bb      	ldr	r3, [r7, #24]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	d007      	beq.n	800b81c <HAL_RCC_OscConfig+0x4c>
 800b80c:	69bb      	ldr	r3, [r7, #24]
 800b80e:	2b0c      	cmp	r3, #12
 800b810:	f040 808b 	bne.w	800b92a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b01      	cmp	r3, #1
 800b818:	f040 8087 	bne.w	800b92a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b81c:	4b88      	ldr	r3, [pc, #544]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0302 	and.w	r3, r3, #2
 800b824:	2b00      	cmp	r3, #0
 800b826:	d005      	beq.n	800b834 <HAL_RCC_OscConfig+0x64>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	699b      	ldr	r3, [r3, #24]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d101      	bne.n	800b834 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800b830:	2301      	movs	r3, #1
 800b832:	e3d9      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	6a1a      	ldr	r2, [r3, #32]
 800b838:	4b81      	ldr	r3, [pc, #516]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f003 0308 	and.w	r3, r3, #8
 800b840:	2b00      	cmp	r3, #0
 800b842:	d004      	beq.n	800b84e <HAL_RCC_OscConfig+0x7e>
 800b844:	4b7e      	ldr	r3, [pc, #504]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b84c:	e005      	b.n	800b85a <HAL_RCC_OscConfig+0x8a>
 800b84e:	4b7c      	ldr	r3, [pc, #496]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b850:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b854:	091b      	lsrs	r3, r3, #4
 800b856:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d223      	bcs.n	800b8a6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6a1b      	ldr	r3, [r3, #32]
 800b862:	4618      	mov	r0, r3
 800b864:	f000 fd8c 	bl	800c380 <RCC_SetFlashLatencyFromMSIRange>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d001      	beq.n	800b872 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800b86e:	2301      	movs	r3, #1
 800b870:	e3ba      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b872:	4b73      	ldr	r3, [pc, #460]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	4a72      	ldr	r2, [pc, #456]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b878:	f043 0308 	orr.w	r3, r3, #8
 800b87c:	6013      	str	r3, [r2, #0]
 800b87e:	4b70      	ldr	r3, [pc, #448]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6a1b      	ldr	r3, [r3, #32]
 800b88a:	496d      	ldr	r1, [pc, #436]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b88c:	4313      	orrs	r3, r2
 800b88e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b890:	4b6b      	ldr	r3, [pc, #428]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	69db      	ldr	r3, [r3, #28]
 800b89c:	021b      	lsls	r3, r3, #8
 800b89e:	4968      	ldr	r1, [pc, #416]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8a0:	4313      	orrs	r3, r2
 800b8a2:	604b      	str	r3, [r1, #4]
 800b8a4:	e025      	b.n	800b8f2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b8a6:	4b66      	ldr	r3, [pc, #408]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a65      	ldr	r2, [pc, #404]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8ac:	f043 0308 	orr.w	r3, r3, #8
 800b8b0:	6013      	str	r3, [r2, #0]
 800b8b2:	4b63      	ldr	r3, [pc, #396]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6a1b      	ldr	r3, [r3, #32]
 800b8be:	4960      	ldr	r1, [pc, #384]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b8c4:	4b5e      	ldr	r3, [pc, #376]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	021b      	lsls	r3, r3, #8
 800b8d2:	495b      	ldr	r1, [pc, #364]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800b8d8:	69bb      	ldr	r3, [r7, #24]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d109      	bne.n	800b8f2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6a1b      	ldr	r3, [r3, #32]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f000 fd4c 	bl	800c380 <RCC_SetFlashLatencyFromMSIRange>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e37a      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b8f2:	f000 fc81 	bl	800c1f8 <HAL_RCC_GetSysClockFreq>
 800b8f6:	4602      	mov	r2, r0
 800b8f8:	4b51      	ldr	r3, [pc, #324]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	091b      	lsrs	r3, r3, #4
 800b8fe:	f003 030f 	and.w	r3, r3, #15
 800b902:	4950      	ldr	r1, [pc, #320]	@ (800ba44 <HAL_RCC_OscConfig+0x274>)
 800b904:	5ccb      	ldrb	r3, [r1, r3]
 800b906:	f003 031f 	and.w	r3, r3, #31
 800b90a:	fa22 f303 	lsr.w	r3, r2, r3
 800b90e:	4a4e      	ldr	r2, [pc, #312]	@ (800ba48 <HAL_RCC_OscConfig+0x278>)
 800b910:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800b912:	4b4e      	ldr	r3, [pc, #312]	@ (800ba4c <HAL_RCC_OscConfig+0x27c>)
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4618      	mov	r0, r3
 800b918:	f7fd fbe0 	bl	80090dc <HAL_InitTick>
 800b91c:	4603      	mov	r3, r0
 800b91e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800b920:	7bfb      	ldrb	r3, [r7, #15]
 800b922:	2b00      	cmp	r3, #0
 800b924:	d052      	beq.n	800b9cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800b926:	7bfb      	ldrb	r3, [r7, #15]
 800b928:	e35e      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	699b      	ldr	r3, [r3, #24]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d032      	beq.n	800b998 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800b932:	4b43      	ldr	r3, [pc, #268]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	4a42      	ldr	r2, [pc, #264]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b938:	f043 0301 	orr.w	r3, r3, #1
 800b93c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b93e:	f7fd fc1d 	bl	800917c <HAL_GetTick>
 800b942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b944:	e008      	b.n	800b958 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b946:	f7fd fc19 	bl	800917c <HAL_GetTick>
 800b94a:	4602      	mov	r2, r0
 800b94c:	693b      	ldr	r3, [r7, #16]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b02      	cmp	r3, #2
 800b952:	d901      	bls.n	800b958 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800b954:	2303      	movs	r3, #3
 800b956:	e347      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800b958:	4b39      	ldr	r3, [pc, #228]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f003 0302 	and.w	r3, r3, #2
 800b960:	2b00      	cmp	r3, #0
 800b962:	d0f0      	beq.n	800b946 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800b964:	4b36      	ldr	r3, [pc, #216]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a35      	ldr	r2, [pc, #212]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b96a:	f043 0308 	orr.w	r3, r3, #8
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	4b33      	ldr	r3, [pc, #204]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	6a1b      	ldr	r3, [r3, #32]
 800b97c:	4930      	ldr	r1, [pc, #192]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b97e:	4313      	orrs	r3, r2
 800b980:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800b982:	4b2f      	ldr	r3, [pc, #188]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b984:	685b      	ldr	r3, [r3, #4]
 800b986:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	69db      	ldr	r3, [r3, #28]
 800b98e:	021b      	lsls	r3, r3, #8
 800b990:	492b      	ldr	r1, [pc, #172]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b992:	4313      	orrs	r3, r2
 800b994:	604b      	str	r3, [r1, #4]
 800b996:	e01a      	b.n	800b9ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800b998:	4b29      	ldr	r3, [pc, #164]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	4a28      	ldr	r2, [pc, #160]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b99e:	f023 0301 	bic.w	r3, r3, #1
 800b9a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800b9a4:	f7fd fbea 	bl	800917c <HAL_GetTick>
 800b9a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b9aa:	e008      	b.n	800b9be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800b9ac:	f7fd fbe6 	bl	800917c <HAL_GetTick>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	1ad3      	subs	r3, r2, r3
 800b9b6:	2b02      	cmp	r3, #2
 800b9b8:	d901      	bls.n	800b9be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800b9ba:	2303      	movs	r3, #3
 800b9bc:	e314      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800b9be:	4b20      	ldr	r3, [pc, #128]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	f003 0302 	and.w	r3, r3, #2
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d1f0      	bne.n	800b9ac <HAL_RCC_OscConfig+0x1dc>
 800b9ca:	e000      	b.n	800b9ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800b9cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	f003 0301 	and.w	r3, r3, #1
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d073      	beq.n	800bac2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800b9da:	69bb      	ldr	r3, [r7, #24]
 800b9dc:	2b08      	cmp	r3, #8
 800b9de:	d005      	beq.n	800b9ec <HAL_RCC_OscConfig+0x21c>
 800b9e0:	69bb      	ldr	r3, [r7, #24]
 800b9e2:	2b0c      	cmp	r3, #12
 800b9e4:	d10e      	bne.n	800ba04 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	2b03      	cmp	r3, #3
 800b9ea:	d10b      	bne.n	800ba04 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9ec:	4b14      	ldr	r3, [pc, #80]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d063      	beq.n	800bac0 <HAL_RCC_OscConfig+0x2f0>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	685b      	ldr	r3, [r3, #4]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d15f      	bne.n	800bac0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800ba00:	2301      	movs	r3, #1
 800ba02:	e2f1      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	685b      	ldr	r3, [r3, #4]
 800ba08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba0c:	d106      	bne.n	800ba1c <HAL_RCC_OscConfig+0x24c>
 800ba0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a0b      	ldr	r2, [pc, #44]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800ba14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba18:	6013      	str	r3, [r2, #0]
 800ba1a:	e025      	b.n	800ba68 <HAL_RCC_OscConfig+0x298>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800ba24:	d114      	bne.n	800ba50 <HAL_RCC_OscConfig+0x280>
 800ba26:	4b06      	ldr	r3, [pc, #24]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a05      	ldr	r2, [pc, #20]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800ba2c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800ba30:	6013      	str	r3, [r2, #0]
 800ba32:	4b03      	ldr	r3, [pc, #12]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	4a02      	ldr	r2, [pc, #8]	@ (800ba40 <HAL_RCC_OscConfig+0x270>)
 800ba38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ba3c:	6013      	str	r3, [r2, #0]
 800ba3e:	e013      	b.n	800ba68 <HAL_RCC_OscConfig+0x298>
 800ba40:	40021000 	.word	0x40021000
 800ba44:	08010aa4 	.word	0x08010aa4
 800ba48:	20000048 	.word	0x20000048
 800ba4c:	20000060 	.word	0x20000060
 800ba50:	4ba0      	ldr	r3, [pc, #640]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	4a9f      	ldr	r2, [pc, #636]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800ba56:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ba5a:	6013      	str	r3, [r2, #0]
 800ba5c:	4b9d      	ldr	r3, [pc, #628]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a9c      	ldr	r2, [pc, #624]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800ba62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ba66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	685b      	ldr	r3, [r3, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d013      	beq.n	800ba98 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba70:	f7fd fb84 	bl	800917c <HAL_GetTick>
 800ba74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba76:	e008      	b.n	800ba8a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ba78:	f7fd fb80 	bl	800917c <HAL_GetTick>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	693b      	ldr	r3, [r7, #16]
 800ba80:	1ad3      	subs	r3, r2, r3
 800ba82:	2b64      	cmp	r3, #100	@ 0x64
 800ba84:	d901      	bls.n	800ba8a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800ba86:	2303      	movs	r3, #3
 800ba88:	e2ae      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ba8a:	4b92      	ldr	r3, [pc, #584]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d0f0      	beq.n	800ba78 <HAL_RCC_OscConfig+0x2a8>
 800ba96:	e014      	b.n	800bac2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba98:	f7fd fb70 	bl	800917c <HAL_GetTick>
 800ba9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800ba9e:	e008      	b.n	800bab2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800baa0:	f7fd fb6c 	bl	800917c <HAL_GetTick>
 800baa4:	4602      	mov	r2, r0
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	1ad3      	subs	r3, r2, r3
 800baaa:	2b64      	cmp	r3, #100	@ 0x64
 800baac:	d901      	bls.n	800bab2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800baae:	2303      	movs	r3, #3
 800bab0:	e29a      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800bab2:	4b88      	ldr	r3, [pc, #544]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1f0      	bne.n	800baa0 <HAL_RCC_OscConfig+0x2d0>
 800babe:	e000      	b.n	800bac2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bac0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	f003 0302 	and.w	r3, r3, #2
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d060      	beq.n	800bb90 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	2b04      	cmp	r3, #4
 800bad2:	d005      	beq.n	800bae0 <HAL_RCC_OscConfig+0x310>
 800bad4:	69bb      	ldr	r3, [r7, #24]
 800bad6:	2b0c      	cmp	r3, #12
 800bad8:	d119      	bne.n	800bb0e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	2b02      	cmp	r3, #2
 800bade:	d116      	bne.n	800bb0e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bae0:	4b7c      	ldr	r3, [pc, #496]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d005      	beq.n	800baf8 <HAL_RCC_OscConfig+0x328>
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	68db      	ldr	r3, [r3, #12]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d101      	bne.n	800baf8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800baf4:	2301      	movs	r3, #1
 800baf6:	e277      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800baf8:	4b76      	ldr	r3, [pc, #472]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bafa:	685b      	ldr	r3, [r3, #4]
 800bafc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	061b      	lsls	r3, r3, #24
 800bb06:	4973      	ldr	r1, [pc, #460]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb08:	4313      	orrs	r3, r2
 800bb0a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bb0c:	e040      	b.n	800bb90 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d023      	beq.n	800bb5e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bb16:	4b6f      	ldr	r3, [pc, #444]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4a6e      	ldr	r2, [pc, #440]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb22:	f7fd fb2b 	bl	800917c <HAL_GetTick>
 800bb26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb28:	e008      	b.n	800bb3c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb2a:	f7fd fb27 	bl	800917c <HAL_GetTick>
 800bb2e:	4602      	mov	r2, r0
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	1ad3      	subs	r3, r2, r3
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d901      	bls.n	800bb3c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	e255      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bb3c:	4b65      	ldr	r3, [pc, #404]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	d0f0      	beq.n	800bb2a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bb48:	4b62      	ldr	r3, [pc, #392]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb4a:	685b      	ldr	r3, [r3, #4]
 800bb4c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	691b      	ldr	r3, [r3, #16]
 800bb54:	061b      	lsls	r3, r3, #24
 800bb56:	495f      	ldr	r1, [pc, #380]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	604b      	str	r3, [r1, #4]
 800bb5c:	e018      	b.n	800bb90 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bb5e:	4b5d      	ldr	r3, [pc, #372]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	4a5c      	ldr	r2, [pc, #368]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bb68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb6a:	f7fd fb07 	bl	800917c <HAL_GetTick>
 800bb6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb70:	e008      	b.n	800bb84 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bb72:	f7fd fb03 	bl	800917c <HAL_GetTick>
 800bb76:	4602      	mov	r2, r0
 800bb78:	693b      	ldr	r3, [r7, #16]
 800bb7a:	1ad3      	subs	r3, r2, r3
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d901      	bls.n	800bb84 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800bb80:	2303      	movs	r3, #3
 800bb82:	e231      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800bb84:	4b53      	ldr	r3, [pc, #332]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d1f0      	bne.n	800bb72 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 0308 	and.w	r3, r3, #8
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d03c      	beq.n	800bc16 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	695b      	ldr	r3, [r3, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d01c      	beq.n	800bbde <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bba4:	4b4b      	ldr	r3, [pc, #300]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbaa:	4a4a      	ldr	r2, [pc, #296]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bbac:	f043 0301 	orr.w	r3, r3, #1
 800bbb0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbb4:	f7fd fae2 	bl	800917c <HAL_GetTick>
 800bbb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbba:	e008      	b.n	800bbce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbbc:	f7fd fade 	bl	800917c <HAL_GetTick>
 800bbc0:	4602      	mov	r2, r0
 800bbc2:	693b      	ldr	r3, [r7, #16]
 800bbc4:	1ad3      	subs	r3, r2, r3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d901      	bls.n	800bbce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800bbca:	2303      	movs	r3, #3
 800bbcc:	e20c      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800bbce:	4b41      	ldr	r3, [pc, #260]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bbd0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbd4:	f003 0302 	and.w	r3, r3, #2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d0ef      	beq.n	800bbbc <HAL_RCC_OscConfig+0x3ec>
 800bbdc:	e01b      	b.n	800bc16 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bbde:	4b3d      	ldr	r3, [pc, #244]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bbe0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bbe4:	4a3b      	ldr	r2, [pc, #236]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bbe6:	f023 0301 	bic.w	r3, r3, #1
 800bbea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bbee:	f7fd fac5 	bl	800917c <HAL_GetTick>
 800bbf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bbf4:	e008      	b.n	800bc08 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bbf6:	f7fd fac1 	bl	800917c <HAL_GetTick>
 800bbfa:	4602      	mov	r2, r0
 800bbfc:	693b      	ldr	r3, [r7, #16]
 800bbfe:	1ad3      	subs	r3, r2, r3
 800bc00:	2b02      	cmp	r3, #2
 800bc02:	d901      	bls.n	800bc08 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800bc04:	2303      	movs	r3, #3
 800bc06:	e1ef      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800bc08:	4b32      	ldr	r3, [pc, #200]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800bc0e:	f003 0302 	and.w	r3, r3, #2
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d1ef      	bne.n	800bbf6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	f003 0304 	and.w	r3, r3, #4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	f000 80a6 	beq.w	800bd70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bc24:	2300      	movs	r3, #0
 800bc26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800bc28:	4b2a      	ldr	r3, [pc, #168]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d10d      	bne.n	800bc50 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bc34:	4b27      	ldr	r3, [pc, #156]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc38:	4a26      	ldr	r2, [pc, #152]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bc3e:	6593      	str	r3, [r2, #88]	@ 0x58
 800bc40:	4b24      	ldr	r3, [pc, #144]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bc44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800bc48:	60bb      	str	r3, [r7, #8]
 800bc4a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800bc4c:	2301      	movs	r3, #1
 800bc4e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc50:	4b21      	ldr	r3, [pc, #132]	@ (800bcd8 <HAL_RCC_OscConfig+0x508>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d118      	bne.n	800bc8e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bc5c:	4b1e      	ldr	r3, [pc, #120]	@ (800bcd8 <HAL_RCC_OscConfig+0x508>)
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a1d      	ldr	r2, [pc, #116]	@ (800bcd8 <HAL_RCC_OscConfig+0x508>)
 800bc62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bc66:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bc68:	f7fd fa88 	bl	800917c <HAL_GetTick>
 800bc6c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc6e:	e008      	b.n	800bc82 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bc70:	f7fd fa84 	bl	800917c <HAL_GetTick>
 800bc74:	4602      	mov	r2, r0
 800bc76:	693b      	ldr	r3, [r7, #16]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	2b02      	cmp	r3, #2
 800bc7c:	d901      	bls.n	800bc82 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800bc7e:	2303      	movs	r3, #3
 800bc80:	e1b2      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800bc82:	4b15      	ldr	r3, [pc, #84]	@ (800bcd8 <HAL_RCC_OscConfig+0x508>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d0f0      	beq.n	800bc70 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	689b      	ldr	r3, [r3, #8]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d108      	bne.n	800bca8 <HAL_RCC_OscConfig+0x4d8>
 800bc96:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bc9c:	4a0d      	ldr	r2, [pc, #52]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bc9e:	f043 0301 	orr.w	r3, r3, #1
 800bca2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bca6:	e029      	b.n	800bcfc <HAL_RCC_OscConfig+0x52c>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	2b05      	cmp	r3, #5
 800bcae:	d115      	bne.n	800bcdc <HAL_RCC_OscConfig+0x50c>
 800bcb0:	4b08      	ldr	r3, [pc, #32]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bcb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcb6:	4a07      	ldr	r2, [pc, #28]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bcb8:	f043 0304 	orr.w	r3, r3, #4
 800bcbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bcc0:	4b04      	ldr	r3, [pc, #16]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bcc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcc6:	4a03      	ldr	r2, [pc, #12]	@ (800bcd4 <HAL_RCC_OscConfig+0x504>)
 800bcc8:	f043 0301 	orr.w	r3, r3, #1
 800bccc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bcd0:	e014      	b.n	800bcfc <HAL_RCC_OscConfig+0x52c>
 800bcd2:	bf00      	nop
 800bcd4:	40021000 	.word	0x40021000
 800bcd8:	40007000 	.word	0x40007000
 800bcdc:	4b9a      	ldr	r3, [pc, #616]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bcde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bce2:	4a99      	ldr	r2, [pc, #612]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bce4:	f023 0301 	bic.w	r3, r3, #1
 800bce8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800bcec:	4b96      	ldr	r3, [pc, #600]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bcee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bcf2:	4a95      	ldr	r2, [pc, #596]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bcf4:	f023 0304 	bic.w	r3, r3, #4
 800bcf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d016      	beq.n	800bd32 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd04:	f7fd fa3a 	bl	800917c <HAL_GetTick>
 800bd08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd0a:	e00a      	b.n	800bd22 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd0c:	f7fd fa36 	bl	800917c <HAL_GetTick>
 800bd10:	4602      	mov	r2, r0
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	1ad3      	subs	r3, r2, r3
 800bd16:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd1a:	4293      	cmp	r3, r2
 800bd1c:	d901      	bls.n	800bd22 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800bd1e:	2303      	movs	r3, #3
 800bd20:	e162      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bd22:	4b89      	ldr	r3, [pc, #548]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bd24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd28:	f003 0302 	and.w	r3, r3, #2
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d0ed      	beq.n	800bd0c <HAL_RCC_OscConfig+0x53c>
 800bd30:	e015      	b.n	800bd5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd32:	f7fd fa23 	bl	800917c <HAL_GetTick>
 800bd36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd38:	e00a      	b.n	800bd50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bd3a:	f7fd fa1f 	bl	800917c <HAL_GetTick>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	693b      	ldr	r3, [r7, #16]
 800bd42:	1ad3      	subs	r3, r2, r3
 800bd44:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d901      	bls.n	800bd50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	e14b      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800bd50:	4b7d      	ldr	r3, [pc, #500]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bd52:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800bd56:	f003 0302 	and.w	r3, r3, #2
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d1ed      	bne.n	800bd3a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bd5e:	7ffb      	ldrb	r3, [r7, #31]
 800bd60:	2b01      	cmp	r3, #1
 800bd62:	d105      	bne.n	800bd70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bd64:	4b78      	ldr	r3, [pc, #480]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bd66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bd68:	4a77      	ldr	r2, [pc, #476]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bd6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800bd6e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	f003 0320 	and.w	r3, r3, #32
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d03c      	beq.n	800bdf6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d01c      	beq.n	800bdbe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bd84:	4b70      	ldr	r3, [pc, #448]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bd86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bd8a:	4a6f      	ldr	r2, [pc, #444]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bd8c:	f043 0301 	orr.w	r3, r3, #1
 800bd90:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bd94:	f7fd f9f2 	bl	800917c <HAL_GetTick>
 800bd98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bd9a:	e008      	b.n	800bdae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bd9c:	f7fd f9ee 	bl	800917c <HAL_GetTick>
 800bda0:	4602      	mov	r2, r0
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	1ad3      	subs	r3, r2, r3
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d901      	bls.n	800bdae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800bdaa:	2303      	movs	r3, #3
 800bdac:	e11c      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800bdae:	4b66      	ldr	r3, [pc, #408]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bdb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdb4:	f003 0302 	and.w	r3, r3, #2
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d0ef      	beq.n	800bd9c <HAL_RCC_OscConfig+0x5cc>
 800bdbc:	e01b      	b.n	800bdf6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bdbe:	4b62      	ldr	r3, [pc, #392]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bdc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdc4:	4a60      	ldr	r2, [pc, #384]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bdc6:	f023 0301 	bic.w	r3, r3, #1
 800bdca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bdce:	f7fd f9d5 	bl	800917c <HAL_GetTick>
 800bdd2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bdd4:	e008      	b.n	800bde8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800bdd6:	f7fd f9d1 	bl	800917c <HAL_GetTick>
 800bdda:	4602      	mov	r2, r0
 800bddc:	693b      	ldr	r3, [r7, #16]
 800bdde:	1ad3      	subs	r3, r2, r3
 800bde0:	2b02      	cmp	r3, #2
 800bde2:	d901      	bls.n	800bde8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800bde4:	2303      	movs	r3, #3
 800bde6:	e0ff      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800bde8:	4b57      	ldr	r3, [pc, #348]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bdea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800bdee:	f003 0302 	and.w	r3, r3, #2
 800bdf2:	2b00      	cmp	r3, #0
 800bdf4:	d1ef      	bne.n	800bdd6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	f000 80f3 	beq.w	800bfe6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be04:	2b02      	cmp	r3, #2
 800be06:	f040 80c9 	bne.w	800bf9c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800be0a:	4b4f      	ldr	r3, [pc, #316]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800be0c:	68db      	ldr	r3, [r3, #12]
 800be0e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800be10:	697b      	ldr	r3, [r7, #20]
 800be12:	f003 0203 	and.w	r2, r3, #3
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be1a:	429a      	cmp	r2, r3
 800be1c:	d12c      	bne.n	800be78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be28:	3b01      	subs	r3, #1
 800be2a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d123      	bne.n	800be78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be3a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800be3c:	429a      	cmp	r2, r3
 800be3e:	d11b      	bne.n	800be78 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800be4c:	429a      	cmp	r2, r3
 800be4e:	d113      	bne.n	800be78 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800be5a:	085b      	lsrs	r3, r3, #1
 800be5c:	3b01      	subs	r3, #1
 800be5e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800be60:	429a      	cmp	r2, r3
 800be62:	d109      	bne.n	800be78 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800be64:	697b      	ldr	r3, [r7, #20]
 800be66:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800be6e:	085b      	lsrs	r3, r3, #1
 800be70:	3b01      	subs	r3, #1
 800be72:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800be74:	429a      	cmp	r2, r3
 800be76:	d06b      	beq.n	800bf50 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800be78:	69bb      	ldr	r3, [r7, #24]
 800be7a:	2b0c      	cmp	r3, #12
 800be7c:	d062      	beq.n	800bf44 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800be7e:	4b32      	ldr	r3, [pc, #200]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e0ac      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800be8e:	4b2e      	ldr	r3, [pc, #184]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	4a2d      	ldr	r2, [pc, #180]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800be94:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800be98:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800be9a:	f7fd f96f 	bl	800917c <HAL_GetTick>
 800be9e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bea0:	e008      	b.n	800beb4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bea2:	f7fd f96b 	bl	800917c <HAL_GetTick>
 800bea6:	4602      	mov	r2, r0
 800bea8:	693b      	ldr	r3, [r7, #16]
 800beaa:	1ad3      	subs	r3, r2, r3
 800beac:	2b02      	cmp	r3, #2
 800beae:	d901      	bls.n	800beb4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800beb0:	2303      	movs	r3, #3
 800beb2:	e099      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800beb4:	4b24      	ldr	r3, [pc, #144]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d1f0      	bne.n	800bea2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bec0:	4b21      	ldr	r3, [pc, #132]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	4b21      	ldr	r3, [pc, #132]	@ (800bf4c <HAL_RCC_OscConfig+0x77c>)
 800bec6:	4013      	ands	r3, r2
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bed0:	3a01      	subs	r2, #1
 800bed2:	0112      	lsls	r2, r2, #4
 800bed4:	4311      	orrs	r1, r2
 800bed6:	687a      	ldr	r2, [r7, #4]
 800bed8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800beda:	0212      	lsls	r2, r2, #8
 800bedc:	4311      	orrs	r1, r2
 800bede:	687a      	ldr	r2, [r7, #4]
 800bee0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800bee2:	0852      	lsrs	r2, r2, #1
 800bee4:	3a01      	subs	r2, #1
 800bee6:	0552      	lsls	r2, r2, #21
 800bee8:	4311      	orrs	r1, r2
 800beea:	687a      	ldr	r2, [r7, #4]
 800beec:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800beee:	0852      	lsrs	r2, r2, #1
 800bef0:	3a01      	subs	r2, #1
 800bef2:	0652      	lsls	r2, r2, #25
 800bef4:	4311      	orrs	r1, r2
 800bef6:	687a      	ldr	r2, [r7, #4]
 800bef8:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800befa:	06d2      	lsls	r2, r2, #27
 800befc:	430a      	orrs	r2, r1
 800befe:	4912      	ldr	r1, [pc, #72]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bf00:	4313      	orrs	r3, r2
 800bf02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800bf04:	4b10      	ldr	r3, [pc, #64]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	4a0f      	ldr	r2, [pc, #60]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bf0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bf10:	4b0d      	ldr	r3, [pc, #52]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bf12:	68db      	ldr	r3, [r3, #12]
 800bf14:	4a0c      	ldr	r2, [pc, #48]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bf16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800bf1c:	f7fd f92e 	bl	800917c <HAL_GetTick>
 800bf20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf22:	e008      	b.n	800bf36 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf24:	f7fd f92a 	bl	800917c <HAL_GetTick>
 800bf28:	4602      	mov	r2, r0
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	1ad3      	subs	r3, r2, r3
 800bf2e:	2b02      	cmp	r3, #2
 800bf30:	d901      	bls.n	800bf36 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800bf32:	2303      	movs	r3, #3
 800bf34:	e058      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf36:	4b04      	ldr	r3, [pc, #16]	@ (800bf48 <HAL_RCC_OscConfig+0x778>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d0f0      	beq.n	800bf24 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bf42:	e050      	b.n	800bfe6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800bf44:	2301      	movs	r3, #1
 800bf46:	e04f      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
 800bf48:	40021000 	.word	0x40021000
 800bf4c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf50:	4b27      	ldr	r3, [pc, #156]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d144      	bne.n	800bfe6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800bf5c:	4b24      	ldr	r3, [pc, #144]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	4a23      	ldr	r2, [pc, #140]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bf62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf66:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bf68:	4b21      	ldr	r3, [pc, #132]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	4a20      	ldr	r2, [pc, #128]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bf6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bf72:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bf74:	f7fd f902 	bl	800917c <HAL_GetTick>
 800bf78:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf7a:	e008      	b.n	800bf8e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bf7c:	f7fd f8fe 	bl	800917c <HAL_GetTick>
 800bf80:	4602      	mov	r2, r0
 800bf82:	693b      	ldr	r3, [r7, #16]
 800bf84:	1ad3      	subs	r3, r2, r3
 800bf86:	2b02      	cmp	r3, #2
 800bf88:	d901      	bls.n	800bf8e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800bf8a:	2303      	movs	r3, #3
 800bf8c:	e02c      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bf8e:	4b18      	ldr	r3, [pc, #96]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d0f0      	beq.n	800bf7c <HAL_RCC_OscConfig+0x7ac>
 800bf9a:	e024      	b.n	800bfe6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800bf9c:	69bb      	ldr	r3, [r7, #24]
 800bf9e:	2b0c      	cmp	r3, #12
 800bfa0:	d01f      	beq.n	800bfe2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfa2:	4b13      	ldr	r3, [pc, #76]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	4a12      	ldr	r2, [pc, #72]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bfa8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bfac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfae:	f7fd f8e5 	bl	800917c <HAL_GetTick>
 800bfb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfb4:	e008      	b.n	800bfc8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bfb6:	f7fd f8e1 	bl	800917c <HAL_GetTick>
 800bfba:	4602      	mov	r2, r0
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	2b02      	cmp	r3, #2
 800bfc2:	d901      	bls.n	800bfc8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e00f      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bfc8:	4b09      	ldr	r3, [pc, #36]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	d1f0      	bne.n	800bfb6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800bfd4:	4b06      	ldr	r3, [pc, #24]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bfd6:	68da      	ldr	r2, [r3, #12]
 800bfd8:	4905      	ldr	r1, [pc, #20]	@ (800bff0 <HAL_RCC_OscConfig+0x820>)
 800bfda:	4b06      	ldr	r3, [pc, #24]	@ (800bff4 <HAL_RCC_OscConfig+0x824>)
 800bfdc:	4013      	ands	r3, r2
 800bfde:	60cb      	str	r3, [r1, #12]
 800bfe0:	e001      	b.n	800bfe6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800bfe2:	2301      	movs	r3, #1
 800bfe4:	e000      	b.n	800bfe8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800bfe6:	2300      	movs	r3, #0
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3720      	adds	r7, #32
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}
 800bff0:	40021000 	.word	0x40021000
 800bff4:	feeefffc 	.word	0xfeeefffc

0800bff8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
 800c000:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c008:	2301      	movs	r3, #1
 800c00a:	e0e7      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c00c:	4b75      	ldr	r3, [pc, #468]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	f003 0307 	and.w	r3, r3, #7
 800c014:	683a      	ldr	r2, [r7, #0]
 800c016:	429a      	cmp	r2, r3
 800c018:	d910      	bls.n	800c03c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c01a:	4b72      	ldr	r3, [pc, #456]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	f023 0207 	bic.w	r2, r3, #7
 800c022:	4970      	ldr	r1, [pc, #448]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	4313      	orrs	r3, r2
 800c028:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c02a:	4b6e      	ldr	r3, [pc, #440]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f003 0307 	and.w	r3, r3, #7
 800c032:	683a      	ldr	r2, [r7, #0]
 800c034:	429a      	cmp	r2, r3
 800c036:	d001      	beq.n	800c03c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c038:	2301      	movs	r3, #1
 800c03a:	e0cf      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	f003 0302 	and.w	r3, r3, #2
 800c044:	2b00      	cmp	r3, #0
 800c046:	d010      	beq.n	800c06a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689a      	ldr	r2, [r3, #8]
 800c04c:	4b66      	ldr	r3, [pc, #408]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c054:	429a      	cmp	r2, r3
 800c056:	d908      	bls.n	800c06a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c058:	4b63      	ldr	r3, [pc, #396]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c05a:	689b      	ldr	r3, [r3, #8]
 800c05c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	689b      	ldr	r3, [r3, #8]
 800c064:	4960      	ldr	r1, [pc, #384]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c066:	4313      	orrs	r3, r2
 800c068:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	f003 0301 	and.w	r3, r3, #1
 800c072:	2b00      	cmp	r3, #0
 800c074:	d04c      	beq.n	800c110 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	685b      	ldr	r3, [r3, #4]
 800c07a:	2b03      	cmp	r3, #3
 800c07c:	d107      	bne.n	800c08e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800c07e:	4b5a      	ldr	r3, [pc, #360]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c086:	2b00      	cmp	r3, #0
 800c088:	d121      	bne.n	800c0ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800c08a:	2301      	movs	r3, #1
 800c08c:	e0a6      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	2b02      	cmp	r3, #2
 800c094:	d107      	bne.n	800c0a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c096:	4b54      	ldr	r3, [pc, #336]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d115      	bne.n	800c0ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	e09a      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d107      	bne.n	800c0be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800c0ae:	4b4e      	ldr	r3, [pc, #312]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 0302 	and.w	r3, r3, #2
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d109      	bne.n	800c0ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e08e      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c0be:	4b4a      	ldr	r3, [pc, #296]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e086      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c0ce:	4b46      	ldr	r3, [pc, #280]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c0d0:	689b      	ldr	r3, [r3, #8]
 800c0d2:	f023 0203 	bic.w	r2, r3, #3
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	685b      	ldr	r3, [r3, #4]
 800c0da:	4943      	ldr	r1, [pc, #268]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c0e0:	f7fd f84c 	bl	800917c <HAL_GetTick>
 800c0e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0e6:	e00a      	b.n	800c0fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c0e8:	f7fd f848 	bl	800917c <HAL_GetTick>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d901      	bls.n	800c0fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800c0fa:	2303      	movs	r3, #3
 800c0fc:	e06e      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c0fe:	4b3a      	ldr	r3, [pc, #232]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	f003 020c 	and.w	r2, r3, #12
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	009b      	lsls	r3, r3, #2
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d1eb      	bne.n	800c0e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0302 	and.w	r3, r3, #2
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d010      	beq.n	800c13e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	689a      	ldr	r2, [r3, #8]
 800c120:	4b31      	ldr	r3, [pc, #196]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c122:	689b      	ldr	r3, [r3, #8]
 800c124:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c128:	429a      	cmp	r2, r3
 800c12a:	d208      	bcs.n	800c13e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c12c:	4b2e      	ldr	r3, [pc, #184]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	492b      	ldr	r1, [pc, #172]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c13e:	4b29      	ldr	r3, [pc, #164]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0307 	and.w	r3, r3, #7
 800c146:	683a      	ldr	r2, [r7, #0]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d210      	bcs.n	800c16e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c14c:	4b25      	ldr	r3, [pc, #148]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	f023 0207 	bic.w	r2, r3, #7
 800c154:	4923      	ldr	r1, [pc, #140]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	4313      	orrs	r3, r2
 800c15a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c15c:	4b21      	ldr	r3, [pc, #132]	@ (800c1e4 <HAL_RCC_ClockConfig+0x1ec>)
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 0307 	and.w	r3, r3, #7
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	429a      	cmp	r2, r3
 800c168:	d001      	beq.n	800c16e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800c16a:	2301      	movs	r3, #1
 800c16c:	e036      	b.n	800c1dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	f003 0304 	and.w	r3, r3, #4
 800c176:	2b00      	cmp	r3, #0
 800c178:	d008      	beq.n	800c18c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c17a:	4b1b      	ldr	r3, [pc, #108]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	4918      	ldr	r1, [pc, #96]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c188:	4313      	orrs	r3, r2
 800c18a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	f003 0308 	and.w	r3, r3, #8
 800c194:	2b00      	cmp	r3, #0
 800c196:	d009      	beq.n	800c1ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c198:	4b13      	ldr	r3, [pc, #76]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c19a:	689b      	ldr	r3, [r3, #8]
 800c19c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	691b      	ldr	r3, [r3, #16]
 800c1a4:	00db      	lsls	r3, r3, #3
 800c1a6:	4910      	ldr	r1, [pc, #64]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1a8:	4313      	orrs	r3, r2
 800c1aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800c1ac:	f000 f824 	bl	800c1f8 <HAL_RCC_GetSysClockFreq>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	4b0d      	ldr	r3, [pc, #52]	@ (800c1e8 <HAL_RCC_ClockConfig+0x1f0>)
 800c1b4:	689b      	ldr	r3, [r3, #8]
 800c1b6:	091b      	lsrs	r3, r3, #4
 800c1b8:	f003 030f 	and.w	r3, r3, #15
 800c1bc:	490b      	ldr	r1, [pc, #44]	@ (800c1ec <HAL_RCC_ClockConfig+0x1f4>)
 800c1be:	5ccb      	ldrb	r3, [r1, r3]
 800c1c0:	f003 031f 	and.w	r3, r3, #31
 800c1c4:	fa22 f303 	lsr.w	r3, r2, r3
 800c1c8:	4a09      	ldr	r2, [pc, #36]	@ (800c1f0 <HAL_RCC_ClockConfig+0x1f8>)
 800c1ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c1cc:	4b09      	ldr	r3, [pc, #36]	@ (800c1f4 <HAL_RCC_ClockConfig+0x1fc>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f7fc ff83 	bl	80090dc <HAL_InitTick>
 800c1d6:	4603      	mov	r3, r0
 800c1d8:	72fb      	strb	r3, [r7, #11]

  return status;
 800c1da:	7afb      	ldrb	r3, [r7, #11]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	3710      	adds	r7, #16
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	bd80      	pop	{r7, pc}
 800c1e4:	40022000 	.word	0x40022000
 800c1e8:	40021000 	.word	0x40021000
 800c1ec:	08010aa4 	.word	0x08010aa4
 800c1f0:	20000048 	.word	0x20000048
 800c1f4:	20000060 	.word	0x20000060

0800c1f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	b089      	sub	sp, #36	@ 0x24
 800c1fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800c1fe:	2300      	movs	r3, #0
 800c200:	61fb      	str	r3, [r7, #28]
 800c202:	2300      	movs	r3, #0
 800c204:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c206:	4b3e      	ldr	r3, [pc, #248]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c208:	689b      	ldr	r3, [r3, #8]
 800c20a:	f003 030c 	and.w	r3, r3, #12
 800c20e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c210:	4b3b      	ldr	r3, [pc, #236]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c212:	68db      	ldr	r3, [r3, #12]
 800c214:	f003 0303 	and.w	r3, r3, #3
 800c218:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d005      	beq.n	800c22c <HAL_RCC_GetSysClockFreq+0x34>
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	2b0c      	cmp	r3, #12
 800c224:	d121      	bne.n	800c26a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2b01      	cmp	r3, #1
 800c22a:	d11e      	bne.n	800c26a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800c22c:	4b34      	ldr	r3, [pc, #208]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f003 0308 	and.w	r3, r3, #8
 800c234:	2b00      	cmp	r3, #0
 800c236:	d107      	bne.n	800c248 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800c238:	4b31      	ldr	r3, [pc, #196]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c23a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800c23e:	0a1b      	lsrs	r3, r3, #8
 800c240:	f003 030f 	and.w	r3, r3, #15
 800c244:	61fb      	str	r3, [r7, #28]
 800c246:	e005      	b.n	800c254 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800c248:	4b2d      	ldr	r3, [pc, #180]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	091b      	lsrs	r3, r3, #4
 800c24e:	f003 030f 	and.w	r3, r3, #15
 800c252:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800c254:	4a2b      	ldr	r2, [pc, #172]	@ (800c304 <HAL_RCC_GetSysClockFreq+0x10c>)
 800c256:	69fb      	ldr	r3, [r7, #28]
 800c258:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c25c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10d      	bne.n	800c280 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800c264:	69fb      	ldr	r3, [r7, #28]
 800c266:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c268:	e00a      	b.n	800c280 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800c26a:	693b      	ldr	r3, [r7, #16]
 800c26c:	2b04      	cmp	r3, #4
 800c26e:	d102      	bne.n	800c276 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800c270:	4b25      	ldr	r3, [pc, #148]	@ (800c308 <HAL_RCC_GetSysClockFreq+0x110>)
 800c272:	61bb      	str	r3, [r7, #24]
 800c274:	e004      	b.n	800c280 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800c276:	693b      	ldr	r3, [r7, #16]
 800c278:	2b08      	cmp	r3, #8
 800c27a:	d101      	bne.n	800c280 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800c27c:	4b23      	ldr	r3, [pc, #140]	@ (800c30c <HAL_RCC_GetSysClockFreq+0x114>)
 800c27e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800c280:	693b      	ldr	r3, [r7, #16]
 800c282:	2b0c      	cmp	r3, #12
 800c284:	d134      	bne.n	800c2f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800c286:	4b1e      	ldr	r3, [pc, #120]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	f003 0303 	and.w	r3, r3, #3
 800c28e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	2b02      	cmp	r3, #2
 800c294:	d003      	beq.n	800c29e <HAL_RCC_GetSysClockFreq+0xa6>
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	2b03      	cmp	r3, #3
 800c29a:	d003      	beq.n	800c2a4 <HAL_RCC_GetSysClockFreq+0xac>
 800c29c:	e005      	b.n	800c2aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800c29e:	4b1a      	ldr	r3, [pc, #104]	@ (800c308 <HAL_RCC_GetSysClockFreq+0x110>)
 800c2a0:	617b      	str	r3, [r7, #20]
      break;
 800c2a2:	e005      	b.n	800c2b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800c2a4:	4b19      	ldr	r3, [pc, #100]	@ (800c30c <HAL_RCC_GetSysClockFreq+0x114>)
 800c2a6:	617b      	str	r3, [r7, #20]
      break;
 800c2a8:	e002      	b.n	800c2b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800c2aa:	69fb      	ldr	r3, [r7, #28]
 800c2ac:	617b      	str	r3, [r7, #20]
      break;
 800c2ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800c2b0:	4b13      	ldr	r3, [pc, #76]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2b2:	68db      	ldr	r3, [r3, #12]
 800c2b4:	091b      	lsrs	r3, r3, #4
 800c2b6:	f003 0307 	and.w	r3, r3, #7
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800c2be:	4b10      	ldr	r3, [pc, #64]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2c0:	68db      	ldr	r3, [r3, #12]
 800c2c2:	0a1b      	lsrs	r3, r3, #8
 800c2c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c2c8:	697a      	ldr	r2, [r7, #20]
 800c2ca:	fb03 f202 	mul.w	r2, r3, r2
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800c2d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c300 <HAL_RCC_GetSysClockFreq+0x108>)
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	0e5b      	lsrs	r3, r3, #25
 800c2dc:	f003 0303 	and.w	r3, r3, #3
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	005b      	lsls	r3, r3, #1
 800c2e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800c2e6:	697a      	ldr	r2, [r7, #20]
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800c2f0:	69bb      	ldr	r3, [r7, #24]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3724      	adds	r7, #36	@ 0x24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fc:	4770      	bx	lr
 800c2fe:	bf00      	nop
 800c300:	40021000 	.word	0x40021000
 800c304:	08010abc 	.word	0x08010abc
 800c308:	00f42400 	.word	0x00f42400
 800c30c:	007a1200 	.word	0x007a1200

0800c310 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c310:	b480      	push	{r7}
 800c312:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c314:	4b03      	ldr	r3, [pc, #12]	@ (800c324 <HAL_RCC_GetHCLKFreq+0x14>)
 800c316:	681b      	ldr	r3, [r3, #0]
}
 800c318:	4618      	mov	r0, r3
 800c31a:	46bd      	mov	sp, r7
 800c31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c320:	4770      	bx	lr
 800c322:	bf00      	nop
 800c324:	20000048 	.word	0x20000048

0800c328 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800c32c:	f7ff fff0 	bl	800c310 <HAL_RCC_GetHCLKFreq>
 800c330:	4602      	mov	r2, r0
 800c332:	4b06      	ldr	r3, [pc, #24]	@ (800c34c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	0a1b      	lsrs	r3, r3, #8
 800c338:	f003 0307 	and.w	r3, r3, #7
 800c33c:	4904      	ldr	r1, [pc, #16]	@ (800c350 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c33e:	5ccb      	ldrb	r3, [r1, r3]
 800c340:	f003 031f 	and.w	r3, r3, #31
 800c344:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c348:	4618      	mov	r0, r3
 800c34a:	bd80      	pop	{r7, pc}
 800c34c:	40021000 	.word	0x40021000
 800c350:	08010ab4 	.word	0x08010ab4

0800c354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c354:	b580      	push	{r7, lr}
 800c356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800c358:	f7ff ffda 	bl	800c310 <HAL_RCC_GetHCLKFreq>
 800c35c:	4602      	mov	r2, r0
 800c35e:	4b06      	ldr	r3, [pc, #24]	@ (800c378 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c360:	689b      	ldr	r3, [r3, #8]
 800c362:	0adb      	lsrs	r3, r3, #11
 800c364:	f003 0307 	and.w	r3, r3, #7
 800c368:	4904      	ldr	r1, [pc, #16]	@ (800c37c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c36a:	5ccb      	ldrb	r3, [r1, r3]
 800c36c:	f003 031f 	and.w	r3, r3, #31
 800c370:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c374:	4618      	mov	r0, r3
 800c376:	bd80      	pop	{r7, pc}
 800c378:	40021000 	.word	0x40021000
 800c37c:	08010ab4 	.word	0x08010ab4

0800c380 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800c388:	2300      	movs	r3, #0
 800c38a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800c38c:	4b2a      	ldr	r3, [pc, #168]	@ (800c438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c38e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c390:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c394:	2b00      	cmp	r3, #0
 800c396:	d003      	beq.n	800c3a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800c398:	f7ff f9b6 	bl	800b708 <HAL_PWREx_GetVoltageRange>
 800c39c:	6178      	str	r0, [r7, #20]
 800c39e:	e014      	b.n	800c3ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800c3a0:	4b25      	ldr	r3, [pc, #148]	@ (800c438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3a4:	4a24      	ldr	r2, [pc, #144]	@ (800c438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c3aa:	6593      	str	r3, [r2, #88]	@ 0x58
 800c3ac:	4b22      	ldr	r3, [pc, #136]	@ (800c438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c3b4:	60fb      	str	r3, [r7, #12]
 800c3b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800c3b8:	f7ff f9a6 	bl	800b708 <HAL_PWREx_GetVoltageRange>
 800c3bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800c3be:	4b1e      	ldr	r3, [pc, #120]	@ (800c438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c3c2:	4a1d      	ldr	r2, [pc, #116]	@ (800c438 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800c3c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c3c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c3d0:	d10b      	bne.n	800c3ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2b80      	cmp	r3, #128	@ 0x80
 800c3d6:	d919      	bls.n	800c40c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	2ba0      	cmp	r3, #160	@ 0xa0
 800c3dc:	d902      	bls.n	800c3e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c3de:	2302      	movs	r3, #2
 800c3e0:	613b      	str	r3, [r7, #16]
 800c3e2:	e013      	b.n	800c40c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c3e4:	2301      	movs	r3, #1
 800c3e6:	613b      	str	r3, [r7, #16]
 800c3e8:	e010      	b.n	800c40c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	2b80      	cmp	r3, #128	@ 0x80
 800c3ee:	d902      	bls.n	800c3f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800c3f0:	2303      	movs	r3, #3
 800c3f2:	613b      	str	r3, [r7, #16]
 800c3f4:	e00a      	b.n	800c40c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b80      	cmp	r3, #128	@ 0x80
 800c3fa:	d102      	bne.n	800c402 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800c3fc:	2302      	movs	r3, #2
 800c3fe:	613b      	str	r3, [r7, #16]
 800c400:	e004      	b.n	800c40c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2b70      	cmp	r3, #112	@ 0x70
 800c406:	d101      	bne.n	800c40c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800c408:	2301      	movs	r3, #1
 800c40a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800c40c:	4b0b      	ldr	r3, [pc, #44]	@ (800c43c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f023 0207 	bic.w	r2, r3, #7
 800c414:	4909      	ldr	r1, [pc, #36]	@ (800c43c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	4313      	orrs	r3, r2
 800c41a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800c41c:	4b07      	ldr	r3, [pc, #28]	@ (800c43c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0307 	and.w	r3, r3, #7
 800c424:	693a      	ldr	r2, [r7, #16]
 800c426:	429a      	cmp	r2, r3
 800c428:	d001      	beq.n	800c42e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800c42a:	2301      	movs	r3, #1
 800c42c:	e000      	b.n	800c430 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800c42e:	2300      	movs	r3, #0
}
 800c430:	4618      	mov	r0, r3
 800c432:	3718      	adds	r7, #24
 800c434:	46bd      	mov	sp, r7
 800c436:	bd80      	pop	{r7, pc}
 800c438:	40021000 	.word	0x40021000
 800c43c:	40022000 	.word	0x40022000

0800c440 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b086      	sub	sp, #24
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c448:	2300      	movs	r3, #0
 800c44a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c44c:	2300      	movs	r3, #0
 800c44e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d031      	beq.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c460:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c464:	d01a      	beq.n	800c49c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800c466:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800c46a:	d814      	bhi.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d009      	beq.n	800c484 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800c470:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c474:	d10f      	bne.n	800c496 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800c476:	4b5d      	ldr	r3, [pc, #372]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	4a5c      	ldr	r2, [pc, #368]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c47c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c480:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c482:	e00c      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	3304      	adds	r3, #4
 800c488:	2100      	movs	r1, #0
 800c48a:	4618      	mov	r0, r3
 800c48c:	f000 f9ce 	bl	800c82c <RCCEx_PLLSAI1_Config>
 800c490:	4603      	mov	r3, r0
 800c492:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800c494:	e003      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c496:	2301      	movs	r3, #1
 800c498:	74fb      	strb	r3, [r7, #19]
      break;
 800c49a:	e000      	b.n	800c49e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800c49c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c49e:	7cfb      	ldrb	r3, [r7, #19]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d10b      	bne.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c4a4:	4b51      	ldr	r3, [pc, #324]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c4aa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c4b2:	494e      	ldr	r1, [pc, #312]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4b4:	4313      	orrs	r3, r2
 800c4b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800c4ba:	e001      	b.n	800c4c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c4bc:	7cfb      	ldrb	r3, [r7, #19]
 800c4be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	f000 809e 	beq.w	800c60a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c4d2:	4b46      	ldr	r3, [pc, #280]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d101      	bne.n	800c4e2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e000      	b.n	800c4e4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00d      	beq.n	800c504 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4e8:	4b40      	ldr	r3, [pc, #256]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4ec:	4a3f      	ldr	r2, [pc, #252]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c4f2:	6593      	str	r3, [r2, #88]	@ 0x58
 800c4f4:	4b3d      	ldr	r3, [pc, #244]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c4f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c4f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c4fc:	60bb      	str	r3, [r7, #8]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c500:	2301      	movs	r3, #1
 800c502:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c504:	4b3a      	ldr	r3, [pc, #232]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4a39      	ldr	r2, [pc, #228]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c50a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c50e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c510:	f7fc fe34 	bl	800917c <HAL_GetTick>
 800c514:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c516:	e009      	b.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c518:	f7fc fe30 	bl	800917c <HAL_GetTick>
 800c51c:	4602      	mov	r2, r0
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b02      	cmp	r3, #2
 800c524:	d902      	bls.n	800c52c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	74fb      	strb	r3, [r7, #19]
        break;
 800c52a:	e005      	b.n	800c538 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800c52c:	4b30      	ldr	r3, [pc, #192]	@ (800c5f0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c534:	2b00      	cmp	r3, #0
 800c536:	d0ef      	beq.n	800c518 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800c538:	7cfb      	ldrb	r3, [r7, #19]
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d15a      	bne.n	800c5f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c53e:	4b2b      	ldr	r3, [pc, #172]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c540:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c548:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c54a:	697b      	ldr	r3, [r7, #20]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d01e      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c554:	697a      	ldr	r2, [r7, #20]
 800c556:	429a      	cmp	r2, r3
 800c558:	d019      	beq.n	800c58e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c55a:	4b24      	ldr	r3, [pc, #144]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c560:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c564:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c566:	4b21      	ldr	r3, [pc, #132]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c568:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c56c:	4a1f      	ldr	r2, [pc, #124]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c56e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c572:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c576:	4b1d      	ldr	r3, [pc, #116]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c57c:	4a1b      	ldr	r2, [pc, #108]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c57e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c582:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c586:	4a19      	ldr	r2, [pc, #100]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c58e:	697b      	ldr	r3, [r7, #20]
 800c590:	f003 0301 	and.w	r3, r3, #1
 800c594:	2b00      	cmp	r3, #0
 800c596:	d016      	beq.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c598:	f7fc fdf0 	bl	800917c <HAL_GetTick>
 800c59c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c59e:	e00b      	b.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c5a0:	f7fc fdec 	bl	800917c <HAL_GetTick>
 800c5a4:	4602      	mov	r2, r0
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	1ad3      	subs	r3, r2, r3
 800c5aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c5ae:	4293      	cmp	r3, r2
 800c5b0:	d902      	bls.n	800c5b8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800c5b2:	2303      	movs	r3, #3
 800c5b4:	74fb      	strb	r3, [r7, #19]
            break;
 800c5b6:	e006      	b.n	800c5c6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c5b8:	4b0c      	ldr	r3, [pc, #48]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c5ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5be:	f003 0302 	and.w	r3, r3, #2
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0ec      	beq.n	800c5a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800c5c6:	7cfb      	ldrb	r3, [r7, #19]
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d10b      	bne.n	800c5e4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5cc:	4b07      	ldr	r3, [pc, #28]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c5ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c5d2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c5da:	4904      	ldr	r1, [pc, #16]	@ (800c5ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800c5dc:	4313      	orrs	r3, r2
 800c5de:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c5e2:	e009      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c5e4:	7cfb      	ldrb	r3, [r7, #19]
 800c5e6:	74bb      	strb	r3, [r7, #18]
 800c5e8:	e006      	b.n	800c5f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800c5ea:	bf00      	nop
 800c5ec:	40021000 	.word	0x40021000
 800c5f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c5f4:	7cfb      	ldrb	r3, [r7, #19]
 800c5f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c5f8:	7c7b      	ldrb	r3, [r7, #17]
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d105      	bne.n	800c60a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c5fe:	4b8a      	ldr	r3, [pc, #552]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c600:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c602:	4a89      	ldr	r2, [pc, #548]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c604:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c608:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f003 0301 	and.w	r3, r3, #1
 800c612:	2b00      	cmp	r3, #0
 800c614:	d00a      	beq.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c616:	4b84      	ldr	r3, [pc, #528]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c618:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c61c:	f023 0203 	bic.w	r2, r3, #3
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	4980      	ldr	r1, [pc, #512]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c626:	4313      	orrs	r3, r2
 800c628:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	f003 0302 	and.w	r3, r3, #2
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00a      	beq.n	800c64e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c638:	4b7b      	ldr	r3, [pc, #492]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c63a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c63e:	f023 020c 	bic.w	r2, r3, #12
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c646:	4978      	ldr	r1, [pc, #480]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c648:	4313      	orrs	r3, r2
 800c64a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	f003 0320 	and.w	r3, r3, #32
 800c656:	2b00      	cmp	r3, #0
 800c658:	d00a      	beq.n	800c670 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c65a:	4b73      	ldr	r3, [pc, #460]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c65c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c660:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c668:	496f      	ldr	r1, [pc, #444]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c66a:	4313      	orrs	r3, r2
 800c66c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d00a      	beq.n	800c692 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c67c:	4b6a      	ldr	r3, [pc, #424]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c67e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c682:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c68a:	4967      	ldr	r1, [pc, #412]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c68c:	4313      	orrs	r3, r2
 800c68e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00a      	beq.n	800c6b4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c69e:	4b62      	ldr	r3, [pc, #392]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6a4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c6ac:	495e      	ldr	r1, [pc, #376]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6ae:	4313      	orrs	r3, r2
 800c6b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d00a      	beq.n	800c6d6 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6c0:	4b59      	ldr	r3, [pc, #356]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6c6:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6ce:	4956      	ldr	r1, [pc, #344]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6d0:	4313      	orrs	r3, r2
 800c6d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d00a      	beq.n	800c6f8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6e2:	4b51      	ldr	r3, [pc, #324]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c6e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6f0:	494d      	ldr	r1, [pc, #308]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c6f2:	4313      	orrs	r3, r2
 800c6f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c700:	2b00      	cmp	r3, #0
 800c702:	d028      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c704:	4b48      	ldr	r3, [pc, #288]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c70a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c712:	4945      	ldr	r1, [pc, #276]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c714:	4313      	orrs	r3, r2
 800c716:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c71e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c722:	d106      	bne.n	800c732 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c724:	4b40      	ldr	r3, [pc, #256]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c726:	68db      	ldr	r3, [r3, #12]
 800c728:	4a3f      	ldr	r2, [pc, #252]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c72a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c72e:	60d3      	str	r3, [r2, #12]
 800c730:	e011      	b.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c736:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c73a:	d10c      	bne.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	3304      	adds	r3, #4
 800c740:	2101      	movs	r1, #1
 800c742:	4618      	mov	r0, r3
 800c744:	f000 f872 	bl	800c82c <RCCEx_PLLSAI1_Config>
 800c748:	4603      	mov	r3, r0
 800c74a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800c74c:	7cfb      	ldrb	r3, [r7, #19]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d001      	beq.n	800c756 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800c752:	7cfb      	ldrb	r3, [r7, #19]
 800c754:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d028      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c762:	4b31      	ldr	r3, [pc, #196]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c768:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c770:	492d      	ldr	r1, [pc, #180]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c772:	4313      	orrs	r3, r2
 800c774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c77c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c780:	d106      	bne.n	800c790 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c782:	4b29      	ldr	r3, [pc, #164]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c784:	68db      	ldr	r3, [r3, #12]
 800c786:	4a28      	ldr	r2, [pc, #160]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c788:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c78c:	60d3      	str	r3, [r2, #12]
 800c78e:	e011      	b.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c794:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800c798:	d10c      	bne.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	3304      	adds	r3, #4
 800c79e:	2101      	movs	r1, #1
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	f000 f843 	bl	800c82c <RCCEx_PLLSAI1_Config>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c7aa:	7cfb      	ldrb	r3, [r7, #19]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d001      	beq.n	800c7b4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800c7b0:	7cfb      	ldrb	r3, [r7, #19]
 800c7b2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681b      	ldr	r3, [r3, #0]
 800c7b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d01c      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c7c0:	4b19      	ldr	r3, [pc, #100]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c7c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c7c6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7ce:	4916      	ldr	r1, [pc, #88]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c7da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c7de:	d10c      	bne.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	3304      	adds	r3, #4
 800c7e4:	2102      	movs	r1, #2
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	f000 f820 	bl	800c82c <RCCEx_PLLSAI1_Config>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800c7f0:	7cfb      	ldrb	r3, [r7, #19]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d001      	beq.n	800c7fa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800c7f6:	7cfb      	ldrb	r3, [r7, #19]
 800c7f8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	681b      	ldr	r3, [r3, #0]
 800c7fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c802:	2b00      	cmp	r3, #0
 800c804:	d00a      	beq.n	800c81c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c806:	4b08      	ldr	r3, [pc, #32]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c808:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c80c:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c814:	4904      	ldr	r1, [pc, #16]	@ (800c828 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800c816:	4313      	orrs	r3, r2
 800c818:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800c81c:	7cbb      	ldrb	r3, [r7, #18]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}
 800c826:	bf00      	nop
 800c828:	40021000 	.word	0x40021000

0800c82c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b084      	sub	sp, #16
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
 800c834:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800c83a:	4b74      	ldr	r3, [pc, #464]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c83c:	68db      	ldr	r3, [r3, #12]
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b00      	cmp	r3, #0
 800c844:	d018      	beq.n	800c878 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800c846:	4b71      	ldr	r3, [pc, #452]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c848:	68db      	ldr	r3, [r3, #12]
 800c84a:	f003 0203 	and.w	r2, r3, #3
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	429a      	cmp	r2, r3
 800c854:	d10d      	bne.n	800c872 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
       ||
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d009      	beq.n	800c872 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800c85e:	4b6b      	ldr	r3, [pc, #428]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c860:	68db      	ldr	r3, [r3, #12]
 800c862:	091b      	lsrs	r3, r3, #4
 800c864:	f003 0307 	and.w	r3, r3, #7
 800c868:	1c5a      	adds	r2, r3, #1
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	685b      	ldr	r3, [r3, #4]
       ||
 800c86e:	429a      	cmp	r2, r3
 800c870:	d047      	beq.n	800c902 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800c872:	2301      	movs	r3, #1
 800c874:	73fb      	strb	r3, [r7, #15]
 800c876:	e044      	b.n	800c902 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	2b03      	cmp	r3, #3
 800c87e:	d018      	beq.n	800c8b2 <RCCEx_PLLSAI1_Config+0x86>
 800c880:	2b03      	cmp	r3, #3
 800c882:	d825      	bhi.n	800c8d0 <RCCEx_PLLSAI1_Config+0xa4>
 800c884:	2b01      	cmp	r3, #1
 800c886:	d002      	beq.n	800c88e <RCCEx_PLLSAI1_Config+0x62>
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d009      	beq.n	800c8a0 <RCCEx_PLLSAI1_Config+0x74>
 800c88c:	e020      	b.n	800c8d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800c88e:	4b5f      	ldr	r3, [pc, #380]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f003 0302 	and.w	r3, r3, #2
 800c896:	2b00      	cmp	r3, #0
 800c898:	d11d      	bne.n	800c8d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800c89a:	2301      	movs	r3, #1
 800c89c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c89e:	e01a      	b.n	800c8d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800c8a0:	4b5a      	ldr	r3, [pc, #360]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d116      	bne.n	800c8da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800c8ac:	2301      	movs	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800c8b0:	e013      	b.n	800c8da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800c8b2:	4b56      	ldr	r3, [pc, #344]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d10f      	bne.n	800c8de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800c8be:	4b53      	ldr	r3, [pc, #332]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d109      	bne.n	800c8de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800c8ce:	e006      	b.n	800c8de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800c8d0:	2301      	movs	r3, #1
 800c8d2:	73fb      	strb	r3, [r7, #15]
      break;
 800c8d4:	e004      	b.n	800c8e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c8d6:	bf00      	nop
 800c8d8:	e002      	b.n	800c8e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c8da:	bf00      	nop
 800c8dc:	e000      	b.n	800c8e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800c8de:	bf00      	nop
    }

    if(status == HAL_OK)
 800c8e0:	7bfb      	ldrb	r3, [r7, #15]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10d      	bne.n	800c902 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800c8e6:	4b49      	ldr	r3, [pc, #292]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6819      	ldr	r1, [r3, #0]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	685b      	ldr	r3, [r3, #4]
 800c8f6:	3b01      	subs	r3, #1
 800c8f8:	011b      	lsls	r3, r3, #4
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	4943      	ldr	r1, [pc, #268]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c8fe:	4313      	orrs	r3, r2
 800c900:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800c902:	7bfb      	ldrb	r3, [r7, #15]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d17c      	bne.n	800ca02 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800c908:	4b40      	ldr	r3, [pc, #256]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	4a3f      	ldr	r2, [pc, #252]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c90e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800c912:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c914:	f7fc fc32 	bl	800917c <HAL_GetTick>
 800c918:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c91a:	e009      	b.n	800c930 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c91c:	f7fc fc2e 	bl	800917c <HAL_GetTick>
 800c920:	4602      	mov	r2, r0
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	2b02      	cmp	r3, #2
 800c928:	d902      	bls.n	800c930 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800c92a:	2303      	movs	r3, #3
 800c92c:	73fb      	strb	r3, [r7, #15]
        break;
 800c92e:	e005      	b.n	800c93c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800c930:	4b36      	ldr	r3, [pc, #216]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d1ef      	bne.n	800c91c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800c93c:	7bfb      	ldrb	r3, [r7, #15]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d15f      	bne.n	800ca02 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800c942:	683b      	ldr	r3, [r7, #0]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d110      	bne.n	800c96a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c948:	4b30      	ldr	r3, [pc, #192]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c94a:	691b      	ldr	r3, [r3, #16]
 800c94c:	f023 4378 	bic.w	r3, r3, #4160749568	@ 0xf8000000
 800c950:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c954:	687a      	ldr	r2, [r7, #4]
 800c956:	6892      	ldr	r2, [r2, #8]
 800c958:	0211      	lsls	r1, r2, #8
 800c95a:	687a      	ldr	r2, [r7, #4]
 800c95c:	68d2      	ldr	r2, [r2, #12]
 800c95e:	06d2      	lsls	r2, r2, #27
 800c960:	430a      	orrs	r2, r1
 800c962:	492a      	ldr	r1, [pc, #168]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c964:	4313      	orrs	r3, r2
 800c966:	610b      	str	r3, [r1, #16]
 800c968:	e027      	b.n	800c9ba <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d112      	bne.n	800c996 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c970:	4b26      	ldr	r3, [pc, #152]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c972:	691b      	ldr	r3, [r3, #16]
 800c974:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800c978:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c97c:	687a      	ldr	r2, [r7, #4]
 800c97e:	6892      	ldr	r2, [r2, #8]
 800c980:	0211      	lsls	r1, r2, #8
 800c982:	687a      	ldr	r2, [r7, #4]
 800c984:	6912      	ldr	r2, [r2, #16]
 800c986:	0852      	lsrs	r2, r2, #1
 800c988:	3a01      	subs	r2, #1
 800c98a:	0552      	lsls	r2, r2, #21
 800c98c:	430a      	orrs	r2, r1
 800c98e:	491f      	ldr	r1, [pc, #124]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c990:	4313      	orrs	r3, r2
 800c992:	610b      	str	r3, [r1, #16]
 800c994:	e011      	b.n	800c9ba <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800c996:	4b1d      	ldr	r3, [pc, #116]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800c99e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800c9a2:	687a      	ldr	r2, [r7, #4]
 800c9a4:	6892      	ldr	r2, [r2, #8]
 800c9a6:	0211      	lsls	r1, r2, #8
 800c9a8:	687a      	ldr	r2, [r7, #4]
 800c9aa:	6952      	ldr	r2, [r2, #20]
 800c9ac:	0852      	lsrs	r2, r2, #1
 800c9ae:	3a01      	subs	r2, #1
 800c9b0:	0652      	lsls	r2, r2, #25
 800c9b2:	430a      	orrs	r2, r1
 800c9b4:	4915      	ldr	r1, [pc, #84]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9b6:	4313      	orrs	r3, r2
 800c9b8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800c9ba:	4b14      	ldr	r3, [pc, #80]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4a13      	ldr	r2, [pc, #76]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800c9c4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9c6:	f7fc fbd9 	bl	800917c <HAL_GetTick>
 800c9ca:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c9cc:	e009      	b.n	800c9e2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800c9ce:	f7fc fbd5 	bl	800917c <HAL_GetTick>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	68bb      	ldr	r3, [r7, #8]
 800c9d6:	1ad3      	subs	r3, r2, r3
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	d902      	bls.n	800c9e2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800c9dc:	2303      	movs	r3, #3
 800c9de:	73fb      	strb	r3, [r7, #15]
          break;
 800c9e0:	e005      	b.n	800c9ee <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800c9e2:	4b0a      	ldr	r3, [pc, #40]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d0ef      	beq.n	800c9ce <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800c9ee:	7bfb      	ldrb	r3, [r7, #15]
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d106      	bne.n	800ca02 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800c9f4:	4b05      	ldr	r3, [pc, #20]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9f6:	691a      	ldr	r2, [r3, #16]
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	699b      	ldr	r3, [r3, #24]
 800c9fc:	4903      	ldr	r1, [pc, #12]	@ (800ca0c <RCCEx_PLLSAI1_Config+0x1e0>)
 800c9fe:	4313      	orrs	r3, r2
 800ca00:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800ca02:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca04:	4618      	mov	r0, r3
 800ca06:	3710      	adds	r7, #16
 800ca08:	46bd      	mov	sp, r7
 800ca0a:	bd80      	pop	{r7, pc}
 800ca0c:	40021000 	.word	0x40021000

0800ca10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b084      	sub	sp, #16
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d101      	bne.n	800ca22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca1e:	2301      	movs	r3, #1
 800ca20:	e095      	b.n	800cb4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d108      	bne.n	800ca3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ca32:	d009      	beq.n	800ca48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	2200      	movs	r2, #0
 800ca38:	61da      	str	r2, [r3, #28]
 800ca3a:	e005      	b.n	800ca48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2200      	movs	r2, #0
 800ca40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	2200      	movs	r2, #0
 800ca46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	2200      	movs	r2, #0
 800ca4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d106      	bne.n	800ca68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f7f9 fce8 	bl	8006438 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	681a      	ldr	r2, [r3, #0]
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ca7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	68db      	ldr	r3, [r3, #12]
 800ca84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800ca88:	d902      	bls.n	800ca90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60fb      	str	r3, [r7, #12]
 800ca8e:	e002      	b.n	800ca96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800ca90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800ca94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800ca9e:	d007      	beq.n	800cab0 <HAL_SPI_Init+0xa0>
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	68db      	ldr	r3, [r3, #12]
 800caa4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800caa8:	d002      	beq.n	800cab0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	685b      	ldr	r3, [r3, #4]
 800cab4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	689b      	ldr	r3, [r3, #8]
 800cabc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800cac0:	431a      	orrs	r2, r3
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	691b      	ldr	r3, [r3, #16]
 800cac6:	f003 0302 	and.w	r3, r3, #2
 800caca:	431a      	orrs	r2, r3
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	695b      	ldr	r3, [r3, #20]
 800cad0:	f003 0301 	and.w	r3, r3, #1
 800cad4:	431a      	orrs	r2, r3
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	699b      	ldr	r3, [r3, #24]
 800cada:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cade:	431a      	orrs	r2, r3
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	69db      	ldr	r3, [r3, #28]
 800cae4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cae8:	431a      	orrs	r2, r3
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800caf2:	ea42 0103 	orr.w	r1, r2, r3
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cafa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	0c1b      	lsrs	r3, r3, #16
 800cb0c:	f003 0204 	and.w	r2, r3, #4
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb14:	f003 0310 	and.w	r3, r3, #16
 800cb18:	431a      	orrs	r2, r3
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cb1e:	f003 0308 	and.w	r3, r3, #8
 800cb22:	431a      	orrs	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	68db      	ldr	r3, [r3, #12]
 800cb28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800cb2c:	ea42 0103 	orr.w	r1, r2, r3
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	430a      	orrs	r2, r1
 800cb3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2200      	movs	r2, #0
 800cb42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800cb4c:	2300      	movs	r3, #0
}
 800cb4e:	4618      	mov	r0, r3
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}

0800cb56 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800cb56:	b580      	push	{r7, lr}
 800cb58:	b08a      	sub	sp, #40	@ 0x28
 800cb5a:	af00      	add	r7, sp, #0
 800cb5c:	60f8      	str	r0, [r7, #12]
 800cb5e:	60b9      	str	r1, [r7, #8]
 800cb60:	607a      	str	r2, [r7, #4]
 800cb62:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800cb64:	2301      	movs	r3, #1
 800cb66:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800cb68:	f7fc fb08 	bl	800917c <HAL_GetTick>
 800cb6c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cb74:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	685b      	ldr	r3, [r3, #4]
 800cb7a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800cb7c:	887b      	ldrh	r3, [r7, #2]
 800cb7e:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 800cb80:	887b      	ldrh	r3, [r7, #2]
 800cb82:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800cb84:	7ffb      	ldrb	r3, [r7, #31]
 800cb86:	2b01      	cmp	r3, #1
 800cb88:	d00c      	beq.n	800cba4 <HAL_SPI_TransmitReceive+0x4e>
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800cb90:	d106      	bne.n	800cba0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800cb92:	68fb      	ldr	r3, [r7, #12]
 800cb94:	689b      	ldr	r3, [r3, #8]
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d102      	bne.n	800cba0 <HAL_SPI_TransmitReceive+0x4a>
 800cb9a:	7ffb      	ldrb	r3, [r7, #31]
 800cb9c:	2b04      	cmp	r3, #4
 800cb9e:	d001      	beq.n	800cba4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800cba0:	2302      	movs	r3, #2
 800cba2:	e1f3      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800cba4:	68bb      	ldr	r3, [r7, #8]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d005      	beq.n	800cbb6 <HAL_SPI_TransmitReceive+0x60>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d002      	beq.n	800cbb6 <HAL_SPI_TransmitReceive+0x60>
 800cbb0:	887b      	ldrh	r3, [r7, #2]
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d101      	bne.n	800cbba <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 800cbb6:	2301      	movs	r3, #1
 800cbb8:	e1e8      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d101      	bne.n	800cbc8 <HAL_SPI_TransmitReceive+0x72>
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	e1e1      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2201      	movs	r2, #1
 800cbcc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800cbd6:	b2db      	uxtb	r3, r3
 800cbd8:	2b04      	cmp	r3, #4
 800cbda:	d003      	beq.n	800cbe4 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2205      	movs	r2, #5
 800cbe0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	687a      	ldr	r2, [r7, #4]
 800cbee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	887a      	ldrh	r2, [r7, #2]
 800cbf4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	887a      	ldrh	r2, [r7, #2]
 800cbfc:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	68ba      	ldr	r2, [r7, #8]
 800cc04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	887a      	ldrh	r2, [r7, #2]
 800cc0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	887a      	ldrh	r2, [r7, #2]
 800cc10:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800cc12:	68fb      	ldr	r3, [r7, #12]
 800cc14:	2200      	movs	r2, #0
 800cc16:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	2200      	movs	r2, #0
 800cc1c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	68db      	ldr	r3, [r3, #12]
 800cc22:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cc26:	d802      	bhi.n	800cc2e <HAL_SPI_TransmitReceive+0xd8>
 800cc28:	8abb      	ldrh	r3, [r7, #20]
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d908      	bls.n	800cc40 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	685a      	ldr	r2, [r3, #4]
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800cc3c:	605a      	str	r2, [r3, #4]
 800cc3e:	e007      	b.n	800cc50 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	685a      	ldr	r2, [r3, #4]
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800cc4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cc5a:	2b40      	cmp	r3, #64	@ 0x40
 800cc5c:	d007      	beq.n	800cc6e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800cc5e:	68fb      	ldr	r3, [r7, #12]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	68db      	ldr	r3, [r3, #12]
 800cc72:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800cc76:	f240 8083 	bls.w	800cd80 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d002      	beq.n	800cc88 <HAL_SPI_TransmitReceive+0x132>
 800cc82:	8afb      	ldrh	r3, [r7, #22]
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	d16f      	bne.n	800cd68 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc8c:	881a      	ldrh	r2, [r3, #0]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cc98:	1c9a      	adds	r2, r3, #2
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cca2:	b29b      	uxth	r3, r3
 800cca4:	3b01      	subs	r3, #1
 800cca6:	b29a      	uxth	r2, r3
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ccac:	e05c      	b.n	800cd68 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f003 0302 	and.w	r3, r3, #2
 800ccb8:	2b02      	cmp	r3, #2
 800ccba:	d11b      	bne.n	800ccf4 <HAL_SPI_TransmitReceive+0x19e>
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d016      	beq.n	800ccf4 <HAL_SPI_TransmitReceive+0x19e>
 800ccc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ccc8:	2b01      	cmp	r3, #1
 800ccca:	d113      	bne.n	800ccf4 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccd0:	881a      	ldrh	r2, [r3, #0]
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ccdc:	1c9a      	adds	r2, r3, #2
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cce6:	b29b      	uxth	r3, r3
 800cce8:	3b01      	subs	r3, #1
 800ccea:	b29a      	uxth	r2, r3
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	689b      	ldr	r3, [r3, #8]
 800ccfa:	f003 0301 	and.w	r3, r3, #1
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	d11c      	bne.n	800cd3c <HAL_SPI_TransmitReceive+0x1e6>
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d016      	beq.n	800cd3c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	68da      	ldr	r2, [r3, #12]
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd18:	b292      	uxth	r2, r2
 800cd1a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cd20:	1c9a      	adds	r2, r3, #2
 800cd22:	68fb      	ldr	r3, [r7, #12]
 800cd24:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd2c:	b29b      	uxth	r3, r3
 800cd2e:	3b01      	subs	r3, #1
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cd38:	2301      	movs	r3, #1
 800cd3a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800cd3c:	f7fc fa1e 	bl	800917c <HAL_GetTick>
 800cd40:	4602      	mov	r2, r0
 800cd42:	6a3b      	ldr	r3, [r7, #32]
 800cd44:	1ad3      	subs	r3, r2, r3
 800cd46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d80d      	bhi.n	800cd68 <HAL_SPI_TransmitReceive+0x212>
 800cd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd52:	d009      	beq.n	800cd68 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cd54:	68fb      	ldr	r3, [r7, #12]
 800cd56:	2201      	movs	r2, #1
 800cd58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	2200      	movs	r2, #0
 800cd60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800cd64:	2303      	movs	r3, #3
 800cd66:	e111      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd6c:	b29b      	uxth	r3, r3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d19d      	bne.n	800ccae <HAL_SPI_TransmitReceive+0x158>
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cd78:	b29b      	uxth	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d197      	bne.n	800ccae <HAL_SPI_TransmitReceive+0x158>
 800cd7e:	e0e5      	b.n	800cf4c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	685b      	ldr	r3, [r3, #4]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d003      	beq.n	800cd90 <HAL_SPI_TransmitReceive+0x23a>
 800cd88:	8afb      	ldrh	r3, [r7, #22]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	f040 80d1 	bne.w	800cf32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cd94:	b29b      	uxth	r3, r3
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	d912      	bls.n	800cdc0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cd9e:	881a      	ldrh	r2, [r3, #0]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800cda6:	68fb      	ldr	r3, [r7, #12]
 800cda8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdaa:	1c9a      	adds	r2, r3, #2
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 800cdb0:	68fb      	ldr	r3, [r7, #12]
 800cdb2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cdb4:	b29b      	uxth	r3, r3
 800cdb6:	3b02      	subs	r3, #2
 800cdb8:	b29a      	uxth	r2, r3
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800cdbe:	e0b8      	b.n	800cf32 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	330c      	adds	r3, #12
 800cdca:	7812      	ldrb	r2, [r2, #0]
 800cdcc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800cdce:	68fb      	ldr	r3, [r7, #12]
 800cdd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd2:	1c5a      	adds	r2, r3, #1
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	3b01      	subs	r3, #1
 800cde0:	b29a      	uxth	r2, r3
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cde6:	e0a4      	b.n	800cf32 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	681b      	ldr	r3, [r3, #0]
 800cdec:	689b      	ldr	r3, [r3, #8]
 800cdee:	f003 0302 	and.w	r3, r3, #2
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d134      	bne.n	800ce60 <HAL_SPI_TransmitReceive+0x30a>
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	2b00      	cmp	r3, #0
 800cdfe:	d02f      	beq.n	800ce60 <HAL_SPI_TransmitReceive+0x30a>
 800ce00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce02:	2b01      	cmp	r3, #1
 800ce04:	d12c      	bne.n	800ce60 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	2b01      	cmp	r3, #1
 800ce0e:	d912      	bls.n	800ce36 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce14:	881a      	ldrh	r2, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce20:	1c9a      	adds	r2, r3, #2
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	3b02      	subs	r3, #2
 800ce2e:	b29a      	uxth	r2, r3
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800ce34:	e012      	b.n	800ce5c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	330c      	adds	r3, #12
 800ce40:	7812      	ldrb	r2, [r2, #0]
 800ce42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce48:	1c5a      	adds	r2, r3, #1
 800ce4a:	68fb      	ldr	r3, [r7, #12]
 800ce4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800ce52:	b29b      	uxth	r3, r3
 800ce54:	3b01      	subs	r3, #1
 800ce56:	b29a      	uxth	r2, r3
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	f003 0301 	and.w	r3, r3, #1
 800ce6a:	2b01      	cmp	r3, #1
 800ce6c:	d148      	bne.n	800cf00 <HAL_SPI_TransmitReceive+0x3aa>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce74:	b29b      	uxth	r3, r3
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d042      	beq.n	800cf00 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ce80:	b29b      	uxth	r3, r3
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d923      	bls.n	800cece <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	68da      	ldr	r2, [r3, #12]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce90:	b292      	uxth	r2, r2
 800ce92:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ce98:	1c9a      	adds	r2, r3, #2
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cea4:	b29b      	uxth	r3, r3
 800cea6:	3b02      	subs	r3, #2
 800cea8:	b29a      	uxth	r2, r3
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	2b01      	cmp	r3, #1
 800ceba:	d81f      	bhi.n	800cefc <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	685a      	ldr	r2, [r3, #4]
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ceca:	605a      	str	r2, [r3, #4]
 800cecc:	e016      	b.n	800cefc <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	f103 020c 	add.w	r2, r3, #12
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ceda:	7812      	ldrb	r2, [r2, #0]
 800cedc:	b2d2      	uxtb	r2, r2
 800cede:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cee4:	1c5a      	adds	r2, r3, #1
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800ceea:	68fb      	ldr	r3, [r7, #12]
 800ceec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cef0:	b29b      	uxth	r3, r3
 800cef2:	3b01      	subs	r3, #1
 800cef4:	b29a      	uxth	r2, r3
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800cefc:	2301      	movs	r3, #1
 800cefe:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800cf00:	f7fc f93c 	bl	800917c <HAL_GetTick>
 800cf04:	4602      	mov	r2, r0
 800cf06:	6a3b      	ldr	r3, [r7, #32]
 800cf08:	1ad3      	subs	r3, r2, r3
 800cf0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cf0c:	429a      	cmp	r2, r3
 800cf0e:	d803      	bhi.n	800cf18 <HAL_SPI_TransmitReceive+0x3c2>
 800cf10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf12:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf16:	d102      	bne.n	800cf1e <HAL_SPI_TransmitReceive+0x3c8>
 800cf18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d109      	bne.n	800cf32 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	2201      	movs	r2, #1
 800cf22:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	2200      	movs	r2, #0
 800cf2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800cf2e:	2303      	movs	r3, #3
 800cf30:	e02c      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800cf36:	b29b      	uxth	r3, r3
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f47f af55 	bne.w	800cde8 <HAL_SPI_TransmitReceive+0x292>
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800cf44:	b29b      	uxth	r3, r3
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	f47f af4e 	bne.w	800cde8 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800cf4c:	6a3a      	ldr	r2, [r7, #32]
 800cf4e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800cf50:	68f8      	ldr	r0, [r7, #12]
 800cf52:	f000 f93d 	bl	800d1d0 <SPI_EndRxTxTransaction>
 800cf56:	4603      	mov	r3, r0
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d008      	beq.n	800cf6e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2220      	movs	r2, #32
 800cf60:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	e00e      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	2201      	movs	r2, #1
 800cf72:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2200      	movs	r2, #0
 800cf7a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d001      	beq.n	800cf8a <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 800cf86:	2301      	movs	r3, #1
 800cf88:	e000      	b.n	800cf8c <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 800cf8a:	2300      	movs	r3, #0
  }
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3728      	adds	r7, #40	@ 0x28
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	60f8      	str	r0, [r7, #12]
 800cf9c:	60b9      	str	r1, [r7, #8]
 800cf9e:	603b      	str	r3, [r7, #0]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800cfa4:	f7fc f8ea 	bl	800917c <HAL_GetTick>
 800cfa8:	4602      	mov	r2, r0
 800cfaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cfac:	1a9b      	subs	r3, r3, r2
 800cfae:	683a      	ldr	r2, [r7, #0]
 800cfb0:	4413      	add	r3, r2
 800cfb2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800cfb4:	f7fc f8e2 	bl	800917c <HAL_GetTick>
 800cfb8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800cfba:	4b39      	ldr	r3, [pc, #228]	@ (800d0a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	015b      	lsls	r3, r3, #5
 800cfc0:	0d1b      	lsrs	r3, r3, #20
 800cfc2:	69fa      	ldr	r2, [r7, #28]
 800cfc4:	fb02 f303 	mul.w	r3, r2, r3
 800cfc8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800cfca:	e054      	b.n	800d076 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cfd2:	d050      	beq.n	800d076 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800cfd4:	f7fc f8d2 	bl	800917c <HAL_GetTick>
 800cfd8:	4602      	mov	r2, r0
 800cfda:	69bb      	ldr	r3, [r7, #24]
 800cfdc:	1ad3      	subs	r3, r2, r3
 800cfde:	69fa      	ldr	r2, [r7, #28]
 800cfe0:	429a      	cmp	r2, r3
 800cfe2:	d902      	bls.n	800cfea <SPI_WaitFlagStateUntilTimeout+0x56>
 800cfe4:	69fb      	ldr	r3, [r7, #28]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d13d      	bne.n	800d066 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800cff8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	685b      	ldr	r3, [r3, #4]
 800cffe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d002:	d111      	bne.n	800d028 <SPI_WaitFlagStateUntilTimeout+0x94>
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	689b      	ldr	r3, [r3, #8]
 800d008:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d00c:	d004      	beq.n	800d018 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d00e:	68fb      	ldr	r3, [r7, #12]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d016:	d107      	bne.n	800d028 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	681a      	ldr	r2, [r3, #0]
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d026:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d02c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d030:	d10f      	bne.n	800d052 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	681a      	ldr	r2, [r3, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d040:	601a      	str	r2, [r3, #0]
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	681a      	ldr	r2, [r3, #0]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d050:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	2201      	movs	r2, #1
 800d056:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	2200      	movs	r2, #0
 800d05e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d062:	2303      	movs	r3, #3
 800d064:	e017      	b.n	800d096 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800d06c:	2300      	movs	r3, #0
 800d06e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	3b01      	subs	r3, #1
 800d074:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	689a      	ldr	r2, [r3, #8]
 800d07c:	68bb      	ldr	r3, [r7, #8]
 800d07e:	4013      	ands	r3, r2
 800d080:	68ba      	ldr	r2, [r7, #8]
 800d082:	429a      	cmp	r2, r3
 800d084:	bf0c      	ite	eq
 800d086:	2301      	moveq	r3, #1
 800d088:	2300      	movne	r3, #0
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	461a      	mov	r2, r3
 800d08e:	79fb      	ldrb	r3, [r7, #7]
 800d090:	429a      	cmp	r2, r3
 800d092:	d19b      	bne.n	800cfcc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800d094:	2300      	movs	r3, #0
}
 800d096:	4618      	mov	r0, r3
 800d098:	3720      	adds	r7, #32
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000048 	.word	0x20000048

0800d0a4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b08a      	sub	sp, #40	@ 0x28
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
 800d0b0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800d0b6:	f7fc f861 	bl	800917c <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d0be:	1a9b      	subs	r3, r3, r2
 800d0c0:	683a      	ldr	r2, [r7, #0]
 800d0c2:	4413      	add	r3, r2
 800d0c4:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 800d0c6:	f7fc f859 	bl	800917c <HAL_GetTick>
 800d0ca:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	330c      	adds	r3, #12
 800d0d2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800d0d4:	4b3d      	ldr	r3, [pc, #244]	@ (800d1cc <SPI_WaitFifoStateUntilTimeout+0x128>)
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	4613      	mov	r3, r2
 800d0da:	009b      	lsls	r3, r3, #2
 800d0dc:	4413      	add	r3, r2
 800d0de:	00da      	lsls	r2, r3, #3
 800d0e0:	1ad3      	subs	r3, r2, r3
 800d0e2:	0d1b      	lsrs	r3, r3, #20
 800d0e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d0e6:	fb02 f303 	mul.w	r3, r2, r3
 800d0ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800d0ec:	e060      	b.n	800d1b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800d0f4:	d107      	bne.n	800d106 <SPI_WaitFifoStateUntilTimeout+0x62>
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d104      	bne.n	800d106 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800d0fc:	69fb      	ldr	r3, [r7, #28]
 800d0fe:	781b      	ldrb	r3, [r3, #0]
 800d100:	b2db      	uxtb	r3, r3
 800d102:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800d104:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d10c:	d050      	beq.n	800d1b0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800d10e:	f7fc f835 	bl	800917c <HAL_GetTick>
 800d112:	4602      	mov	r2, r0
 800d114:	6a3b      	ldr	r3, [r7, #32]
 800d116:	1ad3      	subs	r3, r2, r3
 800d118:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d902      	bls.n	800d124 <SPI_WaitFifoStateUntilTimeout+0x80>
 800d11e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d120:	2b00      	cmp	r3, #0
 800d122:	d13d      	bne.n	800d1a0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	685a      	ldr	r2, [r3, #4]
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800d132:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800d13c:	d111      	bne.n	800d162 <SPI_WaitFifoStateUntilTimeout+0xbe>
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	689b      	ldr	r3, [r3, #8]
 800d142:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d146:	d004      	beq.n	800d152 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	689b      	ldr	r3, [r3, #8]
 800d14c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d150:	d107      	bne.n	800d162 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800d152:	68fb      	ldr	r3, [r7, #12]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	681a      	ldr	r2, [r3, #0]
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800d160:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d166:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d16a:	d10f      	bne.n	800d18c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d17a:	601a      	str	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	681a      	ldr	r2, [r3, #0]
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800d18a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	2201      	movs	r2, #1
 800d190:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2200      	movs	r2, #0
 800d198:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800d19c:	2303      	movs	r3, #3
 800d19e:	e010      	b.n	800d1c2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800d1a0:	69bb      	ldr	r3, [r7, #24]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d101      	bne.n	800d1aa <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800d1aa:	69bb      	ldr	r3, [r7, #24]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	689a      	ldr	r2, [r3, #8]
 800d1b6:	68bb      	ldr	r3, [r7, #8]
 800d1b8:	4013      	ands	r3, r2
 800d1ba:	687a      	ldr	r2, [r7, #4]
 800d1bc:	429a      	cmp	r2, r3
 800d1be:	d196      	bne.n	800d0ee <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800d1c0:	2300      	movs	r3, #0
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	3728      	adds	r7, #40	@ 0x28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	bd80      	pop	{r7, pc}
 800d1ca:	bf00      	nop
 800d1cc:	20000048 	.word	0x20000048

0800d1d0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b086      	sub	sp, #24
 800d1d4:	af02      	add	r7, sp, #8
 800d1d6:	60f8      	str	r0, [r7, #12]
 800d1d8:	60b9      	str	r1, [r7, #8]
 800d1da:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	9300      	str	r3, [sp, #0]
 800d1e0:	68bb      	ldr	r3, [r7, #8]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 800d1e8:	68f8      	ldr	r0, [r7, #12]
 800d1ea:	f7ff ff5b 	bl	800d0a4 <SPI_WaitFifoStateUntilTimeout>
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d007      	beq.n	800d204 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d1f8:	f043 0220 	orr.w	r2, r3, #32
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d200:	2303      	movs	r3, #3
 800d202:	e027      	b.n	800d254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	9300      	str	r3, [sp, #0]
 800d208:	68bb      	ldr	r3, [r7, #8]
 800d20a:	2200      	movs	r2, #0
 800d20c:	2180      	movs	r1, #128	@ 0x80
 800d20e:	68f8      	ldr	r0, [r7, #12]
 800d210:	f7ff fec0 	bl	800cf94 <SPI_WaitFlagStateUntilTimeout>
 800d214:	4603      	mov	r3, r0
 800d216:	2b00      	cmp	r3, #0
 800d218:	d007      	beq.n	800d22a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d21e:	f043 0220 	orr.w	r2, r3, #32
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d226:	2303      	movs	r3, #3
 800d228:	e014      	b.n	800d254 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	9300      	str	r3, [sp, #0]
 800d22e:	68bb      	ldr	r3, [r7, #8]
 800d230:	2200      	movs	r2, #0
 800d232:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	f7ff ff34 	bl	800d0a4 <SPI_WaitFifoStateUntilTimeout>
 800d23c:	4603      	mov	r3, r0
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d007      	beq.n	800d252 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d246:	f043 0220 	orr.w	r2, r3, #32
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800d24e:	2303      	movs	r3, #3
 800d250:	e000      	b.n	800d254 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800d252:	2300      	movs	r3, #0
}
 800d254:	4618      	mov	r0, r3
 800d256:	3710      	adds	r7, #16
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d101      	bne.n	800d26e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d26a:	2301      	movs	r3, #1
 800d26c:	e049      	b.n	800d302 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d274:	b2db      	uxtb	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	d106      	bne.n	800d288 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	2200      	movs	r2, #0
 800d27e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f7f9 fa9e 	bl	80067c4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	2202      	movs	r2, #2
 800d28c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681a      	ldr	r2, [r3, #0]
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	3304      	adds	r3, #4
 800d298:	4619      	mov	r1, r3
 800d29a:	4610      	mov	r0, r2
 800d29c:	f000 f9ba 	bl	800d614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	2201      	movs	r2, #1
 800d2ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	2201      	movs	r2, #1
 800d2bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2201      	movs	r2, #1
 800d2c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	2201      	movs	r2, #1
 800d2d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2201      	movs	r2, #1
 800d2dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800d300:	2300      	movs	r3, #0
}
 800d302:	4618      	mov	r0, r3
 800d304:	3708      	adds	r7, #8
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}
	...

0800d30c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d30c:	b480      	push	{r7}
 800d30e:	b085      	sub	sp, #20
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d001      	beq.n	800d324 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d320:	2301      	movs	r3, #1
 800d322:	e03b      	b.n	800d39c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	2202      	movs	r2, #2
 800d328:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	68da      	ldr	r2, [r3, #12]
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f042 0201 	orr.w	r2, r2, #1
 800d33a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	4a19      	ldr	r2, [pc, #100]	@ (800d3a8 <HAL_TIM_Base_Start_IT+0x9c>)
 800d342:	4293      	cmp	r3, r2
 800d344:	d009      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x4e>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d34e:	d004      	beq.n	800d35a <HAL_TIM_Base_Start_IT+0x4e>
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	4a15      	ldr	r2, [pc, #84]	@ (800d3ac <HAL_TIM_Base_Start_IT+0xa0>)
 800d356:	4293      	cmp	r3, r2
 800d358:	d115      	bne.n	800d386 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689a      	ldr	r2, [r3, #8]
 800d360:	4b13      	ldr	r3, [pc, #76]	@ (800d3b0 <HAL_TIM_Base_Start_IT+0xa4>)
 800d362:	4013      	ands	r3, r2
 800d364:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	2b06      	cmp	r3, #6
 800d36a:	d015      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x8c>
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d372:	d011      	beq.n	800d398 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	681a      	ldr	r2, [r3, #0]
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	f042 0201 	orr.w	r2, r2, #1
 800d382:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d384:	e008      	b.n	800d398 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	681a      	ldr	r2, [r3, #0]
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f042 0201 	orr.w	r2, r2, #1
 800d394:	601a      	str	r2, [r3, #0]
 800d396:	e000      	b.n	800d39a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d398:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800d39a:	2300      	movs	r3, #0
}
 800d39c:	4618      	mov	r0, r3
 800d39e:	3714      	adds	r7, #20
 800d3a0:	46bd      	mov	sp, r7
 800d3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a6:	4770      	bx	lr
 800d3a8:	40012c00 	.word	0x40012c00
 800d3ac:	40014000 	.word	0x40014000
 800d3b0:	00010007 	.word	0x00010007

0800d3b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	68db      	ldr	r3, [r3, #12]
 800d3c2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	691b      	ldr	r3, [r3, #16]
 800d3ca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d3cc:	68bb      	ldr	r3, [r7, #8]
 800d3ce:	f003 0302 	and.w	r3, r3, #2
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d020      	beq.n	800d418 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d3d6:	68fb      	ldr	r3, [r7, #12]
 800d3d8:	f003 0302 	and.w	r3, r3, #2
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01b      	beq.n	800d418 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	f06f 0202 	mvn.w	r2, #2
 800d3e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	2201      	movs	r2, #1
 800d3ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	f003 0303 	and.w	r3, r3, #3
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d003      	beq.n	800d406 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 f8e9 	bl	800d5d6 <HAL_TIM_IC_CaptureCallback>
 800d404:	e005      	b.n	800d412 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d406:	6878      	ldr	r0, [r7, #4]
 800d408:	f000 f8db 	bl	800d5c2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f8ec 	bl	800d5ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	f003 0304 	and.w	r3, r3, #4
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d020      	beq.n	800d464 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f003 0304 	and.w	r3, r3, #4
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d01b      	beq.n	800d464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	f06f 0204 	mvn.w	r2, #4
 800d434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	2202      	movs	r2, #2
 800d43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	699b      	ldr	r3, [r3, #24]
 800d442:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 f8c3 	bl	800d5d6 <HAL_TIM_IC_CaptureCallback>
 800d450:	e005      	b.n	800d45e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f8b5 	bl	800d5c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d458:	6878      	ldr	r0, [r7, #4]
 800d45a:	f000 f8c6 	bl	800d5ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	2200      	movs	r2, #0
 800d462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d464:	68bb      	ldr	r3, [r7, #8]
 800d466:	f003 0308 	and.w	r3, r3, #8
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d020      	beq.n	800d4b0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	f003 0308 	and.w	r3, r3, #8
 800d474:	2b00      	cmp	r3, #0
 800d476:	d01b      	beq.n	800d4b0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	681b      	ldr	r3, [r3, #0]
 800d47c:	f06f 0208 	mvn.w	r2, #8
 800d480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2204      	movs	r2, #4
 800d486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	69db      	ldr	r3, [r3, #28]
 800d48e:	f003 0303 	and.w	r3, r3, #3
 800d492:	2b00      	cmp	r3, #0
 800d494:	d003      	beq.n	800d49e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 f89d 	bl	800d5d6 <HAL_TIM_IC_CaptureCallback>
 800d49c:	e005      	b.n	800d4aa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 f88f 	bl	800d5c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 f8a0 	bl	800d5ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d4b0:	68bb      	ldr	r3, [r7, #8]
 800d4b2:	f003 0310 	and.w	r3, r3, #16
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d020      	beq.n	800d4fc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f003 0310 	and.w	r3, r3, #16
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d01b      	beq.n	800d4fc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	f06f 0210 	mvn.w	r2, #16
 800d4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	2208      	movs	r2, #8
 800d4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	681b      	ldr	r3, [r3, #0]
 800d4d8:	69db      	ldr	r3, [r3, #28]
 800d4da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d003      	beq.n	800d4ea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f000 f877 	bl	800d5d6 <HAL_TIM_IC_CaptureCallback>
 800d4e8:	e005      	b.n	800d4f6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d4ea:	6878      	ldr	r0, [r7, #4]
 800d4ec:	f000 f869 	bl	800d5c2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 f87a 	bl	800d5ea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	f003 0301 	and.w	r3, r3, #1
 800d502:	2b00      	cmp	r3, #0
 800d504:	d00c      	beq.n	800d520 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d506:	68fb      	ldr	r3, [r7, #12]
 800d508:	f003 0301 	and.w	r3, r3, #1
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d007      	beq.n	800d520 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	f06f 0201 	mvn.w	r2, #1
 800d518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7f4 fd6e 	bl	8001ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d526:	2b00      	cmp	r3, #0
 800d528:	d104      	bne.n	800d534 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800d52a:	68bb      	ldr	r3, [r7, #8]
 800d52c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00c      	beq.n	800d54e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d007      	beq.n	800d54e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800d546:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d548:	6878      	ldr	r0, [r7, #4]
 800d54a:	f000 f943 	bl	800d7d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800d54e:	68bb      	ldr	r3, [r7, #8]
 800d550:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d554:	2b00      	cmp	r3, #0
 800d556:	d00c      	beq.n	800d572 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d007      	beq.n	800d572 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800d56a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f000 f93b 	bl	800d7e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d00c      	beq.n	800d596 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d582:	2b00      	cmp	r3, #0
 800d584:	d007      	beq.n	800d596 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800d58e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d590:	6878      	ldr	r0, [r7, #4]
 800d592:	f000 f834 	bl	800d5fe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	f003 0320 	and.w	r3, r3, #32
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00c      	beq.n	800d5ba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	f003 0320 	and.w	r3, r3, #32
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d007      	beq.n	800d5ba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	f06f 0220 	mvn.w	r2, #32
 800d5b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f000 f903 	bl	800d7c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d5ba:	bf00      	nop
 800d5bc:	3710      	adds	r7, #16
 800d5be:	46bd      	mov	sp, r7
 800d5c0:	bd80      	pop	{r7, pc}

0800d5c2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5c2:	b480      	push	{r7}
 800d5c4:	b083      	sub	sp, #12
 800d5c6:	af00      	add	r7, sp, #0
 800d5c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5ca:	bf00      	nop
 800d5cc:	370c      	adds	r7, #12
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5d4:	4770      	bx	lr

0800d5d6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5d6:	b480      	push	{r7}
 800d5d8:	b083      	sub	sp, #12
 800d5da:	af00      	add	r7, sp, #0
 800d5dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5de:	bf00      	nop
 800d5e0:	370c      	adds	r7, #12
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e8:	4770      	bx	lr

0800d5ea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5f2:	bf00      	nop
 800d5f4:	370c      	adds	r7, #12
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr

0800d5fe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d5fe:	b480      	push	{r7}
 800d600:	b083      	sub	sp, #12
 800d602:	af00      	add	r7, sp, #0
 800d604:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d606:	bf00      	nop
 800d608:	370c      	adds	r7, #12
 800d60a:	46bd      	mov	sp, r7
 800d60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d610:	4770      	bx	lr
	...

0800d614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	4a30      	ldr	r2, [pc, #192]	@ (800d6e8 <TIM_Base_SetConfig+0xd4>)
 800d628:	4293      	cmp	r3, r2
 800d62a:	d003      	beq.n	800d634 <TIM_Base_SetConfig+0x20>
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d632:	d108      	bne.n	800d646 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d63a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	685b      	ldr	r3, [r3, #4]
 800d640:	68fa      	ldr	r2, [r7, #12]
 800d642:	4313      	orrs	r3, r2
 800d644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	4a27      	ldr	r2, [pc, #156]	@ (800d6e8 <TIM_Base_SetConfig+0xd4>)
 800d64a:	4293      	cmp	r3, r2
 800d64c:	d00b      	beq.n	800d666 <TIM_Base_SetConfig+0x52>
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d654:	d007      	beq.n	800d666 <TIM_Base_SetConfig+0x52>
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	4a24      	ldr	r2, [pc, #144]	@ (800d6ec <TIM_Base_SetConfig+0xd8>)
 800d65a:	4293      	cmp	r3, r2
 800d65c:	d003      	beq.n	800d666 <TIM_Base_SetConfig+0x52>
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4a23      	ldr	r2, [pc, #140]	@ (800d6f0 <TIM_Base_SetConfig+0xdc>)
 800d662:	4293      	cmp	r3, r2
 800d664:	d108      	bne.n	800d678 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d666:	68fb      	ldr	r3, [r7, #12]
 800d668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d66c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d66e:	683b      	ldr	r3, [r7, #0]
 800d670:	68db      	ldr	r3, [r3, #12]
 800d672:	68fa      	ldr	r2, [r7, #12]
 800d674:	4313      	orrs	r3, r2
 800d676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800d67e:	683b      	ldr	r3, [r7, #0]
 800d680:	695b      	ldr	r3, [r3, #20]
 800d682:	4313      	orrs	r3, r2
 800d684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	68fa      	ldr	r2, [r7, #12]
 800d68a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d68c:	683b      	ldr	r3, [r7, #0]
 800d68e:	689a      	ldr	r2, [r3, #8]
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	681a      	ldr	r2, [r3, #0]
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	4a12      	ldr	r2, [pc, #72]	@ (800d6e8 <TIM_Base_SetConfig+0xd4>)
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d007      	beq.n	800d6b4 <TIM_Base_SetConfig+0xa0>
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	4a11      	ldr	r2, [pc, #68]	@ (800d6ec <TIM_Base_SetConfig+0xd8>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d003      	beq.n	800d6b4 <TIM_Base_SetConfig+0xa0>
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	4a10      	ldr	r2, [pc, #64]	@ (800d6f0 <TIM_Base_SetConfig+0xdc>)
 800d6b0:	4293      	cmp	r3, r2
 800d6b2:	d103      	bne.n	800d6bc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d6b4:	683b      	ldr	r3, [r7, #0]
 800d6b6:	691a      	ldr	r2, [r3, #16]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	691b      	ldr	r3, [r3, #16]
 800d6c6:	f003 0301 	and.w	r3, r3, #1
 800d6ca:	2b01      	cmp	r3, #1
 800d6cc:	d105      	bne.n	800d6da <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	f023 0201 	bic.w	r2, r3, #1
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	611a      	str	r2, [r3, #16]
  }
}
 800d6da:	bf00      	nop
 800d6dc:	3714      	adds	r7, #20
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
 800d6e6:	bf00      	nop
 800d6e8:	40012c00 	.word	0x40012c00
 800d6ec:	40014000 	.word	0x40014000
 800d6f0:	40014400 	.word	0x40014400

0800d6f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d6f4:	b480      	push	{r7}
 800d6f6:	b085      	sub	sp, #20
 800d6f8:	af00      	add	r7, sp, #0
 800d6fa:	6078      	str	r0, [r7, #4]
 800d6fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d704:	2b01      	cmp	r3, #1
 800d706:	d101      	bne.n	800d70c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d708:	2302      	movs	r3, #2
 800d70a:	e04f      	b.n	800d7ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2201      	movs	r2, #1
 800d710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2202      	movs	r2, #2
 800d718:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	685b      	ldr	r3, [r3, #4]
 800d722:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	689b      	ldr	r3, [r3, #8]
 800d72a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	4a21      	ldr	r2, [pc, #132]	@ (800d7b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d732:	4293      	cmp	r3, r2
 800d734:	d108      	bne.n	800d748 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d73c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	685b      	ldr	r3, [r3, #4]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	4313      	orrs	r3, r2
 800d746:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d74e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	68fa      	ldr	r2, [r7, #12]
 800d756:	4313      	orrs	r3, r2
 800d758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	68fa      	ldr	r2, [r7, #12]
 800d760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	4a14      	ldr	r2, [pc, #80]	@ (800d7b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d009      	beq.n	800d780 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d774:	d004      	beq.n	800d780 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a10      	ldr	r2, [pc, #64]	@ (800d7bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d10c      	bne.n	800d79a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d780:	68bb      	ldr	r3, [r7, #8]
 800d782:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d786:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	689b      	ldr	r3, [r3, #8]
 800d78c:	68ba      	ldr	r2, [r7, #8]
 800d78e:	4313      	orrs	r3, r2
 800d790:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2201      	movs	r2, #1
 800d79e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3714      	adds	r7, #20
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b6:	4770      	bx	lr
 800d7b8:	40012c00 	.word	0x40012c00
 800d7bc:	40014000 	.word	0x40014000

0800d7c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d7c0:	b480      	push	{r7}
 800d7c2:	b083      	sub	sp, #12
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d7c8:	bf00      	nop
 800d7ca:	370c      	adds	r7, #12
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7d2:	4770      	bx	lr

0800d7d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d7d4:	b480      	push	{r7}
 800d7d6:	b083      	sub	sp, #12
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d7dc:	bf00      	nop
 800d7de:	370c      	adds	r7, #12
 800d7e0:	46bd      	mov	sp, r7
 800d7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e6:	4770      	bx	lr

0800d7e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d7f0:	bf00      	nop
 800d7f2:	370c      	adds	r7, #12
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d101      	bne.n	800d80e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d80a:	2301      	movs	r3, #1
 800d80c:	e040      	b.n	800d890 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d812:	2b00      	cmp	r3, #0
 800d814:	d106      	bne.n	800d824 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2200      	movs	r2, #0
 800d81a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d81e:	6878      	ldr	r0, [r7, #4]
 800d820:	f7f9 f826 	bl	8006870 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2224      	movs	r2, #36	@ 0x24
 800d828:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	681a      	ldr	r2, [r3, #0]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	f022 0201 	bic.w	r2, r2, #1
 800d838:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d002      	beq.n	800d848 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 fade 	bl	800de04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 f8af 	bl	800d9ac <UART_SetConfig>
 800d84e:	4603      	mov	r3, r0
 800d850:	2b01      	cmp	r3, #1
 800d852:	d101      	bne.n	800d858 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	e01b      	b.n	800d890 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	685a      	ldr	r2, [r3, #4]
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d866:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	681b      	ldr	r3, [r3, #0]
 800d86c:	689a      	ldr	r2, [r3, #8]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d876:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	681b      	ldr	r3, [r3, #0]
 800d87c:	681a      	ldr	r2, [r3, #0]
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	681b      	ldr	r3, [r3, #0]
 800d882:	f042 0201 	orr.w	r2, r2, #1
 800d886:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fb5d 	bl	800df48 <UART_CheckIdleState>
 800d88e:	4603      	mov	r3, r0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3708      	adds	r7, #8
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b08a      	sub	sp, #40	@ 0x28
 800d89c:	af02      	add	r7, sp, #8
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	603b      	str	r3, [r7, #0]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8ac:	2b20      	cmp	r3, #32
 800d8ae:	d177      	bne.n	800d9a0 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d8b0:	68bb      	ldr	r3, [r7, #8]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d002      	beq.n	800d8bc <HAL_UART_Transmit+0x24>
 800d8b6:	88fb      	ldrh	r3, [r7, #6]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d101      	bne.n	800d8c0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800d8bc:	2301      	movs	r3, #1
 800d8be:	e070      	b.n	800d9a2 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2221      	movs	r2, #33	@ 0x21
 800d8cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d8ce:	f7fb fc55 	bl	800917c <HAL_GetTick>
 800d8d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	88fa      	ldrh	r2, [r7, #6]
 800d8d8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	88fa      	ldrh	r2, [r7, #6]
 800d8e0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	689b      	ldr	r3, [r3, #8]
 800d8e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d8ec:	d108      	bne.n	800d900 <HAL_UART_Transmit+0x68>
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	691b      	ldr	r3, [r3, #16]
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d104      	bne.n	800d900 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	61bb      	str	r3, [r7, #24]
 800d8fe:	e003      	b.n	800d908 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d904:	2300      	movs	r3, #0
 800d906:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d908:	e02f      	b.n	800d96a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d90a:	683b      	ldr	r3, [r7, #0]
 800d90c:	9300      	str	r3, [sp, #0]
 800d90e:	697b      	ldr	r3, [r7, #20]
 800d910:	2200      	movs	r2, #0
 800d912:	2180      	movs	r1, #128	@ 0x80
 800d914:	68f8      	ldr	r0, [r7, #12]
 800d916:	f000 fbbf 	bl	800e098 <UART_WaitOnFlagUntilTimeout>
 800d91a:	4603      	mov	r3, r0
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d004      	beq.n	800d92a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2220      	movs	r2, #32
 800d924:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800d926:	2303      	movs	r3, #3
 800d928:	e03b      	b.n	800d9a2 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800d92a:	69fb      	ldr	r3, [r7, #28]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	d10b      	bne.n	800d948 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d930:	69bb      	ldr	r3, [r7, #24]
 800d932:	881a      	ldrh	r2, [r3, #0]
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	681b      	ldr	r3, [r3, #0]
 800d938:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d93c:	b292      	uxth	r2, r2
 800d93e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	3302      	adds	r3, #2
 800d944:	61bb      	str	r3, [r7, #24]
 800d946:	e007      	b.n	800d958 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	781a      	ldrb	r2, [r3, #0]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d952:	69fb      	ldr	r3, [r7, #28]
 800d954:	3301      	adds	r3, #1
 800d956:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d95e:	b29b      	uxth	r3, r3
 800d960:	3b01      	subs	r3, #1
 800d962:	b29a      	uxth	r2, r3
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800d970:	b29b      	uxth	r3, r3
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1c9      	bne.n	800d90a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	9300      	str	r3, [sp, #0]
 800d97a:	697b      	ldr	r3, [r7, #20]
 800d97c:	2200      	movs	r2, #0
 800d97e:	2140      	movs	r1, #64	@ 0x40
 800d980:	68f8      	ldr	r0, [r7, #12]
 800d982:	f000 fb89 	bl	800e098 <UART_WaitOnFlagUntilTimeout>
 800d986:	4603      	mov	r3, r0
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d004      	beq.n	800d996 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	2220      	movs	r2, #32
 800d990:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800d992:	2303      	movs	r3, #3
 800d994:	e005      	b.n	800d9a2 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	2220      	movs	r2, #32
 800d99a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d99c:	2300      	movs	r3, #0
 800d99e:	e000      	b.n	800d9a2 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d9a0:	2302      	movs	r3, #2
  }
}
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	3720      	adds	r7, #32
 800d9a6:	46bd      	mov	sp, r7
 800d9a8:	bd80      	pop	{r7, pc}
	...

0800d9ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d9ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d9b0:	b08a      	sub	sp, #40	@ 0x28
 800d9b2:	af00      	add	r7, sp, #0
 800d9b4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d9b6:	2300      	movs	r3, #0
 800d9b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	689a      	ldr	r2, [r3, #8]
 800d9c0:	68fb      	ldr	r3, [r7, #12]
 800d9c2:	691b      	ldr	r3, [r3, #16]
 800d9c4:	431a      	orrs	r2, r3
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	695b      	ldr	r3, [r3, #20]
 800d9ca:	431a      	orrs	r2, r3
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	4313      	orrs	r3, r2
 800d9d2:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	4bb4      	ldr	r3, [pc, #720]	@ (800dcac <UART_SetConfig+0x300>)
 800d9dc:	4013      	ands	r3, r2
 800d9de:	68fa      	ldr	r2, [r7, #12]
 800d9e0:	6812      	ldr	r2, [r2, #0]
 800d9e2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800d9e4:	430b      	orrs	r3, r1
 800d9e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	685b      	ldr	r3, [r3, #4]
 800d9ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	68da      	ldr	r2, [r3, #12]
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	430a      	orrs	r2, r1
 800d9fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	699b      	ldr	r3, [r3, #24]
 800da02:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	4aa9      	ldr	r2, [pc, #676]	@ (800dcb0 <UART_SetConfig+0x304>)
 800da0a:	4293      	cmp	r3, r2
 800da0c:	d004      	beq.n	800da18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	6a1b      	ldr	r3, [r3, #32]
 800da12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da14:	4313      	orrs	r3, r2
 800da16:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	689b      	ldr	r3, [r3, #8]
 800da1e:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800da28:	430a      	orrs	r2, r1
 800da2a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4aa0      	ldr	r2, [pc, #640]	@ (800dcb4 <UART_SetConfig+0x308>)
 800da32:	4293      	cmp	r3, r2
 800da34:	d126      	bne.n	800da84 <UART_SetConfig+0xd8>
 800da36:	4ba0      	ldr	r3, [pc, #640]	@ (800dcb8 <UART_SetConfig+0x30c>)
 800da38:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da3c:	f003 0303 	and.w	r3, r3, #3
 800da40:	2b03      	cmp	r3, #3
 800da42:	d81b      	bhi.n	800da7c <UART_SetConfig+0xd0>
 800da44:	a201      	add	r2, pc, #4	@ (adr r2, 800da4c <UART_SetConfig+0xa0>)
 800da46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da4a:	bf00      	nop
 800da4c:	0800da5d 	.word	0x0800da5d
 800da50:	0800da6d 	.word	0x0800da6d
 800da54:	0800da65 	.word	0x0800da65
 800da58:	0800da75 	.word	0x0800da75
 800da5c:	2301      	movs	r3, #1
 800da5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800da62:	e080      	b.n	800db66 <UART_SetConfig+0x1ba>
 800da64:	2302      	movs	r3, #2
 800da66:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800da6a:	e07c      	b.n	800db66 <UART_SetConfig+0x1ba>
 800da6c:	2304      	movs	r3, #4
 800da6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800da72:	e078      	b.n	800db66 <UART_SetConfig+0x1ba>
 800da74:	2308      	movs	r3, #8
 800da76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800da7a:	e074      	b.n	800db66 <UART_SetConfig+0x1ba>
 800da7c:	2310      	movs	r3, #16
 800da7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800da82:	e070      	b.n	800db66 <UART_SetConfig+0x1ba>
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	4a8c      	ldr	r2, [pc, #560]	@ (800dcbc <UART_SetConfig+0x310>)
 800da8a:	4293      	cmp	r3, r2
 800da8c:	d138      	bne.n	800db00 <UART_SetConfig+0x154>
 800da8e:	4b8a      	ldr	r3, [pc, #552]	@ (800dcb8 <UART_SetConfig+0x30c>)
 800da90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800da94:	f003 030c 	and.w	r3, r3, #12
 800da98:	2b0c      	cmp	r3, #12
 800da9a:	d82d      	bhi.n	800daf8 <UART_SetConfig+0x14c>
 800da9c:	a201      	add	r2, pc, #4	@ (adr r2, 800daa4 <UART_SetConfig+0xf8>)
 800da9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa2:	bf00      	nop
 800daa4:	0800dad9 	.word	0x0800dad9
 800daa8:	0800daf9 	.word	0x0800daf9
 800daac:	0800daf9 	.word	0x0800daf9
 800dab0:	0800daf9 	.word	0x0800daf9
 800dab4:	0800dae9 	.word	0x0800dae9
 800dab8:	0800daf9 	.word	0x0800daf9
 800dabc:	0800daf9 	.word	0x0800daf9
 800dac0:	0800daf9 	.word	0x0800daf9
 800dac4:	0800dae1 	.word	0x0800dae1
 800dac8:	0800daf9 	.word	0x0800daf9
 800dacc:	0800daf9 	.word	0x0800daf9
 800dad0:	0800daf9 	.word	0x0800daf9
 800dad4:	0800daf1 	.word	0x0800daf1
 800dad8:	2300      	movs	r3, #0
 800dada:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dade:	e042      	b.n	800db66 <UART_SetConfig+0x1ba>
 800dae0:	2302      	movs	r3, #2
 800dae2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dae6:	e03e      	b.n	800db66 <UART_SetConfig+0x1ba>
 800dae8:	2304      	movs	r3, #4
 800daea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800daee:	e03a      	b.n	800db66 <UART_SetConfig+0x1ba>
 800daf0:	2308      	movs	r3, #8
 800daf2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800daf6:	e036      	b.n	800db66 <UART_SetConfig+0x1ba>
 800daf8:	2310      	movs	r3, #16
 800dafa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800dafe:	e032      	b.n	800db66 <UART_SetConfig+0x1ba>
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a6a      	ldr	r2, [pc, #424]	@ (800dcb0 <UART_SetConfig+0x304>)
 800db06:	4293      	cmp	r3, r2
 800db08:	d12a      	bne.n	800db60 <UART_SetConfig+0x1b4>
 800db0a:	4b6b      	ldr	r3, [pc, #428]	@ (800dcb8 <UART_SetConfig+0x30c>)
 800db0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db10:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800db14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db18:	d01a      	beq.n	800db50 <UART_SetConfig+0x1a4>
 800db1a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800db1e:	d81b      	bhi.n	800db58 <UART_SetConfig+0x1ac>
 800db20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db24:	d00c      	beq.n	800db40 <UART_SetConfig+0x194>
 800db26:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db2a:	d815      	bhi.n	800db58 <UART_SetConfig+0x1ac>
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d003      	beq.n	800db38 <UART_SetConfig+0x18c>
 800db30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800db34:	d008      	beq.n	800db48 <UART_SetConfig+0x19c>
 800db36:	e00f      	b.n	800db58 <UART_SetConfig+0x1ac>
 800db38:	2300      	movs	r3, #0
 800db3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800db3e:	e012      	b.n	800db66 <UART_SetConfig+0x1ba>
 800db40:	2302      	movs	r3, #2
 800db42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800db46:	e00e      	b.n	800db66 <UART_SetConfig+0x1ba>
 800db48:	2304      	movs	r3, #4
 800db4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800db4e:	e00a      	b.n	800db66 <UART_SetConfig+0x1ba>
 800db50:	2308      	movs	r3, #8
 800db52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800db56:	e006      	b.n	800db66 <UART_SetConfig+0x1ba>
 800db58:	2310      	movs	r3, #16
 800db5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800db5e:	e002      	b.n	800db66 <UART_SetConfig+0x1ba>
 800db60:	2310      	movs	r3, #16
 800db62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	4a51      	ldr	r2, [pc, #324]	@ (800dcb0 <UART_SetConfig+0x304>)
 800db6c:	4293      	cmp	r3, r2
 800db6e:	d17a      	bne.n	800dc66 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800db74:	2b08      	cmp	r3, #8
 800db76:	d824      	bhi.n	800dbc2 <UART_SetConfig+0x216>
 800db78:	a201      	add	r2, pc, #4	@ (adr r2, 800db80 <UART_SetConfig+0x1d4>)
 800db7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db7e:	bf00      	nop
 800db80:	0800dba5 	.word	0x0800dba5
 800db84:	0800dbc3 	.word	0x0800dbc3
 800db88:	0800dbad 	.word	0x0800dbad
 800db8c:	0800dbc3 	.word	0x0800dbc3
 800db90:	0800dbb3 	.word	0x0800dbb3
 800db94:	0800dbc3 	.word	0x0800dbc3
 800db98:	0800dbc3 	.word	0x0800dbc3
 800db9c:	0800dbc3 	.word	0x0800dbc3
 800dba0:	0800dbbb 	.word	0x0800dbbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dba4:	f7fe fbc0 	bl	800c328 <HAL_RCC_GetPCLK1Freq>
 800dba8:	61f8      	str	r0, [r7, #28]
        break;
 800dbaa:	e010      	b.n	800dbce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dbac:	4b44      	ldr	r3, [pc, #272]	@ (800dcc0 <UART_SetConfig+0x314>)
 800dbae:	61fb      	str	r3, [r7, #28]
        break;
 800dbb0:	e00d      	b.n	800dbce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dbb2:	f7fe fb21 	bl	800c1f8 <HAL_RCC_GetSysClockFreq>
 800dbb6:	61f8      	str	r0, [r7, #28]
        break;
 800dbb8:	e009      	b.n	800dbce <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dbbe:	61fb      	str	r3, [r7, #28]
        break;
 800dbc0:	e005      	b.n	800dbce <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dbc6:	2301      	movs	r3, #1
 800dbc8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800dbcc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbce:	69fb      	ldr	r3, [r7, #28]
 800dbd0:	2b00      	cmp	r3, #0
 800dbd2:	f000 8107 	beq.w	800dde4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	685a      	ldr	r2, [r3, #4]
 800dbda:	4613      	mov	r3, r2
 800dbdc:	005b      	lsls	r3, r3, #1
 800dbde:	4413      	add	r3, r2
 800dbe0:	69fa      	ldr	r2, [r7, #28]
 800dbe2:	429a      	cmp	r2, r3
 800dbe4:	d305      	bcc.n	800dbf2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dbec:	69fa      	ldr	r2, [r7, #28]
 800dbee:	429a      	cmp	r2, r3
 800dbf0:	d903      	bls.n	800dbfa <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800dbf8:	e0f4      	b.n	800dde4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dbfa:	69fb      	ldr	r3, [r7, #28]
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	461c      	mov	r4, r3
 800dc00:	4615      	mov	r5, r2
 800dc02:	f04f 0200 	mov.w	r2, #0
 800dc06:	f04f 0300 	mov.w	r3, #0
 800dc0a:	022b      	lsls	r3, r5, #8
 800dc0c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800dc10:	0222      	lsls	r2, r4, #8
 800dc12:	68f9      	ldr	r1, [r7, #12]
 800dc14:	6849      	ldr	r1, [r1, #4]
 800dc16:	0849      	lsrs	r1, r1, #1
 800dc18:	2000      	movs	r0, #0
 800dc1a:	4688      	mov	r8, r1
 800dc1c:	4681      	mov	r9, r0
 800dc1e:	eb12 0a08 	adds.w	sl, r2, r8
 800dc22:	eb43 0b09 	adc.w	fp, r3, r9
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	685b      	ldr	r3, [r3, #4]
 800dc2a:	2200      	movs	r2, #0
 800dc2c:	603b      	str	r3, [r7, #0]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc34:	4650      	mov	r0, sl
 800dc36:	4659      	mov	r1, fp
 800dc38:	f7f2 ff88 	bl	8000b4c <__aeabi_uldivmod>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	460b      	mov	r3, r1
 800dc40:	4613      	mov	r3, r2
 800dc42:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc44:	69bb      	ldr	r3, [r7, #24]
 800dc46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dc4a:	d308      	bcc.n	800dc5e <UART_SetConfig+0x2b2>
 800dc4c:	69bb      	ldr	r3, [r7, #24]
 800dc4e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc52:	d204      	bcs.n	800dc5e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	681b      	ldr	r3, [r3, #0]
 800dc58:	69ba      	ldr	r2, [r7, #24]
 800dc5a:	60da      	str	r2, [r3, #12]
 800dc5c:	e0c2      	b.n	800dde4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800dc64:	e0be      	b.n	800dde4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	69db      	ldr	r3, [r3, #28]
 800dc6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800dc6e:	d16a      	bne.n	800dd46 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800dc70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dc74:	2b08      	cmp	r3, #8
 800dc76:	d834      	bhi.n	800dce2 <UART_SetConfig+0x336>
 800dc78:	a201      	add	r2, pc, #4	@ (adr r2, 800dc80 <UART_SetConfig+0x2d4>)
 800dc7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc7e:	bf00      	nop
 800dc80:	0800dca5 	.word	0x0800dca5
 800dc84:	0800dcc5 	.word	0x0800dcc5
 800dc88:	0800dccd 	.word	0x0800dccd
 800dc8c:	0800dce3 	.word	0x0800dce3
 800dc90:	0800dcd3 	.word	0x0800dcd3
 800dc94:	0800dce3 	.word	0x0800dce3
 800dc98:	0800dce3 	.word	0x0800dce3
 800dc9c:	0800dce3 	.word	0x0800dce3
 800dca0:	0800dcdb 	.word	0x0800dcdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dca4:	f7fe fb40 	bl	800c328 <HAL_RCC_GetPCLK1Freq>
 800dca8:	61f8      	str	r0, [r7, #28]
        break;
 800dcaa:	e020      	b.n	800dcee <UART_SetConfig+0x342>
 800dcac:	efff69f3 	.word	0xefff69f3
 800dcb0:	40008000 	.word	0x40008000
 800dcb4:	40013800 	.word	0x40013800
 800dcb8:	40021000 	.word	0x40021000
 800dcbc:	40004400 	.word	0x40004400
 800dcc0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dcc4:	f7fe fb46 	bl	800c354 <HAL_RCC_GetPCLK2Freq>
 800dcc8:	61f8      	str	r0, [r7, #28]
        break;
 800dcca:	e010      	b.n	800dcee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dccc:	4b4c      	ldr	r3, [pc, #304]	@ (800de00 <UART_SetConfig+0x454>)
 800dcce:	61fb      	str	r3, [r7, #28]
        break;
 800dcd0:	e00d      	b.n	800dcee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dcd2:	f7fe fa91 	bl	800c1f8 <HAL_RCC_GetSysClockFreq>
 800dcd6:	61f8      	str	r0, [r7, #28]
        break;
 800dcd8:	e009      	b.n	800dcee <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dcda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dcde:	61fb      	str	r3, [r7, #28]
        break;
 800dce0:	e005      	b.n	800dcee <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800dce2:	2300      	movs	r3, #0
 800dce4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dce6:	2301      	movs	r3, #1
 800dce8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800dcec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d077      	beq.n	800dde4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dcf4:	69fb      	ldr	r3, [r7, #28]
 800dcf6:	005a      	lsls	r2, r3, #1
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	085b      	lsrs	r3, r3, #1
 800dcfe:	441a      	add	r2, r3
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	685b      	ldr	r3, [r3, #4]
 800dd04:	fbb2 f3f3 	udiv	r3, r2, r3
 800dd08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd0a:	69bb      	ldr	r3, [r7, #24]
 800dd0c:	2b0f      	cmp	r3, #15
 800dd0e:	d916      	bls.n	800dd3e <UART_SetConfig+0x392>
 800dd10:	69bb      	ldr	r3, [r7, #24]
 800dd12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dd16:	d212      	bcs.n	800dd3e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd18:	69bb      	ldr	r3, [r7, #24]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	f023 030f 	bic.w	r3, r3, #15
 800dd20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd22:	69bb      	ldr	r3, [r7, #24]
 800dd24:	085b      	lsrs	r3, r3, #1
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	f003 0307 	and.w	r3, r3, #7
 800dd2c:	b29a      	uxth	r2, r3
 800dd2e:	8afb      	ldrh	r3, [r7, #22]
 800dd30:	4313      	orrs	r3, r2
 800dd32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	8afa      	ldrh	r2, [r7, #22]
 800dd3a:	60da      	str	r2, [r3, #12]
 800dd3c:	e052      	b.n	800dde4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800dd3e:	2301      	movs	r3, #1
 800dd40:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800dd44:	e04e      	b.n	800dde4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dd46:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800dd4a:	2b08      	cmp	r3, #8
 800dd4c:	d827      	bhi.n	800dd9e <UART_SetConfig+0x3f2>
 800dd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd54 <UART_SetConfig+0x3a8>)
 800dd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd54:	0800dd79 	.word	0x0800dd79
 800dd58:	0800dd81 	.word	0x0800dd81
 800dd5c:	0800dd89 	.word	0x0800dd89
 800dd60:	0800dd9f 	.word	0x0800dd9f
 800dd64:	0800dd8f 	.word	0x0800dd8f
 800dd68:	0800dd9f 	.word	0x0800dd9f
 800dd6c:	0800dd9f 	.word	0x0800dd9f
 800dd70:	0800dd9f 	.word	0x0800dd9f
 800dd74:	0800dd97 	.word	0x0800dd97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd78:	f7fe fad6 	bl	800c328 <HAL_RCC_GetPCLK1Freq>
 800dd7c:	61f8      	str	r0, [r7, #28]
        break;
 800dd7e:	e014      	b.n	800ddaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd80:	f7fe fae8 	bl	800c354 <HAL_RCC_GetPCLK2Freq>
 800dd84:	61f8      	str	r0, [r7, #28]
        break;
 800dd86:	e010      	b.n	800ddaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800dd88:	4b1d      	ldr	r3, [pc, #116]	@ (800de00 <UART_SetConfig+0x454>)
 800dd8a:	61fb      	str	r3, [r7, #28]
        break;
 800dd8c:	e00d      	b.n	800ddaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd8e:	f7fe fa33 	bl	800c1f8 <HAL_RCC_GetSysClockFreq>
 800dd92:	61f8      	str	r0, [r7, #28]
        break;
 800dd94:	e009      	b.n	800ddaa <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd96:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dd9a:	61fb      	str	r3, [r7, #28]
        break;
 800dd9c:	e005      	b.n	800ddaa <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800dda8:	bf00      	nop
    }

    if (pclk != 0U)
 800ddaa:	69fb      	ldr	r3, [r7, #28]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d019      	beq.n	800dde4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	085a      	lsrs	r2, r3, #1
 800ddb6:	69fb      	ldr	r3, [r7, #28]
 800ddb8:	441a      	add	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	685b      	ldr	r3, [r3, #4]
 800ddbe:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddc4:	69bb      	ldr	r3, [r7, #24]
 800ddc6:	2b0f      	cmp	r3, #15
 800ddc8:	d909      	bls.n	800ddde <UART_SetConfig+0x432>
 800ddca:	69bb      	ldr	r3, [r7, #24]
 800ddcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ddd0:	d205      	bcs.n	800ddde <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	b29a      	uxth	r2, r3
 800ddd6:	68fb      	ldr	r3, [r7, #12]
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	60da      	str	r2, [r3, #12]
 800dddc:	e002      	b.n	800dde4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800ddde:	2301      	movs	r3, #1
 800dde0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	2200      	movs	r2, #0
 800dde8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	2200      	movs	r2, #0
 800ddee:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800ddf0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3728      	adds	r7, #40	@ 0x28
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ddfe:	bf00      	nop
 800de00:	00f42400 	.word	0x00f42400

0800de04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de10:	f003 0308 	and.w	r3, r3, #8
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00a      	beq.n	800de2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	685b      	ldr	r3, [r3, #4]
 800de1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	430a      	orrs	r2, r1
 800de2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de32:	f003 0301 	and.w	r3, r3, #1
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00a      	beq.n	800de50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	685b      	ldr	r3, [r3, #4]
 800de40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	430a      	orrs	r2, r1
 800de4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de54:	f003 0302 	and.w	r3, r3, #2
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d00a      	beq.n	800de72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	685b      	ldr	r3, [r3, #4]
 800de62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	430a      	orrs	r2, r1
 800de70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de76:	f003 0304 	and.w	r3, r3, #4
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d00a      	beq.n	800de94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	685b      	ldr	r3, [r3, #4]
 800de84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	430a      	orrs	r2, r1
 800de92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de98:	f003 0310 	and.w	r3, r3, #16
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d00a      	beq.n	800deb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	689b      	ldr	r3, [r3, #8]
 800dea6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	430a      	orrs	r2, r1
 800deb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deba:	f003 0320 	and.w	r3, r3, #32
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d00a      	beq.n	800ded8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	689b      	ldr	r3, [r3, #8]
 800dec8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	430a      	orrs	r2, r1
 800ded6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dedc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d01a      	beq.n	800df1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	685b      	ldr	r3, [r3, #4]
 800deea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	681b      	ldr	r3, [r3, #0]
 800def6:	430a      	orrs	r2, r1
 800def8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800defe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800df02:	d10a      	bne.n	800df1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	430a      	orrs	r2, r1
 800df18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00a      	beq.n	800df3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	685b      	ldr	r3, [r3, #4]
 800df2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	681b      	ldr	r3, [r3, #0]
 800df38:	430a      	orrs	r2, r1
 800df3a:	605a      	str	r2, [r3, #4]
  }
}
 800df3c:	bf00      	nop
 800df3e:	370c      	adds	r7, #12
 800df40:	46bd      	mov	sp, r7
 800df42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df46:	4770      	bx	lr

0800df48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800df48:	b580      	push	{r7, lr}
 800df4a:	b098      	sub	sp, #96	@ 0x60
 800df4c:	af02      	add	r7, sp, #8
 800df4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	2200      	movs	r2, #0
 800df54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800df58:	f7fb f910 	bl	800917c <HAL_GetTick>
 800df5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	f003 0308 	and.w	r3, r3, #8
 800df68:	2b08      	cmp	r3, #8
 800df6a:	d12e      	bne.n	800dfca <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800df6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800df70:	9300      	str	r3, [sp, #0]
 800df72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800df74:	2200      	movs	r2, #0
 800df76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800df7a:	6878      	ldr	r0, [r7, #4]
 800df7c:	f000 f88c 	bl	800e098 <UART_WaitOnFlagUntilTimeout>
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d021      	beq.n	800dfca <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	e853 3f00 	ldrex	r3, [r3]
 800df92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800df94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800df96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800df9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	461a      	mov	r2, r3
 800dfa2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dfa4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dfa6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfa8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800dfaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800dfac:	e841 2300 	strex	r3, r2, [r1]
 800dfb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800dfb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfb4:	2b00      	cmp	r3, #0
 800dfb6:	d1e6      	bne.n	800df86 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2220      	movs	r2, #32
 800dfbc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2200      	movs	r2, #0
 800dfc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dfc6:	2303      	movs	r3, #3
 800dfc8:	e062      	b.n	800e090 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	681b      	ldr	r3, [r3, #0]
 800dfd0:	f003 0304 	and.w	r3, r3, #4
 800dfd4:	2b04      	cmp	r3, #4
 800dfd6:	d149      	bne.n	800e06c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800dfd8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dfdc:	9300      	str	r3, [sp, #0]
 800dfde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 f856 	bl	800e098 <UART_WaitOnFlagUntilTimeout>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d03c      	beq.n	800e06c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dffa:	e853 3f00 	ldrex	r3, [r3]
 800dffe:	623b      	str	r3, [r7, #32]
   return(result);
 800e000:	6a3b      	ldr	r3, [r7, #32]
 800e002:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e006:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	461a      	mov	r2, r3
 800e00e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e010:	633b      	str	r3, [r7, #48]	@ 0x30
 800e012:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e014:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e016:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e018:	e841 2300 	strex	r3, r2, [r1]
 800e01c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800e01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e020:	2b00      	cmp	r3, #0
 800e022:	d1e6      	bne.n	800dff2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	3308      	adds	r3, #8
 800e02a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e02c:	693b      	ldr	r3, [r7, #16]
 800e02e:	e853 3f00 	ldrex	r3, [r3]
 800e032:	60fb      	str	r3, [r7, #12]
   return(result);
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f023 0301 	bic.w	r3, r3, #1
 800e03a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	3308      	adds	r3, #8
 800e042:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e044:	61fa      	str	r2, [r7, #28]
 800e046:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e048:	69b9      	ldr	r1, [r7, #24]
 800e04a:	69fa      	ldr	r2, [r7, #28]
 800e04c:	e841 2300 	strex	r3, r2, [r1]
 800e050:	617b      	str	r3, [r7, #20]
   return(result);
 800e052:	697b      	ldr	r3, [r7, #20]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d1e5      	bne.n	800e024 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2220      	movs	r2, #32
 800e05c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e068:	2303      	movs	r3, #3
 800e06a:	e011      	b.n	800e090 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	2220      	movs	r2, #32
 800e070:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2220      	movs	r2, #32
 800e076:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2200      	movs	r2, #0
 800e084:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	2200      	movs	r2, #0
 800e08a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800e08e:	2300      	movs	r3, #0
}
 800e090:	4618      	mov	r0, r3
 800e092:	3758      	adds	r7, #88	@ 0x58
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}

0800e098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e098:	b580      	push	{r7, lr}
 800e09a:	b084      	sub	sp, #16
 800e09c:	af00      	add	r7, sp, #0
 800e09e:	60f8      	str	r0, [r7, #12]
 800e0a0:	60b9      	str	r1, [r7, #8]
 800e0a2:	603b      	str	r3, [r7, #0]
 800e0a4:	4613      	mov	r3, r2
 800e0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e0a8:	e04f      	b.n	800e14a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e0aa:	69bb      	ldr	r3, [r7, #24]
 800e0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0b0:	d04b      	beq.n	800e14a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e0b2:	f7fb f863 	bl	800917c <HAL_GetTick>
 800e0b6:	4602      	mov	r2, r0
 800e0b8:	683b      	ldr	r3, [r7, #0]
 800e0ba:	1ad3      	subs	r3, r2, r3
 800e0bc:	69ba      	ldr	r2, [r7, #24]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d302      	bcc.n	800e0c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800e0c2:	69bb      	ldr	r3, [r7, #24]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d101      	bne.n	800e0cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800e0c8:	2303      	movs	r3, #3
 800e0ca:	e04e      	b.n	800e16a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	681b      	ldr	r3, [r3, #0]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f003 0304 	and.w	r3, r3, #4
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d037      	beq.n	800e14a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0da:	68bb      	ldr	r3, [r7, #8]
 800e0dc:	2b80      	cmp	r3, #128	@ 0x80
 800e0de:	d034      	beq.n	800e14a <UART_WaitOnFlagUntilTimeout+0xb2>
 800e0e0:	68bb      	ldr	r3, [r7, #8]
 800e0e2:	2b40      	cmp	r3, #64	@ 0x40
 800e0e4:	d031      	beq.n	800e14a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	69db      	ldr	r3, [r3, #28]
 800e0ec:	f003 0308 	and.w	r3, r3, #8
 800e0f0:	2b08      	cmp	r3, #8
 800e0f2:	d110      	bne.n	800e116 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2208      	movs	r2, #8
 800e0fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e0fc:	68f8      	ldr	r0, [r7, #12]
 800e0fe:	f000 f838 	bl	800e172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	2208      	movs	r2, #8
 800e106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	2200      	movs	r2, #0
 800e10e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800e112:	2301      	movs	r3, #1
 800e114:	e029      	b.n	800e16a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	69db      	ldr	r3, [r3, #28]
 800e11c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e120:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e124:	d111      	bne.n	800e14a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e12e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e130:	68f8      	ldr	r0, [r7, #12]
 800e132:	f000 f81e 	bl	800e172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	2220      	movs	r2, #32
 800e13a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800e146:	2303      	movs	r3, #3
 800e148:	e00f      	b.n	800e16a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	69da      	ldr	r2, [r3, #28]
 800e150:	68bb      	ldr	r3, [r7, #8]
 800e152:	4013      	ands	r3, r2
 800e154:	68ba      	ldr	r2, [r7, #8]
 800e156:	429a      	cmp	r2, r3
 800e158:	bf0c      	ite	eq
 800e15a:	2301      	moveq	r3, #1
 800e15c:	2300      	movne	r3, #0
 800e15e:	b2db      	uxtb	r3, r3
 800e160:	461a      	mov	r2, r3
 800e162:	79fb      	ldrb	r3, [r7, #7]
 800e164:	429a      	cmp	r2, r3
 800e166:	d0a0      	beq.n	800e0aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e172:	b480      	push	{r7}
 800e174:	b095      	sub	sp, #84	@ 0x54
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e180:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e182:	e853 3f00 	ldrex	r3, [r3]
 800e186:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e18a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e18e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	461a      	mov	r2, r3
 800e196:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e198:	643b      	str	r3, [r7, #64]	@ 0x40
 800e19a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e19c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e19e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e1a0:	e841 2300 	strex	r3, r2, [r1]
 800e1a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e1a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d1e6      	bne.n	800e17a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	3308      	adds	r3, #8
 800e1b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b4:	6a3b      	ldr	r3, [r7, #32]
 800e1b6:	e853 3f00 	ldrex	r3, [r3]
 800e1ba:	61fb      	str	r3, [r7, #28]
   return(result);
 800e1bc:	69fb      	ldr	r3, [r7, #28]
 800e1be:	f023 0301 	bic.w	r3, r3, #1
 800e1c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	3308      	adds	r3, #8
 800e1ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e1ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e1d4:	e841 2300 	strex	r3, r2, [r1]
 800e1d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1e5      	bne.n	800e1ac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e1e4:	2b01      	cmp	r3, #1
 800e1e6:	d118      	bne.n	800e21a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	e853 3f00 	ldrex	r3, [r3]
 800e1f4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	f023 0310 	bic.w	r3, r3, #16
 800e1fc:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	461a      	mov	r2, r3
 800e204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e206:	61bb      	str	r3, [r7, #24]
 800e208:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e20a:	6979      	ldr	r1, [r7, #20]
 800e20c:	69ba      	ldr	r2, [r7, #24]
 800e20e:	e841 2300 	strex	r3, r2, [r1]
 800e212:	613b      	str	r3, [r7, #16]
   return(result);
 800e214:	693b      	ldr	r3, [r7, #16]
 800e216:	2b00      	cmp	r3, #0
 800e218:	d1e6      	bne.n	800e1e8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2220      	movs	r2, #32
 800e21e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	2200      	movs	r2, #0
 800e226:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e22e:	bf00      	nop
 800e230:	3754      	adds	r7, #84	@ 0x54
 800e232:	46bd      	mov	sp, r7
 800e234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e238:	4770      	bx	lr
	...

0800e23c <__assert_func>:
 800e23c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e23e:	4614      	mov	r4, r2
 800e240:	461a      	mov	r2, r3
 800e242:	4b09      	ldr	r3, [pc, #36]	@ (800e268 <__assert_func+0x2c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	4605      	mov	r5, r0
 800e248:	68d8      	ldr	r0, [r3, #12]
 800e24a:	b954      	cbnz	r4, 800e262 <__assert_func+0x26>
 800e24c:	4b07      	ldr	r3, [pc, #28]	@ (800e26c <__assert_func+0x30>)
 800e24e:	461c      	mov	r4, r3
 800e250:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e254:	9100      	str	r1, [sp, #0]
 800e256:	462b      	mov	r3, r5
 800e258:	4905      	ldr	r1, [pc, #20]	@ (800e270 <__assert_func+0x34>)
 800e25a:	f000 f8b1 	bl	800e3c0 <fiprintf>
 800e25e:	f000 f9ac 	bl	800e5ba <abort>
 800e262:	4b04      	ldr	r3, [pc, #16]	@ (800e274 <__assert_func+0x38>)
 800e264:	e7f4      	b.n	800e250 <__assert_func+0x14>
 800e266:	bf00      	nop
 800e268:	20000074 	.word	0x20000074
 800e26c:	08010b27 	.word	0x08010b27
 800e270:	08010af9 	.word	0x08010af9
 800e274:	08010aec 	.word	0x08010aec

0800e278 <std>:
 800e278:	2300      	movs	r3, #0
 800e27a:	b510      	push	{r4, lr}
 800e27c:	4604      	mov	r4, r0
 800e27e:	e9c0 3300 	strd	r3, r3, [r0]
 800e282:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e286:	6083      	str	r3, [r0, #8]
 800e288:	8181      	strh	r1, [r0, #12]
 800e28a:	6643      	str	r3, [r0, #100]	@ 0x64
 800e28c:	81c2      	strh	r2, [r0, #14]
 800e28e:	6183      	str	r3, [r0, #24]
 800e290:	4619      	mov	r1, r3
 800e292:	2208      	movs	r2, #8
 800e294:	305c      	adds	r0, #92	@ 0x5c
 800e296:	f000 f906 	bl	800e4a6 <memset>
 800e29a:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d0 <std+0x58>)
 800e29c:	6263      	str	r3, [r4, #36]	@ 0x24
 800e29e:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d4 <std+0x5c>)
 800e2a0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e2a2:	4b0d      	ldr	r3, [pc, #52]	@ (800e2d8 <std+0x60>)
 800e2a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e2a6:	4b0d      	ldr	r3, [pc, #52]	@ (800e2dc <std+0x64>)
 800e2a8:	6323      	str	r3, [r4, #48]	@ 0x30
 800e2aa:	4b0d      	ldr	r3, [pc, #52]	@ (800e2e0 <std+0x68>)
 800e2ac:	6224      	str	r4, [r4, #32]
 800e2ae:	429c      	cmp	r4, r3
 800e2b0:	d006      	beq.n	800e2c0 <std+0x48>
 800e2b2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e2b6:	4294      	cmp	r4, r2
 800e2b8:	d002      	beq.n	800e2c0 <std+0x48>
 800e2ba:	33d0      	adds	r3, #208	@ 0xd0
 800e2bc:	429c      	cmp	r4, r3
 800e2be:	d105      	bne.n	800e2cc <std+0x54>
 800e2c0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e2c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2c8:	f000 b966 	b.w	800e598 <__retarget_lock_init_recursive>
 800e2cc:	bd10      	pop	{r4, pc}
 800e2ce:	bf00      	nop
 800e2d0:	0800e421 	.word	0x0800e421
 800e2d4:	0800e443 	.word	0x0800e443
 800e2d8:	0800e47b 	.word	0x0800e47b
 800e2dc:	0800e49f 	.word	0x0800e49f
 800e2e0:	20000698 	.word	0x20000698

0800e2e4 <stdio_exit_handler>:
 800e2e4:	4a02      	ldr	r2, [pc, #8]	@ (800e2f0 <stdio_exit_handler+0xc>)
 800e2e6:	4903      	ldr	r1, [pc, #12]	@ (800e2f4 <stdio_exit_handler+0x10>)
 800e2e8:	4803      	ldr	r0, [pc, #12]	@ (800e2f8 <stdio_exit_handler+0x14>)
 800e2ea:	f000 b87b 	b.w	800e3e4 <_fwalk_sglue>
 800e2ee:	bf00      	nop
 800e2f0:	20000068 	.word	0x20000068
 800e2f4:	0800ee61 	.word	0x0800ee61
 800e2f8:	20000078 	.word	0x20000078

0800e2fc <cleanup_stdio>:
 800e2fc:	6841      	ldr	r1, [r0, #4]
 800e2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800e330 <cleanup_stdio+0x34>)
 800e300:	4299      	cmp	r1, r3
 800e302:	b510      	push	{r4, lr}
 800e304:	4604      	mov	r4, r0
 800e306:	d001      	beq.n	800e30c <cleanup_stdio+0x10>
 800e308:	f000 fdaa 	bl	800ee60 <_fflush_r>
 800e30c:	68a1      	ldr	r1, [r4, #8]
 800e30e:	4b09      	ldr	r3, [pc, #36]	@ (800e334 <cleanup_stdio+0x38>)
 800e310:	4299      	cmp	r1, r3
 800e312:	d002      	beq.n	800e31a <cleanup_stdio+0x1e>
 800e314:	4620      	mov	r0, r4
 800e316:	f000 fda3 	bl	800ee60 <_fflush_r>
 800e31a:	68e1      	ldr	r1, [r4, #12]
 800e31c:	4b06      	ldr	r3, [pc, #24]	@ (800e338 <cleanup_stdio+0x3c>)
 800e31e:	4299      	cmp	r1, r3
 800e320:	d004      	beq.n	800e32c <cleanup_stdio+0x30>
 800e322:	4620      	mov	r0, r4
 800e324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e328:	f000 bd9a 	b.w	800ee60 <_fflush_r>
 800e32c:	bd10      	pop	{r4, pc}
 800e32e:	bf00      	nop
 800e330:	20000698 	.word	0x20000698
 800e334:	20000700 	.word	0x20000700
 800e338:	20000768 	.word	0x20000768

0800e33c <global_stdio_init.part.0>:
 800e33c:	b510      	push	{r4, lr}
 800e33e:	4b0b      	ldr	r3, [pc, #44]	@ (800e36c <global_stdio_init.part.0+0x30>)
 800e340:	4c0b      	ldr	r4, [pc, #44]	@ (800e370 <global_stdio_init.part.0+0x34>)
 800e342:	4a0c      	ldr	r2, [pc, #48]	@ (800e374 <global_stdio_init.part.0+0x38>)
 800e344:	601a      	str	r2, [r3, #0]
 800e346:	4620      	mov	r0, r4
 800e348:	2200      	movs	r2, #0
 800e34a:	2104      	movs	r1, #4
 800e34c:	f7ff ff94 	bl	800e278 <std>
 800e350:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e354:	2201      	movs	r2, #1
 800e356:	2109      	movs	r1, #9
 800e358:	f7ff ff8e 	bl	800e278 <std>
 800e35c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e360:	2202      	movs	r2, #2
 800e362:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e366:	2112      	movs	r1, #18
 800e368:	f7ff bf86 	b.w	800e278 <std>
 800e36c:	200007d0 	.word	0x200007d0
 800e370:	20000698 	.word	0x20000698
 800e374:	0800e2e5 	.word	0x0800e2e5

0800e378 <__sfp_lock_acquire>:
 800e378:	4801      	ldr	r0, [pc, #4]	@ (800e380 <__sfp_lock_acquire+0x8>)
 800e37a:	f000 b90e 	b.w	800e59a <__retarget_lock_acquire_recursive>
 800e37e:	bf00      	nop
 800e380:	200007d9 	.word	0x200007d9

0800e384 <__sfp_lock_release>:
 800e384:	4801      	ldr	r0, [pc, #4]	@ (800e38c <__sfp_lock_release+0x8>)
 800e386:	f000 b909 	b.w	800e59c <__retarget_lock_release_recursive>
 800e38a:	bf00      	nop
 800e38c:	200007d9 	.word	0x200007d9

0800e390 <__sinit>:
 800e390:	b510      	push	{r4, lr}
 800e392:	4604      	mov	r4, r0
 800e394:	f7ff fff0 	bl	800e378 <__sfp_lock_acquire>
 800e398:	6a23      	ldr	r3, [r4, #32]
 800e39a:	b11b      	cbz	r3, 800e3a4 <__sinit+0x14>
 800e39c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e3a0:	f7ff bff0 	b.w	800e384 <__sfp_lock_release>
 800e3a4:	4b04      	ldr	r3, [pc, #16]	@ (800e3b8 <__sinit+0x28>)
 800e3a6:	6223      	str	r3, [r4, #32]
 800e3a8:	4b04      	ldr	r3, [pc, #16]	@ (800e3bc <__sinit+0x2c>)
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d1f5      	bne.n	800e39c <__sinit+0xc>
 800e3b0:	f7ff ffc4 	bl	800e33c <global_stdio_init.part.0>
 800e3b4:	e7f2      	b.n	800e39c <__sinit+0xc>
 800e3b6:	bf00      	nop
 800e3b8:	0800e2fd 	.word	0x0800e2fd
 800e3bc:	200007d0 	.word	0x200007d0

0800e3c0 <fiprintf>:
 800e3c0:	b40e      	push	{r1, r2, r3}
 800e3c2:	b503      	push	{r0, r1, lr}
 800e3c4:	4601      	mov	r1, r0
 800e3c6:	ab03      	add	r3, sp, #12
 800e3c8:	4805      	ldr	r0, [pc, #20]	@ (800e3e0 <fiprintf+0x20>)
 800e3ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800e3ce:	6800      	ldr	r0, [r0, #0]
 800e3d0:	9301      	str	r3, [sp, #4]
 800e3d2:	f000 fa1b 	bl	800e80c <_vfiprintf_r>
 800e3d6:	b002      	add	sp, #8
 800e3d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e3dc:	b003      	add	sp, #12
 800e3de:	4770      	bx	lr
 800e3e0:	20000074 	.word	0x20000074

0800e3e4 <_fwalk_sglue>:
 800e3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e3e8:	4607      	mov	r7, r0
 800e3ea:	4688      	mov	r8, r1
 800e3ec:	4614      	mov	r4, r2
 800e3ee:	2600      	movs	r6, #0
 800e3f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e3f4:	f1b9 0901 	subs.w	r9, r9, #1
 800e3f8:	d505      	bpl.n	800e406 <_fwalk_sglue+0x22>
 800e3fa:	6824      	ldr	r4, [r4, #0]
 800e3fc:	2c00      	cmp	r4, #0
 800e3fe:	d1f7      	bne.n	800e3f0 <_fwalk_sglue+0xc>
 800e400:	4630      	mov	r0, r6
 800e402:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e406:	89ab      	ldrh	r3, [r5, #12]
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d907      	bls.n	800e41c <_fwalk_sglue+0x38>
 800e40c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e410:	3301      	adds	r3, #1
 800e412:	d003      	beq.n	800e41c <_fwalk_sglue+0x38>
 800e414:	4629      	mov	r1, r5
 800e416:	4638      	mov	r0, r7
 800e418:	47c0      	blx	r8
 800e41a:	4306      	orrs	r6, r0
 800e41c:	3568      	adds	r5, #104	@ 0x68
 800e41e:	e7e9      	b.n	800e3f4 <_fwalk_sglue+0x10>

0800e420 <__sread>:
 800e420:	b510      	push	{r4, lr}
 800e422:	460c      	mov	r4, r1
 800e424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e428:	f000 f868 	bl	800e4fc <_read_r>
 800e42c:	2800      	cmp	r0, #0
 800e42e:	bfab      	itete	ge
 800e430:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e432:	89a3      	ldrhlt	r3, [r4, #12]
 800e434:	181b      	addge	r3, r3, r0
 800e436:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e43a:	bfac      	ite	ge
 800e43c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e43e:	81a3      	strhlt	r3, [r4, #12]
 800e440:	bd10      	pop	{r4, pc}

0800e442 <__swrite>:
 800e442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e446:	461f      	mov	r7, r3
 800e448:	898b      	ldrh	r3, [r1, #12]
 800e44a:	05db      	lsls	r3, r3, #23
 800e44c:	4605      	mov	r5, r0
 800e44e:	460c      	mov	r4, r1
 800e450:	4616      	mov	r6, r2
 800e452:	d505      	bpl.n	800e460 <__swrite+0x1e>
 800e454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e458:	2302      	movs	r3, #2
 800e45a:	2200      	movs	r2, #0
 800e45c:	f000 f83c 	bl	800e4d8 <_lseek_r>
 800e460:	89a3      	ldrh	r3, [r4, #12]
 800e462:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e466:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e46a:	81a3      	strh	r3, [r4, #12]
 800e46c:	4632      	mov	r2, r6
 800e46e:	463b      	mov	r3, r7
 800e470:	4628      	mov	r0, r5
 800e472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e476:	f000 b853 	b.w	800e520 <_write_r>

0800e47a <__sseek>:
 800e47a:	b510      	push	{r4, lr}
 800e47c:	460c      	mov	r4, r1
 800e47e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e482:	f000 f829 	bl	800e4d8 <_lseek_r>
 800e486:	1c43      	adds	r3, r0, #1
 800e488:	89a3      	ldrh	r3, [r4, #12]
 800e48a:	bf15      	itete	ne
 800e48c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e48e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e492:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e496:	81a3      	strheq	r3, [r4, #12]
 800e498:	bf18      	it	ne
 800e49a:	81a3      	strhne	r3, [r4, #12]
 800e49c:	bd10      	pop	{r4, pc}

0800e49e <__sclose>:
 800e49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a2:	f000 b809 	b.w	800e4b8 <_close_r>

0800e4a6 <memset>:
 800e4a6:	4402      	add	r2, r0
 800e4a8:	4603      	mov	r3, r0
 800e4aa:	4293      	cmp	r3, r2
 800e4ac:	d100      	bne.n	800e4b0 <memset+0xa>
 800e4ae:	4770      	bx	lr
 800e4b0:	f803 1b01 	strb.w	r1, [r3], #1
 800e4b4:	e7f9      	b.n	800e4aa <memset+0x4>
	...

0800e4b8 <_close_r>:
 800e4b8:	b538      	push	{r3, r4, r5, lr}
 800e4ba:	4d06      	ldr	r5, [pc, #24]	@ (800e4d4 <_close_r+0x1c>)
 800e4bc:	2300      	movs	r3, #0
 800e4be:	4604      	mov	r4, r0
 800e4c0:	4608      	mov	r0, r1
 800e4c2:	602b      	str	r3, [r5, #0]
 800e4c4:	f7f8 f8ca 	bl	800665c <_close>
 800e4c8:	1c43      	adds	r3, r0, #1
 800e4ca:	d102      	bne.n	800e4d2 <_close_r+0x1a>
 800e4cc:	682b      	ldr	r3, [r5, #0]
 800e4ce:	b103      	cbz	r3, 800e4d2 <_close_r+0x1a>
 800e4d0:	6023      	str	r3, [r4, #0]
 800e4d2:	bd38      	pop	{r3, r4, r5, pc}
 800e4d4:	200007d4 	.word	0x200007d4

0800e4d8 <_lseek_r>:
 800e4d8:	b538      	push	{r3, r4, r5, lr}
 800e4da:	4d07      	ldr	r5, [pc, #28]	@ (800e4f8 <_lseek_r+0x20>)
 800e4dc:	4604      	mov	r4, r0
 800e4de:	4608      	mov	r0, r1
 800e4e0:	4611      	mov	r1, r2
 800e4e2:	2200      	movs	r2, #0
 800e4e4:	602a      	str	r2, [r5, #0]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	f7f8 f8df 	bl	80066aa <_lseek>
 800e4ec:	1c43      	adds	r3, r0, #1
 800e4ee:	d102      	bne.n	800e4f6 <_lseek_r+0x1e>
 800e4f0:	682b      	ldr	r3, [r5, #0]
 800e4f2:	b103      	cbz	r3, 800e4f6 <_lseek_r+0x1e>
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	bd38      	pop	{r3, r4, r5, pc}
 800e4f8:	200007d4 	.word	0x200007d4

0800e4fc <_read_r>:
 800e4fc:	b538      	push	{r3, r4, r5, lr}
 800e4fe:	4d07      	ldr	r5, [pc, #28]	@ (800e51c <_read_r+0x20>)
 800e500:	4604      	mov	r4, r0
 800e502:	4608      	mov	r0, r1
 800e504:	4611      	mov	r1, r2
 800e506:	2200      	movs	r2, #0
 800e508:	602a      	str	r2, [r5, #0]
 800e50a:	461a      	mov	r2, r3
 800e50c:	f7f8 f86d 	bl	80065ea <_read>
 800e510:	1c43      	adds	r3, r0, #1
 800e512:	d102      	bne.n	800e51a <_read_r+0x1e>
 800e514:	682b      	ldr	r3, [r5, #0]
 800e516:	b103      	cbz	r3, 800e51a <_read_r+0x1e>
 800e518:	6023      	str	r3, [r4, #0]
 800e51a:	bd38      	pop	{r3, r4, r5, pc}
 800e51c:	200007d4 	.word	0x200007d4

0800e520 <_write_r>:
 800e520:	b538      	push	{r3, r4, r5, lr}
 800e522:	4d07      	ldr	r5, [pc, #28]	@ (800e540 <_write_r+0x20>)
 800e524:	4604      	mov	r4, r0
 800e526:	4608      	mov	r0, r1
 800e528:	4611      	mov	r1, r2
 800e52a:	2200      	movs	r2, #0
 800e52c:	602a      	str	r2, [r5, #0]
 800e52e:	461a      	mov	r2, r3
 800e530:	f7f8 f878 	bl	8006624 <_write>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d102      	bne.n	800e53e <_write_r+0x1e>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	b103      	cbz	r3, 800e53e <_write_r+0x1e>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	bd38      	pop	{r3, r4, r5, pc}
 800e540:	200007d4 	.word	0x200007d4

0800e544 <__errno>:
 800e544:	4b01      	ldr	r3, [pc, #4]	@ (800e54c <__errno+0x8>)
 800e546:	6818      	ldr	r0, [r3, #0]
 800e548:	4770      	bx	lr
 800e54a:	bf00      	nop
 800e54c:	20000074 	.word	0x20000074

0800e550 <__libc_init_array>:
 800e550:	b570      	push	{r4, r5, r6, lr}
 800e552:	4d0d      	ldr	r5, [pc, #52]	@ (800e588 <__libc_init_array+0x38>)
 800e554:	4c0d      	ldr	r4, [pc, #52]	@ (800e58c <__libc_init_array+0x3c>)
 800e556:	1b64      	subs	r4, r4, r5
 800e558:	10a4      	asrs	r4, r4, #2
 800e55a:	2600      	movs	r6, #0
 800e55c:	42a6      	cmp	r6, r4
 800e55e:	d109      	bne.n	800e574 <__libc_init_array+0x24>
 800e560:	4d0b      	ldr	r5, [pc, #44]	@ (800e590 <__libc_init_array+0x40>)
 800e562:	4c0c      	ldr	r4, [pc, #48]	@ (800e594 <__libc_init_array+0x44>)
 800e564:	f000 fe10 	bl	800f188 <_init>
 800e568:	1b64      	subs	r4, r4, r5
 800e56a:	10a4      	asrs	r4, r4, #2
 800e56c:	2600      	movs	r6, #0
 800e56e:	42a6      	cmp	r6, r4
 800e570:	d105      	bne.n	800e57e <__libc_init_array+0x2e>
 800e572:	bd70      	pop	{r4, r5, r6, pc}
 800e574:	f855 3b04 	ldr.w	r3, [r5], #4
 800e578:	4798      	blx	r3
 800e57a:	3601      	adds	r6, #1
 800e57c:	e7ee      	b.n	800e55c <__libc_init_array+0xc>
 800e57e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e582:	4798      	blx	r3
 800e584:	3601      	adds	r6, #1
 800e586:	e7f2      	b.n	800e56e <__libc_init_array+0x1e>
 800e588:	08010b64 	.word	0x08010b64
 800e58c:	08010b64 	.word	0x08010b64
 800e590:	08010b64 	.word	0x08010b64
 800e594:	08010b68 	.word	0x08010b68

0800e598 <__retarget_lock_init_recursive>:
 800e598:	4770      	bx	lr

0800e59a <__retarget_lock_acquire_recursive>:
 800e59a:	4770      	bx	lr

0800e59c <__retarget_lock_release_recursive>:
 800e59c:	4770      	bx	lr

0800e59e <memcpy>:
 800e59e:	440a      	add	r2, r1
 800e5a0:	4291      	cmp	r1, r2
 800e5a2:	f100 33ff 	add.w	r3, r0, #4294967295
 800e5a6:	d100      	bne.n	800e5aa <memcpy+0xc>
 800e5a8:	4770      	bx	lr
 800e5aa:	b510      	push	{r4, lr}
 800e5ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e5b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e5b4:	4291      	cmp	r1, r2
 800e5b6:	d1f9      	bne.n	800e5ac <memcpy+0xe>
 800e5b8:	bd10      	pop	{r4, pc}

0800e5ba <abort>:
 800e5ba:	b508      	push	{r3, lr}
 800e5bc:	2006      	movs	r0, #6
 800e5be:	f000 fd33 	bl	800f028 <raise>
 800e5c2:	2001      	movs	r0, #1
 800e5c4:	f7f8 f806 	bl	80065d4 <_exit>

0800e5c8 <_free_r>:
 800e5c8:	b538      	push	{r3, r4, r5, lr}
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	2900      	cmp	r1, #0
 800e5ce:	d041      	beq.n	800e654 <_free_r+0x8c>
 800e5d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5d4:	1f0c      	subs	r4, r1, #4
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	bfb8      	it	lt
 800e5da:	18e4      	addlt	r4, r4, r3
 800e5dc:	f000 f8e0 	bl	800e7a0 <__malloc_lock>
 800e5e0:	4a1d      	ldr	r2, [pc, #116]	@ (800e658 <_free_r+0x90>)
 800e5e2:	6813      	ldr	r3, [r2, #0]
 800e5e4:	b933      	cbnz	r3, 800e5f4 <_free_r+0x2c>
 800e5e6:	6063      	str	r3, [r4, #4]
 800e5e8:	6014      	str	r4, [r2, #0]
 800e5ea:	4628      	mov	r0, r5
 800e5ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e5f0:	f000 b8dc 	b.w	800e7ac <__malloc_unlock>
 800e5f4:	42a3      	cmp	r3, r4
 800e5f6:	d908      	bls.n	800e60a <_free_r+0x42>
 800e5f8:	6820      	ldr	r0, [r4, #0]
 800e5fa:	1821      	adds	r1, r4, r0
 800e5fc:	428b      	cmp	r3, r1
 800e5fe:	bf01      	itttt	eq
 800e600:	6819      	ldreq	r1, [r3, #0]
 800e602:	685b      	ldreq	r3, [r3, #4]
 800e604:	1809      	addeq	r1, r1, r0
 800e606:	6021      	streq	r1, [r4, #0]
 800e608:	e7ed      	b.n	800e5e6 <_free_r+0x1e>
 800e60a:	461a      	mov	r2, r3
 800e60c:	685b      	ldr	r3, [r3, #4]
 800e60e:	b10b      	cbz	r3, 800e614 <_free_r+0x4c>
 800e610:	42a3      	cmp	r3, r4
 800e612:	d9fa      	bls.n	800e60a <_free_r+0x42>
 800e614:	6811      	ldr	r1, [r2, #0]
 800e616:	1850      	adds	r0, r2, r1
 800e618:	42a0      	cmp	r0, r4
 800e61a:	d10b      	bne.n	800e634 <_free_r+0x6c>
 800e61c:	6820      	ldr	r0, [r4, #0]
 800e61e:	4401      	add	r1, r0
 800e620:	1850      	adds	r0, r2, r1
 800e622:	4283      	cmp	r3, r0
 800e624:	6011      	str	r1, [r2, #0]
 800e626:	d1e0      	bne.n	800e5ea <_free_r+0x22>
 800e628:	6818      	ldr	r0, [r3, #0]
 800e62a:	685b      	ldr	r3, [r3, #4]
 800e62c:	6053      	str	r3, [r2, #4]
 800e62e:	4408      	add	r0, r1
 800e630:	6010      	str	r0, [r2, #0]
 800e632:	e7da      	b.n	800e5ea <_free_r+0x22>
 800e634:	d902      	bls.n	800e63c <_free_r+0x74>
 800e636:	230c      	movs	r3, #12
 800e638:	602b      	str	r3, [r5, #0]
 800e63a:	e7d6      	b.n	800e5ea <_free_r+0x22>
 800e63c:	6820      	ldr	r0, [r4, #0]
 800e63e:	1821      	adds	r1, r4, r0
 800e640:	428b      	cmp	r3, r1
 800e642:	bf04      	itt	eq
 800e644:	6819      	ldreq	r1, [r3, #0]
 800e646:	685b      	ldreq	r3, [r3, #4]
 800e648:	6063      	str	r3, [r4, #4]
 800e64a:	bf04      	itt	eq
 800e64c:	1809      	addeq	r1, r1, r0
 800e64e:	6021      	streq	r1, [r4, #0]
 800e650:	6054      	str	r4, [r2, #4]
 800e652:	e7ca      	b.n	800e5ea <_free_r+0x22>
 800e654:	bd38      	pop	{r3, r4, r5, pc}
 800e656:	bf00      	nop
 800e658:	200007e0 	.word	0x200007e0

0800e65c <sbrk_aligned>:
 800e65c:	b570      	push	{r4, r5, r6, lr}
 800e65e:	4e0f      	ldr	r6, [pc, #60]	@ (800e69c <sbrk_aligned+0x40>)
 800e660:	460c      	mov	r4, r1
 800e662:	6831      	ldr	r1, [r6, #0]
 800e664:	4605      	mov	r5, r0
 800e666:	b911      	cbnz	r1, 800e66e <sbrk_aligned+0x12>
 800e668:	f000 fcfa 	bl	800f060 <_sbrk_r>
 800e66c:	6030      	str	r0, [r6, #0]
 800e66e:	4621      	mov	r1, r4
 800e670:	4628      	mov	r0, r5
 800e672:	f000 fcf5 	bl	800f060 <_sbrk_r>
 800e676:	1c43      	adds	r3, r0, #1
 800e678:	d103      	bne.n	800e682 <sbrk_aligned+0x26>
 800e67a:	f04f 34ff 	mov.w	r4, #4294967295
 800e67e:	4620      	mov	r0, r4
 800e680:	bd70      	pop	{r4, r5, r6, pc}
 800e682:	1cc4      	adds	r4, r0, #3
 800e684:	f024 0403 	bic.w	r4, r4, #3
 800e688:	42a0      	cmp	r0, r4
 800e68a:	d0f8      	beq.n	800e67e <sbrk_aligned+0x22>
 800e68c:	1a21      	subs	r1, r4, r0
 800e68e:	4628      	mov	r0, r5
 800e690:	f000 fce6 	bl	800f060 <_sbrk_r>
 800e694:	3001      	adds	r0, #1
 800e696:	d1f2      	bne.n	800e67e <sbrk_aligned+0x22>
 800e698:	e7ef      	b.n	800e67a <sbrk_aligned+0x1e>
 800e69a:	bf00      	nop
 800e69c:	200007dc 	.word	0x200007dc

0800e6a0 <_malloc_r>:
 800e6a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e6a4:	1ccd      	adds	r5, r1, #3
 800e6a6:	f025 0503 	bic.w	r5, r5, #3
 800e6aa:	3508      	adds	r5, #8
 800e6ac:	2d0c      	cmp	r5, #12
 800e6ae:	bf38      	it	cc
 800e6b0:	250c      	movcc	r5, #12
 800e6b2:	2d00      	cmp	r5, #0
 800e6b4:	4606      	mov	r6, r0
 800e6b6:	db01      	blt.n	800e6bc <_malloc_r+0x1c>
 800e6b8:	42a9      	cmp	r1, r5
 800e6ba:	d904      	bls.n	800e6c6 <_malloc_r+0x26>
 800e6bc:	230c      	movs	r3, #12
 800e6be:	6033      	str	r3, [r6, #0]
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e79c <_malloc_r+0xfc>
 800e6ca:	f000 f869 	bl	800e7a0 <__malloc_lock>
 800e6ce:	f8d8 3000 	ldr.w	r3, [r8]
 800e6d2:	461c      	mov	r4, r3
 800e6d4:	bb44      	cbnz	r4, 800e728 <_malloc_r+0x88>
 800e6d6:	4629      	mov	r1, r5
 800e6d8:	4630      	mov	r0, r6
 800e6da:	f7ff ffbf 	bl	800e65c <sbrk_aligned>
 800e6de:	1c43      	adds	r3, r0, #1
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	d158      	bne.n	800e796 <_malloc_r+0xf6>
 800e6e4:	f8d8 4000 	ldr.w	r4, [r8]
 800e6e8:	4627      	mov	r7, r4
 800e6ea:	2f00      	cmp	r7, #0
 800e6ec:	d143      	bne.n	800e776 <_malloc_r+0xd6>
 800e6ee:	2c00      	cmp	r4, #0
 800e6f0:	d04b      	beq.n	800e78a <_malloc_r+0xea>
 800e6f2:	6823      	ldr	r3, [r4, #0]
 800e6f4:	4639      	mov	r1, r7
 800e6f6:	4630      	mov	r0, r6
 800e6f8:	eb04 0903 	add.w	r9, r4, r3
 800e6fc:	f000 fcb0 	bl	800f060 <_sbrk_r>
 800e700:	4581      	cmp	r9, r0
 800e702:	d142      	bne.n	800e78a <_malloc_r+0xea>
 800e704:	6821      	ldr	r1, [r4, #0]
 800e706:	1a6d      	subs	r5, r5, r1
 800e708:	4629      	mov	r1, r5
 800e70a:	4630      	mov	r0, r6
 800e70c:	f7ff ffa6 	bl	800e65c <sbrk_aligned>
 800e710:	3001      	adds	r0, #1
 800e712:	d03a      	beq.n	800e78a <_malloc_r+0xea>
 800e714:	6823      	ldr	r3, [r4, #0]
 800e716:	442b      	add	r3, r5
 800e718:	6023      	str	r3, [r4, #0]
 800e71a:	f8d8 3000 	ldr.w	r3, [r8]
 800e71e:	685a      	ldr	r2, [r3, #4]
 800e720:	bb62      	cbnz	r2, 800e77c <_malloc_r+0xdc>
 800e722:	f8c8 7000 	str.w	r7, [r8]
 800e726:	e00f      	b.n	800e748 <_malloc_r+0xa8>
 800e728:	6822      	ldr	r2, [r4, #0]
 800e72a:	1b52      	subs	r2, r2, r5
 800e72c:	d420      	bmi.n	800e770 <_malloc_r+0xd0>
 800e72e:	2a0b      	cmp	r2, #11
 800e730:	d917      	bls.n	800e762 <_malloc_r+0xc2>
 800e732:	1961      	adds	r1, r4, r5
 800e734:	42a3      	cmp	r3, r4
 800e736:	6025      	str	r5, [r4, #0]
 800e738:	bf18      	it	ne
 800e73a:	6059      	strne	r1, [r3, #4]
 800e73c:	6863      	ldr	r3, [r4, #4]
 800e73e:	bf08      	it	eq
 800e740:	f8c8 1000 	streq.w	r1, [r8]
 800e744:	5162      	str	r2, [r4, r5]
 800e746:	604b      	str	r3, [r1, #4]
 800e748:	4630      	mov	r0, r6
 800e74a:	f000 f82f 	bl	800e7ac <__malloc_unlock>
 800e74e:	f104 000b 	add.w	r0, r4, #11
 800e752:	1d23      	adds	r3, r4, #4
 800e754:	f020 0007 	bic.w	r0, r0, #7
 800e758:	1ac2      	subs	r2, r0, r3
 800e75a:	bf1c      	itt	ne
 800e75c:	1a1b      	subne	r3, r3, r0
 800e75e:	50a3      	strne	r3, [r4, r2]
 800e760:	e7af      	b.n	800e6c2 <_malloc_r+0x22>
 800e762:	6862      	ldr	r2, [r4, #4]
 800e764:	42a3      	cmp	r3, r4
 800e766:	bf0c      	ite	eq
 800e768:	f8c8 2000 	streq.w	r2, [r8]
 800e76c:	605a      	strne	r2, [r3, #4]
 800e76e:	e7eb      	b.n	800e748 <_malloc_r+0xa8>
 800e770:	4623      	mov	r3, r4
 800e772:	6864      	ldr	r4, [r4, #4]
 800e774:	e7ae      	b.n	800e6d4 <_malloc_r+0x34>
 800e776:	463c      	mov	r4, r7
 800e778:	687f      	ldr	r7, [r7, #4]
 800e77a:	e7b6      	b.n	800e6ea <_malloc_r+0x4a>
 800e77c:	461a      	mov	r2, r3
 800e77e:	685b      	ldr	r3, [r3, #4]
 800e780:	42a3      	cmp	r3, r4
 800e782:	d1fb      	bne.n	800e77c <_malloc_r+0xdc>
 800e784:	2300      	movs	r3, #0
 800e786:	6053      	str	r3, [r2, #4]
 800e788:	e7de      	b.n	800e748 <_malloc_r+0xa8>
 800e78a:	230c      	movs	r3, #12
 800e78c:	6033      	str	r3, [r6, #0]
 800e78e:	4630      	mov	r0, r6
 800e790:	f000 f80c 	bl	800e7ac <__malloc_unlock>
 800e794:	e794      	b.n	800e6c0 <_malloc_r+0x20>
 800e796:	6005      	str	r5, [r0, #0]
 800e798:	e7d6      	b.n	800e748 <_malloc_r+0xa8>
 800e79a:	bf00      	nop
 800e79c:	200007e0 	.word	0x200007e0

0800e7a0 <__malloc_lock>:
 800e7a0:	4801      	ldr	r0, [pc, #4]	@ (800e7a8 <__malloc_lock+0x8>)
 800e7a2:	f7ff befa 	b.w	800e59a <__retarget_lock_acquire_recursive>
 800e7a6:	bf00      	nop
 800e7a8:	200007d8 	.word	0x200007d8

0800e7ac <__malloc_unlock>:
 800e7ac:	4801      	ldr	r0, [pc, #4]	@ (800e7b4 <__malloc_unlock+0x8>)
 800e7ae:	f7ff bef5 	b.w	800e59c <__retarget_lock_release_recursive>
 800e7b2:	bf00      	nop
 800e7b4:	200007d8 	.word	0x200007d8

0800e7b8 <__sfputc_r>:
 800e7b8:	6893      	ldr	r3, [r2, #8]
 800e7ba:	3b01      	subs	r3, #1
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	b410      	push	{r4}
 800e7c0:	6093      	str	r3, [r2, #8]
 800e7c2:	da08      	bge.n	800e7d6 <__sfputc_r+0x1e>
 800e7c4:	6994      	ldr	r4, [r2, #24]
 800e7c6:	42a3      	cmp	r3, r4
 800e7c8:	db01      	blt.n	800e7ce <__sfputc_r+0x16>
 800e7ca:	290a      	cmp	r1, #10
 800e7cc:	d103      	bne.n	800e7d6 <__sfputc_r+0x1e>
 800e7ce:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7d2:	f000 bb6d 	b.w	800eeb0 <__swbuf_r>
 800e7d6:	6813      	ldr	r3, [r2, #0]
 800e7d8:	1c58      	adds	r0, r3, #1
 800e7da:	6010      	str	r0, [r2, #0]
 800e7dc:	7019      	strb	r1, [r3, #0]
 800e7de:	4608      	mov	r0, r1
 800e7e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7e4:	4770      	bx	lr

0800e7e6 <__sfputs_r>:
 800e7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7e8:	4606      	mov	r6, r0
 800e7ea:	460f      	mov	r7, r1
 800e7ec:	4614      	mov	r4, r2
 800e7ee:	18d5      	adds	r5, r2, r3
 800e7f0:	42ac      	cmp	r4, r5
 800e7f2:	d101      	bne.n	800e7f8 <__sfputs_r+0x12>
 800e7f4:	2000      	movs	r0, #0
 800e7f6:	e007      	b.n	800e808 <__sfputs_r+0x22>
 800e7f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7fc:	463a      	mov	r2, r7
 800e7fe:	4630      	mov	r0, r6
 800e800:	f7ff ffda 	bl	800e7b8 <__sfputc_r>
 800e804:	1c43      	adds	r3, r0, #1
 800e806:	d1f3      	bne.n	800e7f0 <__sfputs_r+0xa>
 800e808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e80c <_vfiprintf_r>:
 800e80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e810:	460d      	mov	r5, r1
 800e812:	b09d      	sub	sp, #116	@ 0x74
 800e814:	4614      	mov	r4, r2
 800e816:	4698      	mov	r8, r3
 800e818:	4606      	mov	r6, r0
 800e81a:	b118      	cbz	r0, 800e824 <_vfiprintf_r+0x18>
 800e81c:	6a03      	ldr	r3, [r0, #32]
 800e81e:	b90b      	cbnz	r3, 800e824 <_vfiprintf_r+0x18>
 800e820:	f7ff fdb6 	bl	800e390 <__sinit>
 800e824:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e826:	07d9      	lsls	r1, r3, #31
 800e828:	d405      	bmi.n	800e836 <_vfiprintf_r+0x2a>
 800e82a:	89ab      	ldrh	r3, [r5, #12]
 800e82c:	059a      	lsls	r2, r3, #22
 800e82e:	d402      	bmi.n	800e836 <_vfiprintf_r+0x2a>
 800e830:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e832:	f7ff feb2 	bl	800e59a <__retarget_lock_acquire_recursive>
 800e836:	89ab      	ldrh	r3, [r5, #12]
 800e838:	071b      	lsls	r3, r3, #28
 800e83a:	d501      	bpl.n	800e840 <_vfiprintf_r+0x34>
 800e83c:	692b      	ldr	r3, [r5, #16]
 800e83e:	b99b      	cbnz	r3, 800e868 <_vfiprintf_r+0x5c>
 800e840:	4629      	mov	r1, r5
 800e842:	4630      	mov	r0, r6
 800e844:	f000 fb72 	bl	800ef2c <__swsetup_r>
 800e848:	b170      	cbz	r0, 800e868 <_vfiprintf_r+0x5c>
 800e84a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e84c:	07dc      	lsls	r4, r3, #31
 800e84e:	d504      	bpl.n	800e85a <_vfiprintf_r+0x4e>
 800e850:	f04f 30ff 	mov.w	r0, #4294967295
 800e854:	b01d      	add	sp, #116	@ 0x74
 800e856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e85a:	89ab      	ldrh	r3, [r5, #12]
 800e85c:	0598      	lsls	r0, r3, #22
 800e85e:	d4f7      	bmi.n	800e850 <_vfiprintf_r+0x44>
 800e860:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e862:	f7ff fe9b 	bl	800e59c <__retarget_lock_release_recursive>
 800e866:	e7f3      	b.n	800e850 <_vfiprintf_r+0x44>
 800e868:	2300      	movs	r3, #0
 800e86a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e86c:	2320      	movs	r3, #32
 800e86e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e872:	f8cd 800c 	str.w	r8, [sp, #12]
 800e876:	2330      	movs	r3, #48	@ 0x30
 800e878:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ea28 <_vfiprintf_r+0x21c>
 800e87c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e880:	f04f 0901 	mov.w	r9, #1
 800e884:	4623      	mov	r3, r4
 800e886:	469a      	mov	sl, r3
 800e888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e88c:	b10a      	cbz	r2, 800e892 <_vfiprintf_r+0x86>
 800e88e:	2a25      	cmp	r2, #37	@ 0x25
 800e890:	d1f9      	bne.n	800e886 <_vfiprintf_r+0x7a>
 800e892:	ebba 0b04 	subs.w	fp, sl, r4
 800e896:	d00b      	beq.n	800e8b0 <_vfiprintf_r+0xa4>
 800e898:	465b      	mov	r3, fp
 800e89a:	4622      	mov	r2, r4
 800e89c:	4629      	mov	r1, r5
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f7ff ffa1 	bl	800e7e6 <__sfputs_r>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	f000 80a7 	beq.w	800e9f8 <_vfiprintf_r+0x1ec>
 800e8aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8ac:	445a      	add	r2, fp
 800e8ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 809f 	beq.w	800e9f8 <_vfiprintf_r+0x1ec>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8c4:	f10a 0a01 	add.w	sl, sl, #1
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	9307      	str	r3, [sp, #28]
 800e8cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e8d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e8d2:	4654      	mov	r4, sl
 800e8d4:	2205      	movs	r2, #5
 800e8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8da:	4853      	ldr	r0, [pc, #332]	@ (800ea28 <_vfiprintf_r+0x21c>)
 800e8dc:	f7f1 fc78 	bl	80001d0 <memchr>
 800e8e0:	9a04      	ldr	r2, [sp, #16]
 800e8e2:	b9d8      	cbnz	r0, 800e91c <_vfiprintf_r+0x110>
 800e8e4:	06d1      	lsls	r1, r2, #27
 800e8e6:	bf44      	itt	mi
 800e8e8:	2320      	movmi	r3, #32
 800e8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8ee:	0713      	lsls	r3, r2, #28
 800e8f0:	bf44      	itt	mi
 800e8f2:	232b      	movmi	r3, #43	@ 0x2b
 800e8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e8fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e8fe:	d015      	beq.n	800e92c <_vfiprintf_r+0x120>
 800e900:	9a07      	ldr	r2, [sp, #28]
 800e902:	4654      	mov	r4, sl
 800e904:	2000      	movs	r0, #0
 800e906:	f04f 0c0a 	mov.w	ip, #10
 800e90a:	4621      	mov	r1, r4
 800e90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e910:	3b30      	subs	r3, #48	@ 0x30
 800e912:	2b09      	cmp	r3, #9
 800e914:	d94b      	bls.n	800e9ae <_vfiprintf_r+0x1a2>
 800e916:	b1b0      	cbz	r0, 800e946 <_vfiprintf_r+0x13a>
 800e918:	9207      	str	r2, [sp, #28]
 800e91a:	e014      	b.n	800e946 <_vfiprintf_r+0x13a>
 800e91c:	eba0 0308 	sub.w	r3, r0, r8
 800e920:	fa09 f303 	lsl.w	r3, r9, r3
 800e924:	4313      	orrs	r3, r2
 800e926:	9304      	str	r3, [sp, #16]
 800e928:	46a2      	mov	sl, r4
 800e92a:	e7d2      	b.n	800e8d2 <_vfiprintf_r+0xc6>
 800e92c:	9b03      	ldr	r3, [sp, #12]
 800e92e:	1d19      	adds	r1, r3, #4
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	9103      	str	r1, [sp, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	bfbb      	ittet	lt
 800e938:	425b      	neglt	r3, r3
 800e93a:	f042 0202 	orrlt.w	r2, r2, #2
 800e93e:	9307      	strge	r3, [sp, #28]
 800e940:	9307      	strlt	r3, [sp, #28]
 800e942:	bfb8      	it	lt
 800e944:	9204      	strlt	r2, [sp, #16]
 800e946:	7823      	ldrb	r3, [r4, #0]
 800e948:	2b2e      	cmp	r3, #46	@ 0x2e
 800e94a:	d10a      	bne.n	800e962 <_vfiprintf_r+0x156>
 800e94c:	7863      	ldrb	r3, [r4, #1]
 800e94e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e950:	d132      	bne.n	800e9b8 <_vfiprintf_r+0x1ac>
 800e952:	9b03      	ldr	r3, [sp, #12]
 800e954:	1d1a      	adds	r2, r3, #4
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	9203      	str	r2, [sp, #12]
 800e95a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e95e:	3402      	adds	r4, #2
 800e960:	9305      	str	r3, [sp, #20]
 800e962:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ea38 <_vfiprintf_r+0x22c>
 800e966:	7821      	ldrb	r1, [r4, #0]
 800e968:	2203      	movs	r2, #3
 800e96a:	4650      	mov	r0, sl
 800e96c:	f7f1 fc30 	bl	80001d0 <memchr>
 800e970:	b138      	cbz	r0, 800e982 <_vfiprintf_r+0x176>
 800e972:	9b04      	ldr	r3, [sp, #16]
 800e974:	eba0 000a 	sub.w	r0, r0, sl
 800e978:	2240      	movs	r2, #64	@ 0x40
 800e97a:	4082      	lsls	r2, r0
 800e97c:	4313      	orrs	r3, r2
 800e97e:	3401      	adds	r4, #1
 800e980:	9304      	str	r3, [sp, #16]
 800e982:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e986:	4829      	ldr	r0, [pc, #164]	@ (800ea2c <_vfiprintf_r+0x220>)
 800e988:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e98c:	2206      	movs	r2, #6
 800e98e:	f7f1 fc1f 	bl	80001d0 <memchr>
 800e992:	2800      	cmp	r0, #0
 800e994:	d03f      	beq.n	800ea16 <_vfiprintf_r+0x20a>
 800e996:	4b26      	ldr	r3, [pc, #152]	@ (800ea30 <_vfiprintf_r+0x224>)
 800e998:	bb1b      	cbnz	r3, 800e9e2 <_vfiprintf_r+0x1d6>
 800e99a:	9b03      	ldr	r3, [sp, #12]
 800e99c:	3307      	adds	r3, #7
 800e99e:	f023 0307 	bic.w	r3, r3, #7
 800e9a2:	3308      	adds	r3, #8
 800e9a4:	9303      	str	r3, [sp, #12]
 800e9a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e9a8:	443b      	add	r3, r7
 800e9aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9ac:	e76a      	b.n	800e884 <_vfiprintf_r+0x78>
 800e9ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9b2:	460c      	mov	r4, r1
 800e9b4:	2001      	movs	r0, #1
 800e9b6:	e7a8      	b.n	800e90a <_vfiprintf_r+0xfe>
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	3401      	adds	r4, #1
 800e9bc:	9305      	str	r3, [sp, #20]
 800e9be:	4619      	mov	r1, r3
 800e9c0:	f04f 0c0a 	mov.w	ip, #10
 800e9c4:	4620      	mov	r0, r4
 800e9c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9ca:	3a30      	subs	r2, #48	@ 0x30
 800e9cc:	2a09      	cmp	r2, #9
 800e9ce:	d903      	bls.n	800e9d8 <_vfiprintf_r+0x1cc>
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d0c6      	beq.n	800e962 <_vfiprintf_r+0x156>
 800e9d4:	9105      	str	r1, [sp, #20]
 800e9d6:	e7c4      	b.n	800e962 <_vfiprintf_r+0x156>
 800e9d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9dc:	4604      	mov	r4, r0
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e7f0      	b.n	800e9c4 <_vfiprintf_r+0x1b8>
 800e9e2:	ab03      	add	r3, sp, #12
 800e9e4:	9300      	str	r3, [sp, #0]
 800e9e6:	462a      	mov	r2, r5
 800e9e8:	4b12      	ldr	r3, [pc, #72]	@ (800ea34 <_vfiprintf_r+0x228>)
 800e9ea:	a904      	add	r1, sp, #16
 800e9ec:	4630      	mov	r0, r6
 800e9ee:	f3af 8000 	nop.w
 800e9f2:	4607      	mov	r7, r0
 800e9f4:	1c78      	adds	r0, r7, #1
 800e9f6:	d1d6      	bne.n	800e9a6 <_vfiprintf_r+0x19a>
 800e9f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9fa:	07d9      	lsls	r1, r3, #31
 800e9fc:	d405      	bmi.n	800ea0a <_vfiprintf_r+0x1fe>
 800e9fe:	89ab      	ldrh	r3, [r5, #12]
 800ea00:	059a      	lsls	r2, r3, #22
 800ea02:	d402      	bmi.n	800ea0a <_vfiprintf_r+0x1fe>
 800ea04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea06:	f7ff fdc9 	bl	800e59c <__retarget_lock_release_recursive>
 800ea0a:	89ab      	ldrh	r3, [r5, #12]
 800ea0c:	065b      	lsls	r3, r3, #25
 800ea0e:	f53f af1f 	bmi.w	800e850 <_vfiprintf_r+0x44>
 800ea12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea14:	e71e      	b.n	800e854 <_vfiprintf_r+0x48>
 800ea16:	ab03      	add	r3, sp, #12
 800ea18:	9300      	str	r3, [sp, #0]
 800ea1a:	462a      	mov	r2, r5
 800ea1c:	4b05      	ldr	r3, [pc, #20]	@ (800ea34 <_vfiprintf_r+0x228>)
 800ea1e:	a904      	add	r1, sp, #16
 800ea20:	4630      	mov	r0, r6
 800ea22:	f000 f879 	bl	800eb18 <_printf_i>
 800ea26:	e7e4      	b.n	800e9f2 <_vfiprintf_r+0x1e6>
 800ea28:	08010b28 	.word	0x08010b28
 800ea2c:	08010b32 	.word	0x08010b32
 800ea30:	00000000 	.word	0x00000000
 800ea34:	0800e7e7 	.word	0x0800e7e7
 800ea38:	08010b2e 	.word	0x08010b2e

0800ea3c <_printf_common>:
 800ea3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea40:	4616      	mov	r6, r2
 800ea42:	4698      	mov	r8, r3
 800ea44:	688a      	ldr	r2, [r1, #8]
 800ea46:	690b      	ldr	r3, [r1, #16]
 800ea48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ea4c:	4293      	cmp	r3, r2
 800ea4e:	bfb8      	it	lt
 800ea50:	4613      	movlt	r3, r2
 800ea52:	6033      	str	r3, [r6, #0]
 800ea54:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ea58:	4607      	mov	r7, r0
 800ea5a:	460c      	mov	r4, r1
 800ea5c:	b10a      	cbz	r2, 800ea62 <_printf_common+0x26>
 800ea5e:	3301      	adds	r3, #1
 800ea60:	6033      	str	r3, [r6, #0]
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	0699      	lsls	r1, r3, #26
 800ea66:	bf42      	ittt	mi
 800ea68:	6833      	ldrmi	r3, [r6, #0]
 800ea6a:	3302      	addmi	r3, #2
 800ea6c:	6033      	strmi	r3, [r6, #0]
 800ea6e:	6825      	ldr	r5, [r4, #0]
 800ea70:	f015 0506 	ands.w	r5, r5, #6
 800ea74:	d106      	bne.n	800ea84 <_printf_common+0x48>
 800ea76:	f104 0a19 	add.w	sl, r4, #25
 800ea7a:	68e3      	ldr	r3, [r4, #12]
 800ea7c:	6832      	ldr	r2, [r6, #0]
 800ea7e:	1a9b      	subs	r3, r3, r2
 800ea80:	42ab      	cmp	r3, r5
 800ea82:	dc26      	bgt.n	800ead2 <_printf_common+0x96>
 800ea84:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ea88:	6822      	ldr	r2, [r4, #0]
 800ea8a:	3b00      	subs	r3, #0
 800ea8c:	bf18      	it	ne
 800ea8e:	2301      	movne	r3, #1
 800ea90:	0692      	lsls	r2, r2, #26
 800ea92:	d42b      	bmi.n	800eaec <_printf_common+0xb0>
 800ea94:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ea98:	4641      	mov	r1, r8
 800ea9a:	4638      	mov	r0, r7
 800ea9c:	47c8      	blx	r9
 800ea9e:	3001      	adds	r0, #1
 800eaa0:	d01e      	beq.n	800eae0 <_printf_common+0xa4>
 800eaa2:	6823      	ldr	r3, [r4, #0]
 800eaa4:	6922      	ldr	r2, [r4, #16]
 800eaa6:	f003 0306 	and.w	r3, r3, #6
 800eaaa:	2b04      	cmp	r3, #4
 800eaac:	bf02      	ittt	eq
 800eaae:	68e5      	ldreq	r5, [r4, #12]
 800eab0:	6833      	ldreq	r3, [r6, #0]
 800eab2:	1aed      	subeq	r5, r5, r3
 800eab4:	68a3      	ldr	r3, [r4, #8]
 800eab6:	bf0c      	ite	eq
 800eab8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eabc:	2500      	movne	r5, #0
 800eabe:	4293      	cmp	r3, r2
 800eac0:	bfc4      	itt	gt
 800eac2:	1a9b      	subgt	r3, r3, r2
 800eac4:	18ed      	addgt	r5, r5, r3
 800eac6:	2600      	movs	r6, #0
 800eac8:	341a      	adds	r4, #26
 800eaca:	42b5      	cmp	r5, r6
 800eacc:	d11a      	bne.n	800eb04 <_printf_common+0xc8>
 800eace:	2000      	movs	r0, #0
 800ead0:	e008      	b.n	800eae4 <_printf_common+0xa8>
 800ead2:	2301      	movs	r3, #1
 800ead4:	4652      	mov	r2, sl
 800ead6:	4641      	mov	r1, r8
 800ead8:	4638      	mov	r0, r7
 800eada:	47c8      	blx	r9
 800eadc:	3001      	adds	r0, #1
 800eade:	d103      	bne.n	800eae8 <_printf_common+0xac>
 800eae0:	f04f 30ff 	mov.w	r0, #4294967295
 800eae4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae8:	3501      	adds	r5, #1
 800eaea:	e7c6      	b.n	800ea7a <_printf_common+0x3e>
 800eaec:	18e1      	adds	r1, r4, r3
 800eaee:	1c5a      	adds	r2, r3, #1
 800eaf0:	2030      	movs	r0, #48	@ 0x30
 800eaf2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800eaf6:	4422      	add	r2, r4
 800eaf8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800eafc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800eb00:	3302      	adds	r3, #2
 800eb02:	e7c7      	b.n	800ea94 <_printf_common+0x58>
 800eb04:	2301      	movs	r3, #1
 800eb06:	4622      	mov	r2, r4
 800eb08:	4641      	mov	r1, r8
 800eb0a:	4638      	mov	r0, r7
 800eb0c:	47c8      	blx	r9
 800eb0e:	3001      	adds	r0, #1
 800eb10:	d0e6      	beq.n	800eae0 <_printf_common+0xa4>
 800eb12:	3601      	adds	r6, #1
 800eb14:	e7d9      	b.n	800eaca <_printf_common+0x8e>
	...

0800eb18 <_printf_i>:
 800eb18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800eb1c:	7e0f      	ldrb	r7, [r1, #24]
 800eb1e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800eb20:	2f78      	cmp	r7, #120	@ 0x78
 800eb22:	4691      	mov	r9, r2
 800eb24:	4680      	mov	r8, r0
 800eb26:	460c      	mov	r4, r1
 800eb28:	469a      	mov	sl, r3
 800eb2a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800eb2e:	d807      	bhi.n	800eb40 <_printf_i+0x28>
 800eb30:	2f62      	cmp	r7, #98	@ 0x62
 800eb32:	d80a      	bhi.n	800eb4a <_printf_i+0x32>
 800eb34:	2f00      	cmp	r7, #0
 800eb36:	f000 80d2 	beq.w	800ecde <_printf_i+0x1c6>
 800eb3a:	2f58      	cmp	r7, #88	@ 0x58
 800eb3c:	f000 80b9 	beq.w	800ecb2 <_printf_i+0x19a>
 800eb40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800eb44:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800eb48:	e03a      	b.n	800ebc0 <_printf_i+0xa8>
 800eb4a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800eb4e:	2b15      	cmp	r3, #21
 800eb50:	d8f6      	bhi.n	800eb40 <_printf_i+0x28>
 800eb52:	a101      	add	r1, pc, #4	@ (adr r1, 800eb58 <_printf_i+0x40>)
 800eb54:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eb58:	0800ebb1 	.word	0x0800ebb1
 800eb5c:	0800ebc5 	.word	0x0800ebc5
 800eb60:	0800eb41 	.word	0x0800eb41
 800eb64:	0800eb41 	.word	0x0800eb41
 800eb68:	0800eb41 	.word	0x0800eb41
 800eb6c:	0800eb41 	.word	0x0800eb41
 800eb70:	0800ebc5 	.word	0x0800ebc5
 800eb74:	0800eb41 	.word	0x0800eb41
 800eb78:	0800eb41 	.word	0x0800eb41
 800eb7c:	0800eb41 	.word	0x0800eb41
 800eb80:	0800eb41 	.word	0x0800eb41
 800eb84:	0800ecc5 	.word	0x0800ecc5
 800eb88:	0800ebef 	.word	0x0800ebef
 800eb8c:	0800ec7f 	.word	0x0800ec7f
 800eb90:	0800eb41 	.word	0x0800eb41
 800eb94:	0800eb41 	.word	0x0800eb41
 800eb98:	0800ece7 	.word	0x0800ece7
 800eb9c:	0800eb41 	.word	0x0800eb41
 800eba0:	0800ebef 	.word	0x0800ebef
 800eba4:	0800eb41 	.word	0x0800eb41
 800eba8:	0800eb41 	.word	0x0800eb41
 800ebac:	0800ec87 	.word	0x0800ec87
 800ebb0:	6833      	ldr	r3, [r6, #0]
 800ebb2:	1d1a      	adds	r2, r3, #4
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	6032      	str	r2, [r6, #0]
 800ebb8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ebbc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	e09d      	b.n	800ed00 <_printf_i+0x1e8>
 800ebc4:	6833      	ldr	r3, [r6, #0]
 800ebc6:	6820      	ldr	r0, [r4, #0]
 800ebc8:	1d19      	adds	r1, r3, #4
 800ebca:	6031      	str	r1, [r6, #0]
 800ebcc:	0606      	lsls	r6, r0, #24
 800ebce:	d501      	bpl.n	800ebd4 <_printf_i+0xbc>
 800ebd0:	681d      	ldr	r5, [r3, #0]
 800ebd2:	e003      	b.n	800ebdc <_printf_i+0xc4>
 800ebd4:	0645      	lsls	r5, r0, #25
 800ebd6:	d5fb      	bpl.n	800ebd0 <_printf_i+0xb8>
 800ebd8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ebdc:	2d00      	cmp	r5, #0
 800ebde:	da03      	bge.n	800ebe8 <_printf_i+0xd0>
 800ebe0:	232d      	movs	r3, #45	@ 0x2d
 800ebe2:	426d      	negs	r5, r5
 800ebe4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ebe8:	4859      	ldr	r0, [pc, #356]	@ (800ed50 <_printf_i+0x238>)
 800ebea:	230a      	movs	r3, #10
 800ebec:	e011      	b.n	800ec12 <_printf_i+0xfa>
 800ebee:	6821      	ldr	r1, [r4, #0]
 800ebf0:	6833      	ldr	r3, [r6, #0]
 800ebf2:	0608      	lsls	r0, r1, #24
 800ebf4:	f853 5b04 	ldr.w	r5, [r3], #4
 800ebf8:	d402      	bmi.n	800ec00 <_printf_i+0xe8>
 800ebfa:	0649      	lsls	r1, r1, #25
 800ebfc:	bf48      	it	mi
 800ebfe:	b2ad      	uxthmi	r5, r5
 800ec00:	2f6f      	cmp	r7, #111	@ 0x6f
 800ec02:	4853      	ldr	r0, [pc, #332]	@ (800ed50 <_printf_i+0x238>)
 800ec04:	6033      	str	r3, [r6, #0]
 800ec06:	bf14      	ite	ne
 800ec08:	230a      	movne	r3, #10
 800ec0a:	2308      	moveq	r3, #8
 800ec0c:	2100      	movs	r1, #0
 800ec0e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ec12:	6866      	ldr	r6, [r4, #4]
 800ec14:	60a6      	str	r6, [r4, #8]
 800ec16:	2e00      	cmp	r6, #0
 800ec18:	bfa2      	ittt	ge
 800ec1a:	6821      	ldrge	r1, [r4, #0]
 800ec1c:	f021 0104 	bicge.w	r1, r1, #4
 800ec20:	6021      	strge	r1, [r4, #0]
 800ec22:	b90d      	cbnz	r5, 800ec28 <_printf_i+0x110>
 800ec24:	2e00      	cmp	r6, #0
 800ec26:	d04b      	beq.n	800ecc0 <_printf_i+0x1a8>
 800ec28:	4616      	mov	r6, r2
 800ec2a:	fbb5 f1f3 	udiv	r1, r5, r3
 800ec2e:	fb03 5711 	mls	r7, r3, r1, r5
 800ec32:	5dc7      	ldrb	r7, [r0, r7]
 800ec34:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ec38:	462f      	mov	r7, r5
 800ec3a:	42bb      	cmp	r3, r7
 800ec3c:	460d      	mov	r5, r1
 800ec3e:	d9f4      	bls.n	800ec2a <_printf_i+0x112>
 800ec40:	2b08      	cmp	r3, #8
 800ec42:	d10b      	bne.n	800ec5c <_printf_i+0x144>
 800ec44:	6823      	ldr	r3, [r4, #0]
 800ec46:	07df      	lsls	r7, r3, #31
 800ec48:	d508      	bpl.n	800ec5c <_printf_i+0x144>
 800ec4a:	6923      	ldr	r3, [r4, #16]
 800ec4c:	6861      	ldr	r1, [r4, #4]
 800ec4e:	4299      	cmp	r1, r3
 800ec50:	bfde      	ittt	le
 800ec52:	2330      	movle	r3, #48	@ 0x30
 800ec54:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ec58:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ec5c:	1b92      	subs	r2, r2, r6
 800ec5e:	6122      	str	r2, [r4, #16]
 800ec60:	f8cd a000 	str.w	sl, [sp]
 800ec64:	464b      	mov	r3, r9
 800ec66:	aa03      	add	r2, sp, #12
 800ec68:	4621      	mov	r1, r4
 800ec6a:	4640      	mov	r0, r8
 800ec6c:	f7ff fee6 	bl	800ea3c <_printf_common>
 800ec70:	3001      	adds	r0, #1
 800ec72:	d14a      	bne.n	800ed0a <_printf_i+0x1f2>
 800ec74:	f04f 30ff 	mov.w	r0, #4294967295
 800ec78:	b004      	add	sp, #16
 800ec7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec7e:	6823      	ldr	r3, [r4, #0]
 800ec80:	f043 0320 	orr.w	r3, r3, #32
 800ec84:	6023      	str	r3, [r4, #0]
 800ec86:	4833      	ldr	r0, [pc, #204]	@ (800ed54 <_printf_i+0x23c>)
 800ec88:	2778      	movs	r7, #120	@ 0x78
 800ec8a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ec8e:	6823      	ldr	r3, [r4, #0]
 800ec90:	6831      	ldr	r1, [r6, #0]
 800ec92:	061f      	lsls	r7, r3, #24
 800ec94:	f851 5b04 	ldr.w	r5, [r1], #4
 800ec98:	d402      	bmi.n	800eca0 <_printf_i+0x188>
 800ec9a:	065f      	lsls	r7, r3, #25
 800ec9c:	bf48      	it	mi
 800ec9e:	b2ad      	uxthmi	r5, r5
 800eca0:	6031      	str	r1, [r6, #0]
 800eca2:	07d9      	lsls	r1, r3, #31
 800eca4:	bf44      	itt	mi
 800eca6:	f043 0320 	orrmi.w	r3, r3, #32
 800ecaa:	6023      	strmi	r3, [r4, #0]
 800ecac:	b11d      	cbz	r5, 800ecb6 <_printf_i+0x19e>
 800ecae:	2310      	movs	r3, #16
 800ecb0:	e7ac      	b.n	800ec0c <_printf_i+0xf4>
 800ecb2:	4827      	ldr	r0, [pc, #156]	@ (800ed50 <_printf_i+0x238>)
 800ecb4:	e7e9      	b.n	800ec8a <_printf_i+0x172>
 800ecb6:	6823      	ldr	r3, [r4, #0]
 800ecb8:	f023 0320 	bic.w	r3, r3, #32
 800ecbc:	6023      	str	r3, [r4, #0]
 800ecbe:	e7f6      	b.n	800ecae <_printf_i+0x196>
 800ecc0:	4616      	mov	r6, r2
 800ecc2:	e7bd      	b.n	800ec40 <_printf_i+0x128>
 800ecc4:	6833      	ldr	r3, [r6, #0]
 800ecc6:	6825      	ldr	r5, [r4, #0]
 800ecc8:	6961      	ldr	r1, [r4, #20]
 800ecca:	1d18      	adds	r0, r3, #4
 800eccc:	6030      	str	r0, [r6, #0]
 800ecce:	062e      	lsls	r6, r5, #24
 800ecd0:	681b      	ldr	r3, [r3, #0]
 800ecd2:	d501      	bpl.n	800ecd8 <_printf_i+0x1c0>
 800ecd4:	6019      	str	r1, [r3, #0]
 800ecd6:	e002      	b.n	800ecde <_printf_i+0x1c6>
 800ecd8:	0668      	lsls	r0, r5, #25
 800ecda:	d5fb      	bpl.n	800ecd4 <_printf_i+0x1bc>
 800ecdc:	8019      	strh	r1, [r3, #0]
 800ecde:	2300      	movs	r3, #0
 800ece0:	6123      	str	r3, [r4, #16]
 800ece2:	4616      	mov	r6, r2
 800ece4:	e7bc      	b.n	800ec60 <_printf_i+0x148>
 800ece6:	6833      	ldr	r3, [r6, #0]
 800ece8:	1d1a      	adds	r2, r3, #4
 800ecea:	6032      	str	r2, [r6, #0]
 800ecec:	681e      	ldr	r6, [r3, #0]
 800ecee:	6862      	ldr	r2, [r4, #4]
 800ecf0:	2100      	movs	r1, #0
 800ecf2:	4630      	mov	r0, r6
 800ecf4:	f7f1 fa6c 	bl	80001d0 <memchr>
 800ecf8:	b108      	cbz	r0, 800ecfe <_printf_i+0x1e6>
 800ecfa:	1b80      	subs	r0, r0, r6
 800ecfc:	6060      	str	r0, [r4, #4]
 800ecfe:	6863      	ldr	r3, [r4, #4]
 800ed00:	6123      	str	r3, [r4, #16]
 800ed02:	2300      	movs	r3, #0
 800ed04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ed08:	e7aa      	b.n	800ec60 <_printf_i+0x148>
 800ed0a:	6923      	ldr	r3, [r4, #16]
 800ed0c:	4632      	mov	r2, r6
 800ed0e:	4649      	mov	r1, r9
 800ed10:	4640      	mov	r0, r8
 800ed12:	47d0      	blx	sl
 800ed14:	3001      	adds	r0, #1
 800ed16:	d0ad      	beq.n	800ec74 <_printf_i+0x15c>
 800ed18:	6823      	ldr	r3, [r4, #0]
 800ed1a:	079b      	lsls	r3, r3, #30
 800ed1c:	d413      	bmi.n	800ed46 <_printf_i+0x22e>
 800ed1e:	68e0      	ldr	r0, [r4, #12]
 800ed20:	9b03      	ldr	r3, [sp, #12]
 800ed22:	4298      	cmp	r0, r3
 800ed24:	bfb8      	it	lt
 800ed26:	4618      	movlt	r0, r3
 800ed28:	e7a6      	b.n	800ec78 <_printf_i+0x160>
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	4632      	mov	r2, r6
 800ed2e:	4649      	mov	r1, r9
 800ed30:	4640      	mov	r0, r8
 800ed32:	47d0      	blx	sl
 800ed34:	3001      	adds	r0, #1
 800ed36:	d09d      	beq.n	800ec74 <_printf_i+0x15c>
 800ed38:	3501      	adds	r5, #1
 800ed3a:	68e3      	ldr	r3, [r4, #12]
 800ed3c:	9903      	ldr	r1, [sp, #12]
 800ed3e:	1a5b      	subs	r3, r3, r1
 800ed40:	42ab      	cmp	r3, r5
 800ed42:	dcf2      	bgt.n	800ed2a <_printf_i+0x212>
 800ed44:	e7eb      	b.n	800ed1e <_printf_i+0x206>
 800ed46:	2500      	movs	r5, #0
 800ed48:	f104 0619 	add.w	r6, r4, #25
 800ed4c:	e7f5      	b.n	800ed3a <_printf_i+0x222>
 800ed4e:	bf00      	nop
 800ed50:	08010b39 	.word	0x08010b39
 800ed54:	08010b4a 	.word	0x08010b4a

0800ed58 <__sflush_r>:
 800ed58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed60:	0716      	lsls	r6, r2, #28
 800ed62:	4605      	mov	r5, r0
 800ed64:	460c      	mov	r4, r1
 800ed66:	d454      	bmi.n	800ee12 <__sflush_r+0xba>
 800ed68:	684b      	ldr	r3, [r1, #4]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	dc02      	bgt.n	800ed74 <__sflush_r+0x1c>
 800ed6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ed70:	2b00      	cmp	r3, #0
 800ed72:	dd48      	ble.n	800ee06 <__sflush_r+0xae>
 800ed74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ed76:	2e00      	cmp	r6, #0
 800ed78:	d045      	beq.n	800ee06 <__sflush_r+0xae>
 800ed7a:	2300      	movs	r3, #0
 800ed7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ed80:	682f      	ldr	r7, [r5, #0]
 800ed82:	6a21      	ldr	r1, [r4, #32]
 800ed84:	602b      	str	r3, [r5, #0]
 800ed86:	d030      	beq.n	800edea <__sflush_r+0x92>
 800ed88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ed8a:	89a3      	ldrh	r3, [r4, #12]
 800ed8c:	0759      	lsls	r1, r3, #29
 800ed8e:	d505      	bpl.n	800ed9c <__sflush_r+0x44>
 800ed90:	6863      	ldr	r3, [r4, #4]
 800ed92:	1ad2      	subs	r2, r2, r3
 800ed94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ed96:	b10b      	cbz	r3, 800ed9c <__sflush_r+0x44>
 800ed98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ed9a:	1ad2      	subs	r2, r2, r3
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eda0:	6a21      	ldr	r1, [r4, #32]
 800eda2:	4628      	mov	r0, r5
 800eda4:	47b0      	blx	r6
 800eda6:	1c43      	adds	r3, r0, #1
 800eda8:	89a3      	ldrh	r3, [r4, #12]
 800edaa:	d106      	bne.n	800edba <__sflush_r+0x62>
 800edac:	6829      	ldr	r1, [r5, #0]
 800edae:	291d      	cmp	r1, #29
 800edb0:	d82b      	bhi.n	800ee0a <__sflush_r+0xb2>
 800edb2:	4a2a      	ldr	r2, [pc, #168]	@ (800ee5c <__sflush_r+0x104>)
 800edb4:	410a      	asrs	r2, r1
 800edb6:	07d6      	lsls	r6, r2, #31
 800edb8:	d427      	bmi.n	800ee0a <__sflush_r+0xb2>
 800edba:	2200      	movs	r2, #0
 800edbc:	6062      	str	r2, [r4, #4]
 800edbe:	04d9      	lsls	r1, r3, #19
 800edc0:	6922      	ldr	r2, [r4, #16]
 800edc2:	6022      	str	r2, [r4, #0]
 800edc4:	d504      	bpl.n	800edd0 <__sflush_r+0x78>
 800edc6:	1c42      	adds	r2, r0, #1
 800edc8:	d101      	bne.n	800edce <__sflush_r+0x76>
 800edca:	682b      	ldr	r3, [r5, #0]
 800edcc:	b903      	cbnz	r3, 800edd0 <__sflush_r+0x78>
 800edce:	6560      	str	r0, [r4, #84]	@ 0x54
 800edd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800edd2:	602f      	str	r7, [r5, #0]
 800edd4:	b1b9      	cbz	r1, 800ee06 <__sflush_r+0xae>
 800edd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800edda:	4299      	cmp	r1, r3
 800eddc:	d002      	beq.n	800ede4 <__sflush_r+0x8c>
 800edde:	4628      	mov	r0, r5
 800ede0:	f7ff fbf2 	bl	800e5c8 <_free_r>
 800ede4:	2300      	movs	r3, #0
 800ede6:	6363      	str	r3, [r4, #52]	@ 0x34
 800ede8:	e00d      	b.n	800ee06 <__sflush_r+0xae>
 800edea:	2301      	movs	r3, #1
 800edec:	4628      	mov	r0, r5
 800edee:	47b0      	blx	r6
 800edf0:	4602      	mov	r2, r0
 800edf2:	1c50      	adds	r0, r2, #1
 800edf4:	d1c9      	bne.n	800ed8a <__sflush_r+0x32>
 800edf6:	682b      	ldr	r3, [r5, #0]
 800edf8:	2b00      	cmp	r3, #0
 800edfa:	d0c6      	beq.n	800ed8a <__sflush_r+0x32>
 800edfc:	2b1d      	cmp	r3, #29
 800edfe:	d001      	beq.n	800ee04 <__sflush_r+0xac>
 800ee00:	2b16      	cmp	r3, #22
 800ee02:	d11e      	bne.n	800ee42 <__sflush_r+0xea>
 800ee04:	602f      	str	r7, [r5, #0]
 800ee06:	2000      	movs	r0, #0
 800ee08:	e022      	b.n	800ee50 <__sflush_r+0xf8>
 800ee0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee0e:	b21b      	sxth	r3, r3
 800ee10:	e01b      	b.n	800ee4a <__sflush_r+0xf2>
 800ee12:	690f      	ldr	r7, [r1, #16]
 800ee14:	2f00      	cmp	r7, #0
 800ee16:	d0f6      	beq.n	800ee06 <__sflush_r+0xae>
 800ee18:	0793      	lsls	r3, r2, #30
 800ee1a:	680e      	ldr	r6, [r1, #0]
 800ee1c:	bf08      	it	eq
 800ee1e:	694b      	ldreq	r3, [r1, #20]
 800ee20:	600f      	str	r7, [r1, #0]
 800ee22:	bf18      	it	ne
 800ee24:	2300      	movne	r3, #0
 800ee26:	eba6 0807 	sub.w	r8, r6, r7
 800ee2a:	608b      	str	r3, [r1, #8]
 800ee2c:	f1b8 0f00 	cmp.w	r8, #0
 800ee30:	dde9      	ble.n	800ee06 <__sflush_r+0xae>
 800ee32:	6a21      	ldr	r1, [r4, #32]
 800ee34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ee36:	4643      	mov	r3, r8
 800ee38:	463a      	mov	r2, r7
 800ee3a:	4628      	mov	r0, r5
 800ee3c:	47b0      	blx	r6
 800ee3e:	2800      	cmp	r0, #0
 800ee40:	dc08      	bgt.n	800ee54 <__sflush_r+0xfc>
 800ee42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee4a:	81a3      	strh	r3, [r4, #12]
 800ee4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee54:	4407      	add	r7, r0
 800ee56:	eba8 0800 	sub.w	r8, r8, r0
 800ee5a:	e7e7      	b.n	800ee2c <__sflush_r+0xd4>
 800ee5c:	dfbffffe 	.word	0xdfbffffe

0800ee60 <_fflush_r>:
 800ee60:	b538      	push	{r3, r4, r5, lr}
 800ee62:	690b      	ldr	r3, [r1, #16]
 800ee64:	4605      	mov	r5, r0
 800ee66:	460c      	mov	r4, r1
 800ee68:	b913      	cbnz	r3, 800ee70 <_fflush_r+0x10>
 800ee6a:	2500      	movs	r5, #0
 800ee6c:	4628      	mov	r0, r5
 800ee6e:	bd38      	pop	{r3, r4, r5, pc}
 800ee70:	b118      	cbz	r0, 800ee7a <_fflush_r+0x1a>
 800ee72:	6a03      	ldr	r3, [r0, #32]
 800ee74:	b90b      	cbnz	r3, 800ee7a <_fflush_r+0x1a>
 800ee76:	f7ff fa8b 	bl	800e390 <__sinit>
 800ee7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d0f3      	beq.n	800ee6a <_fflush_r+0xa>
 800ee82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ee84:	07d0      	lsls	r0, r2, #31
 800ee86:	d404      	bmi.n	800ee92 <_fflush_r+0x32>
 800ee88:	0599      	lsls	r1, r3, #22
 800ee8a:	d402      	bmi.n	800ee92 <_fflush_r+0x32>
 800ee8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ee8e:	f7ff fb84 	bl	800e59a <__retarget_lock_acquire_recursive>
 800ee92:	4628      	mov	r0, r5
 800ee94:	4621      	mov	r1, r4
 800ee96:	f7ff ff5f 	bl	800ed58 <__sflush_r>
 800ee9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ee9c:	07da      	lsls	r2, r3, #31
 800ee9e:	4605      	mov	r5, r0
 800eea0:	d4e4      	bmi.n	800ee6c <_fflush_r+0xc>
 800eea2:	89a3      	ldrh	r3, [r4, #12]
 800eea4:	059b      	lsls	r3, r3, #22
 800eea6:	d4e1      	bmi.n	800ee6c <_fflush_r+0xc>
 800eea8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800eeaa:	f7ff fb77 	bl	800e59c <__retarget_lock_release_recursive>
 800eeae:	e7dd      	b.n	800ee6c <_fflush_r+0xc>

0800eeb0 <__swbuf_r>:
 800eeb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eeb2:	460e      	mov	r6, r1
 800eeb4:	4614      	mov	r4, r2
 800eeb6:	4605      	mov	r5, r0
 800eeb8:	b118      	cbz	r0, 800eec2 <__swbuf_r+0x12>
 800eeba:	6a03      	ldr	r3, [r0, #32]
 800eebc:	b90b      	cbnz	r3, 800eec2 <__swbuf_r+0x12>
 800eebe:	f7ff fa67 	bl	800e390 <__sinit>
 800eec2:	69a3      	ldr	r3, [r4, #24]
 800eec4:	60a3      	str	r3, [r4, #8]
 800eec6:	89a3      	ldrh	r3, [r4, #12]
 800eec8:	071a      	lsls	r2, r3, #28
 800eeca:	d501      	bpl.n	800eed0 <__swbuf_r+0x20>
 800eecc:	6923      	ldr	r3, [r4, #16]
 800eece:	b943      	cbnz	r3, 800eee2 <__swbuf_r+0x32>
 800eed0:	4621      	mov	r1, r4
 800eed2:	4628      	mov	r0, r5
 800eed4:	f000 f82a 	bl	800ef2c <__swsetup_r>
 800eed8:	b118      	cbz	r0, 800eee2 <__swbuf_r+0x32>
 800eeda:	f04f 37ff 	mov.w	r7, #4294967295
 800eede:	4638      	mov	r0, r7
 800eee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eee2:	6823      	ldr	r3, [r4, #0]
 800eee4:	6922      	ldr	r2, [r4, #16]
 800eee6:	1a98      	subs	r0, r3, r2
 800eee8:	6963      	ldr	r3, [r4, #20]
 800eeea:	b2f6      	uxtb	r6, r6
 800eeec:	4283      	cmp	r3, r0
 800eeee:	4637      	mov	r7, r6
 800eef0:	dc05      	bgt.n	800eefe <__swbuf_r+0x4e>
 800eef2:	4621      	mov	r1, r4
 800eef4:	4628      	mov	r0, r5
 800eef6:	f7ff ffb3 	bl	800ee60 <_fflush_r>
 800eefa:	2800      	cmp	r0, #0
 800eefc:	d1ed      	bne.n	800eeda <__swbuf_r+0x2a>
 800eefe:	68a3      	ldr	r3, [r4, #8]
 800ef00:	3b01      	subs	r3, #1
 800ef02:	60a3      	str	r3, [r4, #8]
 800ef04:	6823      	ldr	r3, [r4, #0]
 800ef06:	1c5a      	adds	r2, r3, #1
 800ef08:	6022      	str	r2, [r4, #0]
 800ef0a:	701e      	strb	r6, [r3, #0]
 800ef0c:	6962      	ldr	r2, [r4, #20]
 800ef0e:	1c43      	adds	r3, r0, #1
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d004      	beq.n	800ef1e <__swbuf_r+0x6e>
 800ef14:	89a3      	ldrh	r3, [r4, #12]
 800ef16:	07db      	lsls	r3, r3, #31
 800ef18:	d5e1      	bpl.n	800eede <__swbuf_r+0x2e>
 800ef1a:	2e0a      	cmp	r6, #10
 800ef1c:	d1df      	bne.n	800eede <__swbuf_r+0x2e>
 800ef1e:	4621      	mov	r1, r4
 800ef20:	4628      	mov	r0, r5
 800ef22:	f7ff ff9d 	bl	800ee60 <_fflush_r>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d0d9      	beq.n	800eede <__swbuf_r+0x2e>
 800ef2a:	e7d6      	b.n	800eeda <__swbuf_r+0x2a>

0800ef2c <__swsetup_r>:
 800ef2c:	b538      	push	{r3, r4, r5, lr}
 800ef2e:	4b29      	ldr	r3, [pc, #164]	@ (800efd4 <__swsetup_r+0xa8>)
 800ef30:	4605      	mov	r5, r0
 800ef32:	6818      	ldr	r0, [r3, #0]
 800ef34:	460c      	mov	r4, r1
 800ef36:	b118      	cbz	r0, 800ef40 <__swsetup_r+0x14>
 800ef38:	6a03      	ldr	r3, [r0, #32]
 800ef3a:	b90b      	cbnz	r3, 800ef40 <__swsetup_r+0x14>
 800ef3c:	f7ff fa28 	bl	800e390 <__sinit>
 800ef40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ef44:	0719      	lsls	r1, r3, #28
 800ef46:	d422      	bmi.n	800ef8e <__swsetup_r+0x62>
 800ef48:	06da      	lsls	r2, r3, #27
 800ef4a:	d407      	bmi.n	800ef5c <__swsetup_r+0x30>
 800ef4c:	2209      	movs	r2, #9
 800ef4e:	602a      	str	r2, [r5, #0]
 800ef50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ef54:	81a3      	strh	r3, [r4, #12]
 800ef56:	f04f 30ff 	mov.w	r0, #4294967295
 800ef5a:	e033      	b.n	800efc4 <__swsetup_r+0x98>
 800ef5c:	0758      	lsls	r0, r3, #29
 800ef5e:	d512      	bpl.n	800ef86 <__swsetup_r+0x5a>
 800ef60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef62:	b141      	cbz	r1, 800ef76 <__swsetup_r+0x4a>
 800ef64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef68:	4299      	cmp	r1, r3
 800ef6a:	d002      	beq.n	800ef72 <__swsetup_r+0x46>
 800ef6c:	4628      	mov	r0, r5
 800ef6e:	f7ff fb2b 	bl	800e5c8 <_free_r>
 800ef72:	2300      	movs	r3, #0
 800ef74:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef76:	89a3      	ldrh	r3, [r4, #12]
 800ef78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ef7c:	81a3      	strh	r3, [r4, #12]
 800ef7e:	2300      	movs	r3, #0
 800ef80:	6063      	str	r3, [r4, #4]
 800ef82:	6923      	ldr	r3, [r4, #16]
 800ef84:	6023      	str	r3, [r4, #0]
 800ef86:	89a3      	ldrh	r3, [r4, #12]
 800ef88:	f043 0308 	orr.w	r3, r3, #8
 800ef8c:	81a3      	strh	r3, [r4, #12]
 800ef8e:	6923      	ldr	r3, [r4, #16]
 800ef90:	b94b      	cbnz	r3, 800efa6 <__swsetup_r+0x7a>
 800ef92:	89a3      	ldrh	r3, [r4, #12]
 800ef94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ef98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ef9c:	d003      	beq.n	800efa6 <__swsetup_r+0x7a>
 800ef9e:	4621      	mov	r1, r4
 800efa0:	4628      	mov	r0, r5
 800efa2:	f000 f893 	bl	800f0cc <__smakebuf_r>
 800efa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efaa:	f013 0201 	ands.w	r2, r3, #1
 800efae:	d00a      	beq.n	800efc6 <__swsetup_r+0x9a>
 800efb0:	2200      	movs	r2, #0
 800efb2:	60a2      	str	r2, [r4, #8]
 800efb4:	6962      	ldr	r2, [r4, #20]
 800efb6:	4252      	negs	r2, r2
 800efb8:	61a2      	str	r2, [r4, #24]
 800efba:	6922      	ldr	r2, [r4, #16]
 800efbc:	b942      	cbnz	r2, 800efd0 <__swsetup_r+0xa4>
 800efbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800efc2:	d1c5      	bne.n	800ef50 <__swsetup_r+0x24>
 800efc4:	bd38      	pop	{r3, r4, r5, pc}
 800efc6:	0799      	lsls	r1, r3, #30
 800efc8:	bf58      	it	pl
 800efca:	6962      	ldrpl	r2, [r4, #20]
 800efcc:	60a2      	str	r2, [r4, #8]
 800efce:	e7f4      	b.n	800efba <__swsetup_r+0x8e>
 800efd0:	2000      	movs	r0, #0
 800efd2:	e7f7      	b.n	800efc4 <__swsetup_r+0x98>
 800efd4:	20000074 	.word	0x20000074

0800efd8 <_raise_r>:
 800efd8:	291f      	cmp	r1, #31
 800efda:	b538      	push	{r3, r4, r5, lr}
 800efdc:	4605      	mov	r5, r0
 800efde:	460c      	mov	r4, r1
 800efe0:	d904      	bls.n	800efec <_raise_r+0x14>
 800efe2:	2316      	movs	r3, #22
 800efe4:	6003      	str	r3, [r0, #0]
 800efe6:	f04f 30ff 	mov.w	r0, #4294967295
 800efea:	bd38      	pop	{r3, r4, r5, pc}
 800efec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800efee:	b112      	cbz	r2, 800eff6 <_raise_r+0x1e>
 800eff0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eff4:	b94b      	cbnz	r3, 800f00a <_raise_r+0x32>
 800eff6:	4628      	mov	r0, r5
 800eff8:	f000 f830 	bl	800f05c <_getpid_r>
 800effc:	4622      	mov	r2, r4
 800effe:	4601      	mov	r1, r0
 800f000:	4628      	mov	r0, r5
 800f002:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f006:	f000 b817 	b.w	800f038 <_kill_r>
 800f00a:	2b01      	cmp	r3, #1
 800f00c:	d00a      	beq.n	800f024 <_raise_r+0x4c>
 800f00e:	1c59      	adds	r1, r3, #1
 800f010:	d103      	bne.n	800f01a <_raise_r+0x42>
 800f012:	2316      	movs	r3, #22
 800f014:	6003      	str	r3, [r0, #0]
 800f016:	2001      	movs	r0, #1
 800f018:	e7e7      	b.n	800efea <_raise_r+0x12>
 800f01a:	2100      	movs	r1, #0
 800f01c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f020:	4620      	mov	r0, r4
 800f022:	4798      	blx	r3
 800f024:	2000      	movs	r0, #0
 800f026:	e7e0      	b.n	800efea <_raise_r+0x12>

0800f028 <raise>:
 800f028:	4b02      	ldr	r3, [pc, #8]	@ (800f034 <raise+0xc>)
 800f02a:	4601      	mov	r1, r0
 800f02c:	6818      	ldr	r0, [r3, #0]
 800f02e:	f7ff bfd3 	b.w	800efd8 <_raise_r>
 800f032:	bf00      	nop
 800f034:	20000074 	.word	0x20000074

0800f038 <_kill_r>:
 800f038:	b538      	push	{r3, r4, r5, lr}
 800f03a:	4d07      	ldr	r5, [pc, #28]	@ (800f058 <_kill_r+0x20>)
 800f03c:	2300      	movs	r3, #0
 800f03e:	4604      	mov	r4, r0
 800f040:	4608      	mov	r0, r1
 800f042:	4611      	mov	r1, r2
 800f044:	602b      	str	r3, [r5, #0]
 800f046:	f7f7 fab5 	bl	80065b4 <_kill>
 800f04a:	1c43      	adds	r3, r0, #1
 800f04c:	d102      	bne.n	800f054 <_kill_r+0x1c>
 800f04e:	682b      	ldr	r3, [r5, #0]
 800f050:	b103      	cbz	r3, 800f054 <_kill_r+0x1c>
 800f052:	6023      	str	r3, [r4, #0]
 800f054:	bd38      	pop	{r3, r4, r5, pc}
 800f056:	bf00      	nop
 800f058:	200007d4 	.word	0x200007d4

0800f05c <_getpid_r>:
 800f05c:	f7f7 baa2 	b.w	80065a4 <_getpid>

0800f060 <_sbrk_r>:
 800f060:	b538      	push	{r3, r4, r5, lr}
 800f062:	4d06      	ldr	r5, [pc, #24]	@ (800f07c <_sbrk_r+0x1c>)
 800f064:	2300      	movs	r3, #0
 800f066:	4604      	mov	r4, r0
 800f068:	4608      	mov	r0, r1
 800f06a:	602b      	str	r3, [r5, #0]
 800f06c:	f7f7 fb2a 	bl	80066c4 <_sbrk>
 800f070:	1c43      	adds	r3, r0, #1
 800f072:	d102      	bne.n	800f07a <_sbrk_r+0x1a>
 800f074:	682b      	ldr	r3, [r5, #0]
 800f076:	b103      	cbz	r3, 800f07a <_sbrk_r+0x1a>
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	bd38      	pop	{r3, r4, r5, pc}
 800f07c:	200007d4 	.word	0x200007d4

0800f080 <__swhatbuf_r>:
 800f080:	b570      	push	{r4, r5, r6, lr}
 800f082:	460c      	mov	r4, r1
 800f084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f088:	2900      	cmp	r1, #0
 800f08a:	b096      	sub	sp, #88	@ 0x58
 800f08c:	4615      	mov	r5, r2
 800f08e:	461e      	mov	r6, r3
 800f090:	da0d      	bge.n	800f0ae <__swhatbuf_r+0x2e>
 800f092:	89a3      	ldrh	r3, [r4, #12]
 800f094:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f098:	f04f 0100 	mov.w	r1, #0
 800f09c:	bf14      	ite	ne
 800f09e:	2340      	movne	r3, #64	@ 0x40
 800f0a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f0a4:	2000      	movs	r0, #0
 800f0a6:	6031      	str	r1, [r6, #0]
 800f0a8:	602b      	str	r3, [r5, #0]
 800f0aa:	b016      	add	sp, #88	@ 0x58
 800f0ac:	bd70      	pop	{r4, r5, r6, pc}
 800f0ae:	466a      	mov	r2, sp
 800f0b0:	f000 f848 	bl	800f144 <_fstat_r>
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	dbec      	blt.n	800f092 <__swhatbuf_r+0x12>
 800f0b8:	9901      	ldr	r1, [sp, #4]
 800f0ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0c2:	4259      	negs	r1, r3
 800f0c4:	4159      	adcs	r1, r3
 800f0c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0ca:	e7eb      	b.n	800f0a4 <__swhatbuf_r+0x24>

0800f0cc <__smakebuf_r>:
 800f0cc:	898b      	ldrh	r3, [r1, #12]
 800f0ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0d0:	079d      	lsls	r5, r3, #30
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	460c      	mov	r4, r1
 800f0d6:	d507      	bpl.n	800f0e8 <__smakebuf_r+0x1c>
 800f0d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0dc:	6023      	str	r3, [r4, #0]
 800f0de:	6123      	str	r3, [r4, #16]
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	6163      	str	r3, [r4, #20]
 800f0e4:	b003      	add	sp, #12
 800f0e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0e8:	ab01      	add	r3, sp, #4
 800f0ea:	466a      	mov	r2, sp
 800f0ec:	f7ff ffc8 	bl	800f080 <__swhatbuf_r>
 800f0f0:	9f00      	ldr	r7, [sp, #0]
 800f0f2:	4605      	mov	r5, r0
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	4630      	mov	r0, r6
 800f0f8:	f7ff fad2 	bl	800e6a0 <_malloc_r>
 800f0fc:	b948      	cbnz	r0, 800f112 <__smakebuf_r+0x46>
 800f0fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f102:	059a      	lsls	r2, r3, #22
 800f104:	d4ee      	bmi.n	800f0e4 <__smakebuf_r+0x18>
 800f106:	f023 0303 	bic.w	r3, r3, #3
 800f10a:	f043 0302 	orr.w	r3, r3, #2
 800f10e:	81a3      	strh	r3, [r4, #12]
 800f110:	e7e2      	b.n	800f0d8 <__smakebuf_r+0xc>
 800f112:	89a3      	ldrh	r3, [r4, #12]
 800f114:	6020      	str	r0, [r4, #0]
 800f116:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f11a:	81a3      	strh	r3, [r4, #12]
 800f11c:	9b01      	ldr	r3, [sp, #4]
 800f11e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f122:	b15b      	cbz	r3, 800f13c <__smakebuf_r+0x70>
 800f124:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f128:	4630      	mov	r0, r6
 800f12a:	f000 f81d 	bl	800f168 <_isatty_r>
 800f12e:	b128      	cbz	r0, 800f13c <__smakebuf_r+0x70>
 800f130:	89a3      	ldrh	r3, [r4, #12]
 800f132:	f023 0303 	bic.w	r3, r3, #3
 800f136:	f043 0301 	orr.w	r3, r3, #1
 800f13a:	81a3      	strh	r3, [r4, #12]
 800f13c:	89a3      	ldrh	r3, [r4, #12]
 800f13e:	431d      	orrs	r5, r3
 800f140:	81a5      	strh	r5, [r4, #12]
 800f142:	e7cf      	b.n	800f0e4 <__smakebuf_r+0x18>

0800f144 <_fstat_r>:
 800f144:	b538      	push	{r3, r4, r5, lr}
 800f146:	4d07      	ldr	r5, [pc, #28]	@ (800f164 <_fstat_r+0x20>)
 800f148:	2300      	movs	r3, #0
 800f14a:	4604      	mov	r4, r0
 800f14c:	4608      	mov	r0, r1
 800f14e:	4611      	mov	r1, r2
 800f150:	602b      	str	r3, [r5, #0]
 800f152:	f7f7 fa8f 	bl	8006674 <_fstat>
 800f156:	1c43      	adds	r3, r0, #1
 800f158:	d102      	bne.n	800f160 <_fstat_r+0x1c>
 800f15a:	682b      	ldr	r3, [r5, #0]
 800f15c:	b103      	cbz	r3, 800f160 <_fstat_r+0x1c>
 800f15e:	6023      	str	r3, [r4, #0]
 800f160:	bd38      	pop	{r3, r4, r5, pc}
 800f162:	bf00      	nop
 800f164:	200007d4 	.word	0x200007d4

0800f168 <_isatty_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	4d06      	ldr	r5, [pc, #24]	@ (800f184 <_isatty_r+0x1c>)
 800f16c:	2300      	movs	r3, #0
 800f16e:	4604      	mov	r4, r0
 800f170:	4608      	mov	r0, r1
 800f172:	602b      	str	r3, [r5, #0]
 800f174:	f7f7 fa8e 	bl	8006694 <_isatty>
 800f178:	1c43      	adds	r3, r0, #1
 800f17a:	d102      	bne.n	800f182 <_isatty_r+0x1a>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	b103      	cbz	r3, 800f182 <_isatty_r+0x1a>
 800f180:	6023      	str	r3, [r4, #0]
 800f182:	bd38      	pop	{r3, r4, r5, pc}
 800f184:	200007d4 	.word	0x200007d4

0800f188 <_init>:
 800f188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f18a:	bf00      	nop
 800f18c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f18e:	bc08      	pop	{r3}
 800f190:	469e      	mov	lr, r3
 800f192:	4770      	bx	lr

0800f194 <_fini>:
 800f194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f196:	bf00      	nop
 800f198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f19a:	bc08      	pop	{r3}
 800f19c:	469e      	mov	lr, r3
 800f19e:	4770      	bx	lr
